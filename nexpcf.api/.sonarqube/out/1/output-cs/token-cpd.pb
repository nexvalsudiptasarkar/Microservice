©
TD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\CanDbInsert.cs
	namespace 	
Shared
 
. 
Data 
{ 
[ 
AttributeUsage 
( 
AttributeTargets !
.! "
Property" *
,* +
AllowMultiple, 9
=: ;
false< A
,A B
	InheritedC L
=M N
trueO S
)S T
]T U
public 
class  
CanDbInsertAttribute "
:# $
	Attribute% .
{ 
public 
string	 
Name 
{ 
get 
; 
set 
;  
}! "
public 
string	 
Argument 
{ 
get 
; 
set  #
;# $
}% &
} 
} ûı
LD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\DAL.cs
	namespace 	
Shared
 
. 
Data 
{ 
public 

class 
EntityRowCount 
{ 
public 
int 
Count 
{ 
get 
; 
set  #
;# $
}% &
} 
public 

partial 
class 
DAL 
{ 
public 
bool 
FailOnMismatch "
{# $
get% (
;( )
set* -
;- .
}/ 0
public 
int 
TimeoutSecs 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
ConnectionString &
{' (
get) ,
;, -
	protected. 7
set8 ;
;; <
}= >
public 
bool #
AddReturnParamIfMissing +
{, -
get. 1
;1 2
set3 6
;6 7
}8 9
public 
int 
BulkInsertBatchSize &
{' (
get) ,
;, -
set. 1
;1 2
}3 4
	protected 
int 
BulkCopyTimeout %
{& '
get( +
;+ ,
set- 0
;0 1
}2 3
	protected 
MySqlTransaction "
ExternalTransaction# 6
{7 8
get9 <
;< =
set> A
;A B
}C D
public 
bool 
CanReadWriteDB "
{# $
get% (
;( )
set* -
;- .
}/ 0
public## 
DAL## 
(## 
string## 
connStr## !
)##! "
{$$ 	
if%% 
(%% 
string%% 
.%% 
IsNullOrEmpty%% $
(%%$ %
connStr%%% ,
)%%, -
)%%- .
{&& 
throw'' 
new'' !
ArgumentNullException'' /
(''/ 0
$str''0 9
)''9 :
;'': ;
}(( 
this)) 
.)) 
ConnectionString)) !
=))" #
connStr))$ +
;))+ ,
this** 
.** 
Init** 
(** 
)** 
;** 
}++ 	
public-- 
DAL-- 
(-- 
PWConnectionString-- %
connStr--& -
)--- .
:--/ 0
this--1 5
(--5 6
connStr--6 =
.--= >
ConnectionString--> N
)--N O
{.. 	
}// 	
	protected44 
virtual44 
List44 
<44 
T44  
>44  !
ExecuteStoredProc44" 3
<443 4
T444 5
>445 6
(446 7
string447 =

storedProc44> H
,44H I
MySqlParameter44J X
[44X Y
]44Y Z

parameters44[ e
)44e f
{55 	
if66 
(66 
string66 
.66 
IsNullOrEmpty66 $
(66$ %

storedProc66% /
)66/ 0
)660 1
{77 
throw88 
new88 !
ArgumentNullException88 /
(88/ 0
$str880 <
)88< =
;88= >
}99 
	DataTable:: 
data:: 
=:: 
this:: !
.::! "
GetData::" )
(::) *

storedProc::* 4
,::4 5

parameters::6 @
,::@ A
CommandType::B M
.::M N
StoredProcedure::N ]
)::] ^
;::^ _
List;; 
<;; 
T;; 
>;; 

collection;; 
=;;  
this;;! %
.;;% &#
MakeEntityFromDataTable;;& =
<;;= >
T;;> ?
>;;? @
(;;@ A
data;;A E
);;E F
;;;F G
return<< 

collection<< 
;<< 
}== 	
	protected?? 
virtual?? 
int?? 
ExecuteStoredProc?? /
(??/ 0
string??0 6

storedProc??7 A
,??A B
MySqlParameter??C Q
[??Q R
]??R S

parameters??T ^
)??^ _
{@@ 	
ifAA 
(AA 
stringAA 
.AA 
IsNullOrEmptyAA $
(AA$ %

storedProcAA% /
)AA/ 0
)AA0 1
{BB 
throwCC 
newCC !
ArgumentNullExceptionCC /
(CC/ 0
$strCC0 <
)CC< =
;CC= >
}DD 
ifEE 
(EE 

parametersEE 
==EE 
nullEE "
)EE" #
{FF 
throwGG 
newGG !
ArgumentNullExceptionGG /
(GG/ 0
$strGG0 <
)GG< =
;GG= >
}HH 
ifII 
(II 

parametersII 
.II 
LengthII !
==II" $
$numII% &
)II& '
{JJ 
throwKK 
newKK %
InvalidOperationExceptionKK 3
(KK3 4
$strKK4 l
)KKl m
;KKm n
}LL 
intMM 
resultMM 
=MM 
thisMM 
.MM 
SetDataMM %
(MM% &

storedProcMM& 0
,MM0 1

parametersMM2 <
,MM< =
CommandTypeMM> I
.MMI J
StoredProcedureMMJ Y
)MMY Z
;MMZ [
returnNN 
resultNN 
;NN 
}OO 	
	protectedQQ 
virtualQQ 
intQQ 
ExecuteStoredProcQQ /
<QQ/ 0
TQQ0 1
>QQ1 2
(QQ2 3
TQQ3 4
dataQQ5 9
,QQ9 :
stringQQ; A

storedProcQQB L
,QQL M
BulkInsertTypeQQN \
bulkTypeQQ] e
,QQe f
ParamPrecedenceQQg v

precedence	QQw Å
=
QQÇ É
ParamPrecedence
QQÑ ì
.
QQì î
None
QQî ò
,
QQò ô
string
QQö † 
paramArrayPropName
QQ° ≥
=
QQ¥ µ
$str
QQ∂ «
)
QQ« »
{RR 	
intSS 
resultSS 
=SS 
$numSS 
;SS 
MySqlParameterTT 
[TT 
]TT 

parametersTT '
=TT( )
DALTT* -
.TT- .
MakeSqlParametersTT. ?
(TT? @
dataTT@ D
,TTD E
bulkTypeTTF N
,TTN O

precedenceTTP Z
,TTZ [
paramArrayPropNameTT\ n
)TTn o
;TTo p
resultUU 
=UU 
thisUU 
.UU 
ExecuteStoredProcUU +
(UU+ ,

storedProcUU, 6
,UU6 7

parametersUU8 B
)UUB C
;UUC D
returnVV 
resultVV 
;VV 
}WW 	
	protectedYY 
virtualYY 
intYY 
ExecuteStoredProcYY /
<YY/ 0
TYY0 1
>YY1 2
(YY2 3
IEnumerableYY3 >
<YY> ?
TYY? @
>YY@ A
dataYYB F
,YYF G
stringYYH N

storedProcYYO Y
,YYY Z
BulkInsertTypeYY[ i
bulkTypeYYj r
,YYr s
ParamPrecedence	YYt É

precedence
YYÑ é
=
YYè ê
ParamPrecedence
YYë †
.
YY† °
None
YY° •
,
YY• ¶
string
YYß ≠ 
paramArrayPropName
YYÆ ¿
=
YY¡ ¬
$str
YY√ ‘
)
YY‘ ’
{ZZ 	
if[[ 
([[ 
string[[ 
.[[ 
IsNullOrEmpty[[ $
([[$ %

storedProc[[% /
)[[/ 0
)[[0 1
{\\ 
throw]] 
new]] !
ArgumentNullException]] /
(]]/ 0
$str]]0 <
)]]< =
;]]= >
}^^ 
if__ 
(__ 
data__ 
==__ 
null__ 
)__ 
{`` 
throwaa 
newaa !
ArgumentNullExceptionaa /
(aa/ 0
$straa0 6
)aa6 7
;aa7 8
}bb 
ifcc 
(cc 
datacc 
.cc 
Countcc 
(cc 
)cc 
==cc 
$numcc  !
)cc! "
{dd 
throwee 
newee %
InvalidOperationExceptionee 3
(ee3 4
$stree4 e
)eee f
;eef g
}ff 
inthh 
resulthh 
=hh 
thishh 
.hh 
DoBulkMergehh )
(hh) *
datahh* .
,hh. /

storedProchh0 :
,hh: ;
bulkTypehh< D
,hhD E
CommandTypehhF Q
.hhQ R
StoredProcedurehhR a
,hha b

precedencehhc m
,hhm n
truehho s
)hhs t
;hht u
returnii 
resultii 
;ii 
}jj 	
	protectedll 
virtualll 
Listll 
<ll 
Tll  
>ll  !
ExecuteQueryll" .
<ll. /
Tll/ 0
>ll0 1
(ll1 2
stringll2 8
queryll9 >
,ll> ?
paramsll@ F
MySqlParameterllG U
[llU V
]llV W

parametersllX b
)llb c
{mm 	
ifnn 
(nn 
stringnn 
.nn 
IsNullOrEmptynn $
(nn$ %
querynn% *
)nn* +
)nn+ ,
{oo 
throwpp 
newpp !
ArgumentNullExceptionpp /
(pp/ 0
$strpp0 7
)pp7 8
;pp8 9
}qq 
	DataTablerr 
datarr 
=rr 
thisrr !
.rr! "
GetDatarr" )
(rr) *
queryrr* /
,rr/ 0

parametersrr1 ;
,rr; <
CommandTyperr= H
.rrH I
TextrrI M
)rrM N
;rrN O
Listss 
<ss 
Tss 
>ss 

collectionss 
=ss  
thisss! %
.ss% &#
MakeEntityFromDataTabless& =
<ss= >
Tss> ?
>ss? @
(ss@ A
datassA E
)ssE F
;ssF G
returntt 

collectiontt 
;tt 
}uu 	
	protectedww 
virtualww 
intww 
ExecuteQueryww *
(ww* +
stringww+ 1
queryww2 7
,ww7 8
paramsww9 ?
MySqlParameterww@ N
[wwN O
]wwO P

parameterswwQ [
)ww[ \
{xx 	
ifyy 
(yy 
stringyy 
.yy 
IsNullOrEmptyyy $
(yy$ %
queryyy% *
)yy* +
)yy+ ,
{zz 
throw{{ 
new{{ !
ArgumentNullException{{ /
({{/ 0
$str{{0 7
){{7 8
;{{8 9
}|| 
int}} 
result}} 
=}} 
this}} 
.}} 
SetData}} %
(}}% &
query}}& +
,}}+ ,

parameters}}- 7
,}}7 8
CommandType}}9 D
.}}D E
Text}}E I
)}}I J
;}}J K
return~~ 
result~~ 
;~~ 
} 	
	protected
ÅÅ 
virtual
ÅÅ 
int
ÅÅ 
ExecuteQuery
ÅÅ *
<
ÅÅ* +
T
ÅÅ+ ,
>
ÅÅ, -
(
ÅÅ- .
T
ÅÅ. /
data
ÅÅ0 4
,
ÅÅ4 5
string
ÅÅ6 <
query
ÅÅ= B
,
ÅÅB C
BulkInsertType
ÅÅD R
bulkType
ÅÅS [
,
ÅÅ[ \
ParamPrecedence
ÅÅ] l

precedence
ÅÅm w
=
ÅÅx y
ParamPrecedenceÅÅz â
.ÅÅâ ä
NoneÅÅä é
,ÅÅé è
stringÅÅê ñ"
paramArrayPropNameÅÅó ©
=ÅÅ™ ´
$strÅÅ¨ Ω
)ÅÅΩ æ
{
ÇÇ 	
int
ÉÉ 
result
ÉÉ 
=
ÉÉ 
$num
ÉÉ 
;
ÉÉ 
MySqlParameter
ÑÑ 
[
ÑÑ 
]
ÑÑ 

parameters
ÑÑ '
=
ÑÑ( )
DAL
ÑÑ* -
.
ÑÑ- .
MakeSqlParameters
ÑÑ. ?
(
ÑÑ? @
data
ÑÑ@ D
,
ÑÑD E
bulkType
ÑÑF N
)
ÑÑN O
;
ÑÑO P
result
ÖÖ 
=
ÖÖ 
this
ÖÖ 
.
ÖÖ 
ExecuteQuery
ÖÖ &
(
ÖÖ& '
query
ÖÖ' ,
,
ÖÖ, -

parameters
ÖÖ. 8
)
ÖÖ8 9
;
ÖÖ9 :
return
ÜÜ 
result
ÜÜ 
;
ÜÜ 
}
áá 	
	protected
ââ 
virtual
ââ 
int
ââ 
ExecuteQuery
ââ *
<
ââ* +
T
ââ+ ,
>
ââ, -
(
ââ- .
IEnumerable
ââ. 9
<
ââ9 :
T
ââ: ;
>
ââ; <
data
ââ= A
,
ââA B
string
ââC I
query
ââJ O
,
ââO P
BulkInsertType
ââQ _
bulkType
ââ` h
,
ââh i
ParamPrecedence
ââj y

precedenceââz Ñ
=ââÖ Ü
ParamPrecedenceââá ñ
.ââñ ó
Noneââó õ
,ââõ ú
stringââù £"
paramArrayPropNameââ§ ∂
=ââ∑ ∏
$strââπ  
)ââ  À
{
ää 	
if
ãã 
(
ãã 
string
ãã 
.
ãã 
IsNullOrEmpty
ãã $
(
ãã$ %
query
ãã% *
)
ãã* +
)
ãã+ ,
{
åå 
throw
çç 
new
çç #
ArgumentNullException
çç /
(
çç/ 0
$str
çç0 7
)
çç7 8
;
çç8 9
}
éé 
if
èè 
(
èè 
data
èè 
==
èè 
null
èè 
)
èè 
{
êê 
throw
ëë 
new
ëë #
ArgumentNullException
ëë /
(
ëë/ 0
$str
ëë0 6
)
ëë6 7
;
ëë7 8
}
íí 
if
ìì 
(
ìì 
data
ìì 
.
ìì 
Count
ìì 
(
ìì 
)
ìì 
==
ìì 
$num
ìì  !
)
ìì! "
{
îî 
throw
ïï 
new
ïï '
InvalidOperationException
ïï 3
(
ïï3 4
$str
ïï4 e
)
ïïe f
;
ïïf g
}
ññ 
int
óó 
result
óó 
=
óó 
this
óó 
.
óó 
DoBulkMerge
óó )
(
óó) *
data
óó* .
,
óó. /
query
óó0 5
,
óó5 6
bulkType
óó7 ?
,
óó? @
CommandType
óóA L
.
óóL M
Text
óóM Q
,
óóQ R

precedence
óóS ]
,
óó] ^
true
óó_ c
)
óóc d
;
óód e
return
òò 
result
òò 
;
òò 
}
ôô 	
	protected
ﬂﬂ 
virtual
ﬂﬂ 
void
ﬂﬂ 
Init
ﬂﬂ #
(
ﬂﬂ# $
)
ﬂﬂ$ %
{
‡‡ 	
this
·· 
.
·· 
TimeoutSecs
·· 
=
·· 
$num
·· "
;
··" #
this
‚‚ 
.
‚‚ 
FailOnMismatch
‚‚ 
=
‚‚  !
false
‚‚" '
;
‚‚' (
this
„„ 
.
„„ %
AddReturnParamIfMissing
„„ (
=
„„) *
true
„„+ /
;
„„/ 0
this
‰‰ 
.
‰‰ !
ExternalTransaction
‰‰ $
=
‰‰% &
null
‰‰' +
;
‰‰+ ,
this
ÂÂ 
.
ÂÂ !
BulkInsertBatchSize
ÂÂ $
=
ÂÂ% &
$num
ÂÂ' *
;
ÂÂ* +
this
ÊÊ 
.
ÊÊ 
BulkCopyTimeout
ÊÊ  
=
ÊÊ! "
$num
ÊÊ# &
;
ÊÊ& '
this
ËË 
.
ËË 
CanReadWriteDB
ËË 
=
ËË  !
true
ËË" &
;
ËË& '
}
ÈÈ 	
	protected
ÎÎ 
virtual
ÎÎ 
string
ÎÎ  
TestConnection
ÎÎ! /
(
ÎÎ/ 0
)
ÎÎ0 1
{
ÏÏ 	
string
ÌÌ 
result
ÌÌ 
=
ÌÌ 
string
ÌÌ "
.
ÌÌ" #
Empty
ÌÌ# (
;
ÌÌ( )
MySqlConnection
ÓÓ 
conn
ÓÓ  
=
ÓÓ! "
null
ÓÓ# '
;
ÓÓ' (
try
ÔÔ 
{
 
using
ÒÒ 
(
ÒÒ 
conn
ÒÒ 
=
ÒÒ 
new
ÒÒ !
MySqlConnection
ÒÒ" 1
(
ÒÒ1 2
this
ÒÒ2 6
.
ÒÒ6 7
ConnectionString
ÒÒ7 G
.
ÒÒG H
Base64Decode
ÒÒH T
(
ÒÒT U
)
ÒÒU V
)
ÒÒV W
)
ÒÒW X
{
ÚÚ 
conn
ÛÛ 
.
ÛÛ 
Open
ÛÛ 
(
ÛÛ 
)
ÛÛ 
;
ÛÛ  
conn
ÙÙ 
.
ÙÙ 
Close
ÙÙ 
(
ÙÙ 
)
ÙÙ  
;
ÙÙ  !
}
ıı 
}
ˆˆ 
catch
˜˜ 
(
˜˜ 
	Exception
˜˜ 
ex
˜˜ 
)
˜˜  
{
¯¯ 
result
˘˘ 
=
˘˘ 
ex
˘˘ 
.
˘˘ 
Message
˘˘ #
;
˘˘# $
}
˙˙ 
return
˚˚ 
result
˚˚ 
;
˚˚ 
}
¸¸ 	
	protected
˛˛ 
virtual
˛˛ 
string
˛˛  $
AddTryCatchTranToQuery
˛˛! 7
(
˛˛7 8
string
˛˛8 >
query
˛˛? D
,
˛˛D E
string
˛˛F L
logQuery
˛˛M U
,
˛˛U V
string
˛˛W ]
transactionName
˛˛^ m
=
˛˛n o
$str
˛˛p r
)
˛˛r s
{
ˇˇ 	
transactionName
ÄÄ 
=
ÄÄ 
transactionName
ÄÄ -
.
ÄÄ- .
Trim
ÄÄ. 2
(
ÄÄ2 3
)
ÄÄ3 4
;
ÄÄ4 5
logQuery
ÅÅ 
=
ÅÅ 
logQuery
ÅÅ 
.
ÅÅ  
Trim
ÅÅ  $
(
ÅÅ$ %
)
ÅÅ% &
;
ÅÅ& '
StringBuilder
ÉÉ 
text
ÉÉ 
=
ÉÉ  
new
ÉÉ! $
StringBuilder
ÉÉ% 2
(
ÉÉ2 3
)
ÉÉ3 4
;
ÉÉ4 5
text
ÑÑ 
.
ÑÑ 

AppendLine
ÑÑ 
(
ÑÑ 
$str
ÑÑ '
)
ÑÑ' (
;
ÑÑ( )
text
ÖÖ 
.
ÖÖ 
AppendFormat
ÖÖ 
(
ÖÖ 
$str
ÖÖ 3
,
ÖÖ3 4
transactionName
ÖÖ5 D
)
ÖÖD E
.
ÖÖE F

AppendLine
ÖÖF P
(
ÖÖP Q
)
ÖÖQ R
;
ÖÖR S
text
ÜÜ 
.
ÜÜ 

AppendLine
ÜÜ 
(
ÜÜ 
query
ÜÜ !
)
ÜÜ! "
.
ÜÜ" #

AppendLine
ÜÜ# -
(
ÜÜ- .
)
ÜÜ. /
;
ÜÜ/ 0
text
áá 
.
áá 
AppendFormat
áá 
(
áá 
$str
áá 4
,
áá4 5
transactionName
áá6 E
)
ááE F
.
ááF G

AppendLine
ááG Q
(
ááQ R
)
ááR S
;
ááS T
text
àà 
.
àà 

AppendLine
àà 
(
àà 
$str
àà %
)
àà% &
;
àà& '
text
ââ 
.
ââ 

AppendLine
ââ 
(
ââ 
$str
ââ )
)
ââ) *
;
ââ* +
text
ää 
.
ää 
AppendFormat
ää 
(
ää 
$str
ää I
,
ääI J
transactionName
ääK Z
)
ääZ [
.
ää[ \

AppendLine
ää\ f
(
ääf g
)
ääg h
;
ääh i
text
ãã 
.
ãã 

AppendLine
ãã 
(
ãã 
logQuery
ãã $
)
ãã$ %
;
ãã% &
text
åå 
.
åå 

AppendLine
åå 
(
åå 
$str
åå '
)
åå' (
;
åå( )
return
çç 
text
çç 
.
çç 
ToString
çç  
(
çç  !
)
çç! "
;
çç" #
}
éé 	
	protected
êê 
virtual
êê 
string
êê   
NormalizeTableName
êê! 3
(
êê3 4
string
êê4 :
	tableName
êê; D
)
êêD E
{
ëë 	
string
íí 
[
íí 
]
íí 
parts
íí 
=
íí 
	tableName
íí &
.
íí& '
Split
íí' ,
(
íí, -
$char
íí- 0
)
íí0 1
;
íí1 2
	tableName
ìì 
=
ìì 
string
ìì 
.
ìì 
Empty
ìì $
;
ìì$ %
foreach
îî 
(
îî 
string
îî 
part
îî  
in
îî! #
parts
îî$ )
)
îî) *
{
ïï 
	tableName
ññ 
=
ññ 
(
ññ 
string
ññ #
.
ññ# $
IsNullOrEmpty
ññ$ 1
(
ññ1 2
	tableName
ññ2 ;
)
ññ; <
)
ññ< =
?
óó 
string
óó $
.
óó$ %
Format
óó% +
(
óó+ ,
$str
óó, 3
,
óó3 4
part
óó5 9
)
óó9 :
:
òò 
string
òò $
.
òò$ %
Format
òò% +
(
òò+ ,
$str
òò, 4
,
òò4 5
part
òò6 :
)
òò: ;
;
òò; <
}
ôô 
return
öö 
	tableName
öö 
.
öö 
Replace
öö $
(
öö$ %
$str
öö% )
,
öö) *
$str
öö+ .
)
öö. /
.
öö/ 0
Replace
öö0 7
(
öö7 8
$str
öö8 <
,
öö< =
$str
öö> A
)
ööA B
;
ööB C
}
õõ 	
	protected
ùù 
virtual
ùù 
int
ùù #
BulkInsertTargetCount
ùù 3
(
ùù3 4
string
ùù4 :
	tableName
ùù; D
)
ùùD E
{
ûû 	
if
üü 
(
üü 
string
üü 
.
üü 
IsNullOrEmpty
üü $
(
üü$ %
	tableName
üü% .
)
üü. /
)
üü/ 0
{
†† 
throw
°° 
new
°° #
ArgumentNullException
°° /
(
°°/ 0
$str
°°0 ;
)
°°; <
;
°°< =
}
¢¢ 
if
££ 
(
££ 
!
££ 
	tableName
££ 
.
££ 
Contains
££ #
(
££# $
$char
££$ '
)
££' (
||
££) +
	tableName
££, 5
.
££5 6

StartsWith
££6 @
(
££@ A
$str
££A D
)
££D E
)
££E F
{
§§ 
throw
•• 
new
•• '
InvalidOperationException
•• 3
(
••3 4
$str
••4 u
)
••u v
;
••v w
}
¶¶ 
int
®® 
result
®® 
=
®® 
$num
®® 
;
®® 
string
©© 
query
©© 
=
©© 
string
©© !
.
©©! "
Format
©©" (
(
©©( )
$str
©©) C
,
©©C D
this
©©E I
.
©©I J 
NormalizeTableName
©©J \
(
©©\ ]
	tableName
©©] f
)
©©f g
)
©©g h
;
©©h i
List
™™ 
<
™™ 
EntityRowCount
™™ 
>
™™  
rowCount
™™! )
=
™™* +
this
™™, 0
.
™™0 1
ExecuteQuery
™™1 =
<
™™= >
EntityRowCount
™™> L
>
™™L M
(
™™M N
query
™™N S
)
™™S T
;
™™T U
if
´´ 
(
´´ 
rowCount
´´ 
!=
´´ 
null
´´  
&&
´´! #
rowCount
´´$ ,
.
´´, -
Count
´´- 2
>
´´3 4
$num
´´5 6
)
´´6 7
{
¨¨ 
result
≠≠ 
=
≠≠ 
rowCount
≠≠ !
[
≠≠! "
$num
≠≠" #
]
≠≠# $
.
≠≠$ %
Count
≠≠% *
;
≠≠* +
}
ÆÆ 
return
ØØ 
result
ØØ 
;
ØØ 
}
∞∞ 	
	protected
≤≤ 
virtual
≤≤ 
	DataTable
≤≤ #
GetData
≤≤$ +
(
≤≤+ ,
string
≤≤, 2
cmdText
≤≤3 :
,
≤≤: ;
MySqlParameter
≤≤< J
[
≤≤J K
]
≤≤K L

parameters
≤≤M W
=
≤≤X Y
null
≤≤Z ^
,
≤≤^ _
CommandType
≤≤` k
cmdType
≤≤l s
=
≤≤t u
CommandType≤≤v Å
.≤≤Å Ç
StoredProcedure≤≤Ç ë
)≤≤ë í
{
≥≥ 	
if
¥¥ 
(
¥¥ 
string
¥¥ 
.
¥¥ 
IsNullOrEmpty
¥¥ $
(
¥¥$ %
cmdText
¥¥% ,
)
¥¥, -
)
¥¥- .
{
µµ 
throw
∂∂ 
new
∂∂ #
ArgumentNullException
∂∂ /
(
∂∂/ 0
$str
∂∂0 9
)
∂∂9 :
;
∂∂: ;
}
∑∑ 
MySqlConnection
ππ 
conn
ππ  
=
ππ! "
null
ππ# '
;
ππ' (
MySqlCommand
∫∫ 
cmd
∫∫ 
=
∫∫ 
null
∫∫ #
;
∫∫# $
MySqlDataReader
ªª 
reader
ªª "
=
ªª# $
null
ªª% )
;
ªª) *
	DataTable
ºº 
data
ºº 
=
ºº 
null
ºº !
;
ºº! "
using
ææ 
(
ææ 
conn
ææ 
=
ææ 
new
ææ 
MySqlConnection
ææ -
(
ææ- .
this
ææ. 2
.
ææ2 3
ConnectionString
ææ3 C
.
ææC D
Base64Decode
ææD P
(
ææP Q
)
ææQ R
)
ææR S
)
ææS T
{
øø 
conn
¿¿ 
.
¿¿ 
Open
¿¿ 
(
¿¿ 
)
¿¿ 
;
¿¿ 
using
¡¡ 
(
¡¡ 
cmd
¡¡ 
=
¡¡ 
new
¡¡  
MySqlCommand
¡¡! -
(
¡¡- .
cmdText
¡¡. 5
,
¡¡5 6
conn
¡¡7 ;
)
¡¡; <
{
¡¡= >
CommandTimeout
¡¡? M
=
¡¡N O
this
¡¡P T
.
¡¡T U
TimeoutSecs
¡¡U `
,
¡¡` a
CommandType
¡¡b m
=
¡¡n o
cmdType
¡¡p w
}
¡¡x y
)
¡¡y z
{
¬¬ 
if
√√ 
(
√√ 

parameters
√√ "
!=
√√# %
null
√√& *
)
√√* +
{
ƒƒ 
cmd
≈≈ 
.
≈≈ 

Parameters
≈≈ &
.
≈≈& '
AddRange
≈≈' /
(
≈≈/ 0

parameters
≈≈0 :
)
≈≈: ;
;
≈≈; <
}
∆∆ 
if
«« 
(
«« 
this
«« 
.
«« 
CanReadWriteDB
«« +
)
««+ ,
{
»» 
using
…… 
(
…… 
reader
…… %
=
……& '
cmd
……( +
.
……+ ,
ExecuteReader
……, 9
(
……9 :
)
……: ;
)
……; <
{
   
data
ÀÀ  
=
ÀÀ! "
new
ÀÀ# &
	DataTable
ÀÀ' 0
(
ÀÀ0 1
)
ÀÀ1 2
;
ÀÀ2 3
data
ÃÃ  
.
ÃÃ  !
Load
ÃÃ! %
(
ÃÃ% &
reader
ÃÃ& ,
)
ÃÃ, -
;
ÃÃ- .
}
ÕÕ 
}
ŒŒ 
}
œœ 
}
–– 
return
—— 
data
—— 
;
—— 
}
““ 	
	protected
‘‘ 
virtual
‘‘ 
int
‘‘ 
SetData
‘‘ %
(
‘‘% &
string
‘‘& ,
cmdText
‘‘- 4
,
‘‘4 5
MySqlParameter
‘‘6 D
[
‘‘D E
]
‘‘E F

parameters
‘‘G Q
,
‘‘Q R
CommandType
‘‘S ^
cmdType
‘‘_ f
=
‘‘g h
CommandType
‘‘i t
.
‘‘t u
StoredProcedure‘‘u Ñ
,‘‘Ñ Ö
bool‘‘Ü ä!
useAdoTransaction‘‘ã ú
=‘‘ù û
false‘‘ü §
)‘‘§ •
{
’’ 	
if
÷÷ 
(
÷÷ 
string
÷÷ 
.
÷÷ 
IsNullOrEmpty
÷÷ $
(
÷÷$ %
cmdText
÷÷% ,
)
÷÷, -
)
÷÷- .
{
◊◊ 
throw
ÿÿ 
new
ÿÿ #
ArgumentNullException
ÿÿ /
(
ÿÿ/ 0
$str
ÿÿ0 9
)
ÿÿ9 :
;
ÿÿ: ;
}
ŸŸ 
int
€€ 
result
€€ 
=
€€ 
$num
€€ 
;
€€ 
MySqlConnection
‹‹ 
conn
‹‹  
=
‹‹! "
null
‹‹# '
;
‹‹' (
MySqlCommand
›› 
cmd
›› 
=
›› 
null
›› #
;
››# $
MySqlTransaction
ﬁﬁ 
transaction
ﬁﬁ (
=
ﬁﬁ) *
null
ﬁﬁ+ /
;
ﬁﬁ/ 0
using
ﬂﬂ 
(
ﬂﬂ 
conn
ﬂﬂ 
=
ﬂﬂ 
new
ﬂﬂ 
MySqlConnection
ﬂﬂ -
(
ﬂﬂ- .
this
ﬂﬂ. 2
.
ﬂﬂ2 3
ConnectionString
ﬂﬂ3 C
.
ﬂﬂC D
Base64Decode
ﬂﬂD P
(
ﬂﬂP Q
)
ﬂﬂQ R
)
ﬂﬂR S
)
ﬂﬂS T
{
‡‡ 
conn
·· 
.
·· 
Open
·· 
(
·· 
)
·· 
;
·· 
if
‚‚ 
(
‚‚ 
useAdoTransaction
‚‚ %
&&
‚‚& (
cmdType
‚‚) 0
!=
‚‚1 3
CommandType
‚‚4 ?
.
‚‚? @
StoredProcedure
‚‚@ O
)
‚‚O P
{
„„ 
transaction
‰‰ 
=
‰‰  !
conn
‰‰" &
.
‰‰& '
BeginTransaction
‰‰' 7
(
‰‰7 8
)
‰‰8 9
;
‰‰9 :
}
ÂÂ 
using
ÁÁ 
(
ÁÁ 
cmd
ÁÁ 
=
ÁÁ 
new
ÁÁ  
MySqlCommand
ÁÁ! -
(
ÁÁ- .
cmdText
ÁÁ. 5
,
ÁÁ5 6
conn
ÁÁ7 ;
)
ÁÁ; <
{
ÁÁ= >
CommandTimeout
ÁÁ? M
=
ÁÁN O
this
ÁÁP T
.
ÁÁT U
TimeoutSecs
ÁÁU `
,
ÁÁ` a
CommandType
ÁÁb m
=
ÁÁn o
cmdType
ÁÁp w
}
ÁÁx y
)
ÁÁy z
{
ËË 
MySqlParameter
ÈÈ "
rowsAffected
ÈÈ# /
=
ÈÈ0 1
null
ÈÈ2 6
;
ÈÈ6 7
if
ÍÍ 
(
ÍÍ 

parameters
ÍÍ "
!=
ÍÍ# %
null
ÍÍ& *
)
ÍÍ* +
{
ÎÎ 
cmd
ÏÏ 
.
ÏÏ 

Parameters
ÏÏ &
.
ÏÏ& '
AddRange
ÏÏ' /
(
ÏÏ/ 0

parameters
ÏÏ0 :
)
ÏÏ: ;
;
ÏÏ; <
if
ÌÌ 
(
ÌÌ 
cmdType
ÌÌ #
==
ÌÌ$ &
CommandType
ÌÌ' 2
.
ÌÌ2 3
StoredProcedure
ÌÌ3 B
&&
ÌÌC E
this
ÌÌF J
.
ÌÌJ K%
AddReturnParamIfMissing
ÌÌK b
)
ÌÌb c
{
ÓÓ 
rowsAffected
ÔÔ (
=
ÔÔ) *

parameters
ÔÔ+ 5
.
ÔÔ5 6
FirstOrDefault
ÔÔ6 D
(
ÔÔD E
x
ÔÔE F
=>
ÔÔG I
x
ÔÔJ K
.
ÔÔK L
	Direction
ÔÔL U
==
ÔÔV X 
ParameterDirection
ÔÔY k
.
ÔÔk l
ReturnValue
ÔÔl w
)
ÔÔw x
;
ÔÔx y
if
 
(
  
rowsAffected
  ,
==
- /
null
0 4
)
4 5
{
ÒÒ 
rowsAffected
ÚÚ  ,
=
ÚÚ- .
cmd
ÚÚ/ 2
.
ÚÚ2 3

Parameters
ÚÚ3 =
.
ÚÚ= >
Add
ÚÚ> A
(
ÚÚA B
new
ÚÚB E
MySqlParameter
ÚÚF T
(
ÚÚT U
$str
ÚÚU d
,
ÚÚd e
	SqlDbType
ÚÚf o
.
ÚÚo p
Int
ÚÚp s
)
ÚÚs t
{
ÚÚu v
	DirectionÚÚw Ä
=ÚÚÅ Ç"
ParameterDirectionÚÚÉ ï
.ÚÚï ñ
ReturnValueÚÚñ °
}ÚÚ¢ £
)ÚÚ£ §
;ÚÚ§ •
}
ÛÛ 
}
ÙÙ 
}
ıı 
try
ˆˆ 
{
˜˜ 
if
¯¯ 
(
¯¯ 
this
¯¯  
.
¯¯  !
CanReadWriteDB
¯¯! /
)
¯¯/ 0
{
˘˘ 
result
˙˙ "
=
˙˙# $
cmd
˙˙% (
.
˙˙( )
ExecuteNonQuery
˙˙) 8
(
˙˙8 9
)
˙˙9 :
;
˙˙: ;
}
˚˚ 
}
¸¸ 
catch
˝˝ 
(
˝˝ 
MySqlException
˝˝ )
ex
˝˝* ,
)
˝˝, -
{
˛˛ 
if
ˇˇ 
(
ˇˇ 
transaction
ˇˇ '
!=
ˇˇ( *
null
ˇˇ+ /
&&
ˇˇ0 2
cmdType
ˇˇ3 :
!=
ˇˇ; =
CommandType
ˇˇ> I
.
ˇˇI J
StoredProcedure
ˇˇJ Y
)
ˇˇY Z
{
ÄÄ 
transaction
ÅÅ '
.
ÅÅ' (
Rollback
ÅÅ( 0
(
ÅÅ0 1
)
ÅÅ1 2
;
ÅÅ2 3
}
ÇÇ 
throw
ÉÉ 
(
ÉÉ 
ex
ÉÉ !
)
ÉÉ! "
;
ÉÉ" #
}
ÑÑ 
result
ÖÖ 
=
ÖÖ 
(
ÖÖ 
rowsAffected
ÖÖ *
!=
ÖÖ+ -
null
ÖÖ. 2
)
ÖÖ2 3
?
ÖÖ4 5
(
ÖÖ6 7
int
ÖÖ7 :
)
ÖÖ: ;
rowsAffected
ÖÖ; G
.
ÖÖG H
Value
ÖÖH M
:
ÖÖN O
result
ÖÖP V
;
ÖÖV W
}
ÜÜ 
}
áá 
return
àà 
result
àà 
;
àà 
}
ââ 	
	protected
ãã 
virtual
ãã 
int
ãã 
DoBulkMerge
ãã )
<
ãã) *
T
ãã* +
>
ãã+ ,
(
ãã, -
IEnumerable
ãã- 8
<
ãã8 9
T
ãã9 :
>
ãã: ;
data
ãã< @
,
ãã@ A
string
ããB H
	queryText
ããI R
,
ããR S
BulkInsertType
ããT b
bulkType
ããc k
,
ããk l
CommandType
ããm x
cmdTypeããy Ä
,ããÄ Å
ParamPrecedenceããÇ ë

precedenceããí ú
=ããù û
ParamPrecedenceããü Æ
.ããÆ Ø
NoneããØ ≥
,ãã≥ ¥
boolããµ π!
useAdoTransactionãã∫ À
=ããÃ Õ
falseããŒ ”
)ãã” ‘
{
åå 	
if
çç 
(
çç 
string
çç 
.
çç 
IsNullOrEmpty
çç $
(
çç$ %
	queryText
çç% .
)
çç. /
)
çç/ 0
{
éé 
throw
èè 
new
èè #
ArgumentNullException
èè /
(
èè/ 0
$str
èè0 ;
)
èè; <
;
èè< =
}
êê 
int
íí 
result
íí 
=
íí 
$num
íí 
;
íí 
MySqlConnection
ìì 
conn
ìì  
=
ìì! "
null
ìì# '
;
ìì' (
MySqlCommand
îî 
cmd
îî 
=
îî 
null
îî #
;
îî# $
MySqlTransaction
ïï 
transaction
ïï (
=
ïï) *
null
ïï+ /
;
ïï/ 0
using
ññ 
(
ññ 
conn
ññ 
=
ññ 
new
ññ 
MySqlConnection
ññ -
(
ññ- .
this
ññ. 2
.
ññ2 3
ConnectionString
ññ3 C
.
ññC D
Base64Decode
ññD P
(
ññP Q
)
ññQ R
)
ññR S
)
ññS T
{
óó 
conn
òò 
.
òò 
Open
òò 
(
òò 
)
òò 
;
òò 
if
ôô 
(
ôô 
useAdoTransaction
ôô %
&&
ôô& (
cmdType
ôô) 0
!=
ôô1 3
CommandType
ôô4 ?
.
ôô? @
StoredProcedure
ôô@ O
)
ôôO P
{
öö 
transaction
õõ 
=
õõ  !
conn
õõ" &
.
õõ& '
BeginTransaction
õõ' 7
(
õõ7 8
)
õõ8 9
;
õõ9 :
}
úú 
using
ùù 
(
ùù 
cmd
ùù 
=
ùù 
new
ùù  
MySqlCommand
ùù! -
(
ùù- .
	queryText
ùù. 7
,
ùù7 8
conn
ùù9 =
)
ùù= >
{
ùù? @
CommandTimeout
ùùA O
=
ùùP Q
this
ùùR V
.
ùùV W
TimeoutSecs
ùùW b
,
ùùb c
CommandType
ùùd o
=
ùùp q
cmdType
ùùr y
}
ùùz {
)
ùù{ |
{
ûû 
try
üü 
{
†† 
foreach
°° 
(
°°  !
T
°°! "
item
°°# '
in
°°( *
data
°°+ /
)
°°/ 0
{
¢¢ 
var
££  
paramArrayPropName
££  2
=
££3 4
$str
££5 F
;
££F G
MySqlParameter
§§ *
[
§§* +
]
§§+ ,

parameters
§§- 7
=
§§8 9
DAL
§§: =
.
§§= >
MakeSqlParameters
§§> O
(
§§O P
item
§§P T
,
§§T U
bulkType
§§V ^
,
§§^ _

precedence
§§` j
,
§§j k 
paramArrayPropName
§§l ~
)
§§~ 
;§§ Ä
if
•• 
(
••  

parameters
••  *
!=
••+ -
null
••. 2
)
••2 3
{
¶¶ 
cmd
ßß  #
.
ßß# $

Parameters
ßß$ .
.
ßß. /
AddRange
ßß/ 7
(
ßß7 8

parameters
ßß8 B
)
ßßB C
;
ßßC D
if
®®  "
(
®®# $
this
®®$ (
.
®®( )
CanReadWriteDB
®®) 7
)
®®7 8
{
©©  !
cmd
™™$ '
.
™™' (
ExecuteNonQuery
™™( 7
(
™™7 8
)
™™8 9
;
™™9 :
}
´´  !
cmd
¨¨  #
.
¨¨# $

Parameters
¨¨$ .
.
¨¨. /
Clear
¨¨/ 4
(
¨¨4 5
)
¨¨5 6
;
¨¨6 7
result
≠≠  &
++
≠≠& (
;
≠≠( )
}
ÆÆ 
}
ØØ 
}
∞∞ 
catch
±± 
(
±± 
	Exception
±± $
ex
±±% '
)
±±' (
{
≤≤ 
if
≥≥ 
(
≥≥ 
transaction
≥≥ '
!=
≥≥( *
null
≥≥+ /
)
≥≥/ 0
{
¥¥ 
transaction
µµ '
.
µµ' (
Rollback
µµ( 0
(
µµ0 1
)
µµ1 2
;
µµ2 3
}
∂∂ 
throw
∑∑ 
(
∑∑ 
ex
∑∑ !
)
∑∑! "
;
∑∑" #
}
∏∏ 
}
ππ 
}
∫∫ 
return
ªª 
result
ªª 
;
ªª 
}
ºº 	
	protected
ææ 
static
ææ 
T
ææ  
ConvertFromDBValue
ææ -
<
ææ- .
T
ææ. /
>
ææ/ 0
(
ææ0 1
object
ææ1 7
obj
ææ8 ;
,
ææ; <
T
ææ= >
defaultValue
ææ? K
)
ææK L
{
øø 	
T
¿¿ 
result
¿¿ 
=
¿¿ 
(
¿¿ 
obj
¿¿ 
==
¿¿ 
null
¿¿ #
||
¿¿$ &
obj
¿¿' *
==
¿¿+ -
DBNull
¿¿. 4
.
¿¿4 5
Value
¿¿5 :
)
¿¿: ;
?
¿¿< =
default
¿¿> E
(
¿¿E F
T
¿¿F G
)
¿¿G H
:
¿¿I J
(
¿¿K L
T
¿¿L M
)
¿¿M N
obj
¿¿N Q
;
¿¿Q R
return
¡¡ 
result
¡¡ 
;
¡¡ 
}
¬¬ 	
	protected
ƒƒ 
virtual
ƒƒ 
List
ƒƒ 
<
ƒƒ 
T
ƒƒ  
>
ƒƒ  !%
MakeEntityFromDataTable
ƒƒ" 9
<
ƒƒ9 :
T
ƒƒ: ;
>
ƒƒ; <
(
ƒƒ< =
	DataTable
ƒƒ= F
data
ƒƒG K
)
ƒƒK L
{
≈≈ 	
if
∆∆ 
(
∆∆ 
data
∆∆ 
==
∆∆ 
null
∆∆ 
)
∆∆ 
{
«« 
throw
»» 
new
»» #
ArgumentNullException
»» /
(
»»/ 0
$str
»»0 6
)
»»6 7
;
»»7 8
}
…… 
Type
ÀÀ 
objType
ÀÀ 
=
ÀÀ 
typeof
ÀÀ !
(
ÀÀ! "
T
ÀÀ" #
)
ÀÀ# $
;
ÀÀ$ %
List
ÃÃ 
<
ÃÃ 
T
ÃÃ 
>
ÃÃ 

collection
ÃÃ 
=
ÃÃ  
new
ÃÃ! $
List
ÃÃ% )
<
ÃÃ) *
T
ÃÃ* +
>
ÃÃ+ ,
(
ÃÃ, -
)
ÃÃ- .
;
ÃÃ. /
if
ÕÕ 
(
ÕÕ 
data
ÕÕ 
!=
ÕÕ 
null
ÕÕ 
&&
ÕÕ 
data
ÕÕ  $
.
ÕÕ$ %
Rows
ÕÕ% )
.
ÕÕ) *
Count
ÕÕ* /
>
ÕÕ0 1
$num
ÕÕ2 3
)
ÕÕ3 4
{
ŒŒ 
int
œœ 
matched
œœ 
=
œœ 
$num
œœ 
;
œœ  
foreach
—— 
(
—— 
DataRow
——  
row
——! $
in
——% '
data
——( ,
.
——, -
Rows
——- 1
)
——1 2
{
““ 
T
”” 
item
”” 
=
”” 
(
”” 
T
”” 
)
””  
	Activator
””  )
.
””) *
CreateInstance
””* 8
(
””8 9
objType
””9 @
)
””@ A
;
””A B
PropertyInfo
’’  
[
’’  !
]
’’! "

properties
’’# -
=
’’. /
objType
’’0 7
.
’’7 8
GetProperties
’’8 E
(
’’E F
)
’’F G
;
’’G H
foreach
◊◊ 
(
◊◊ 
PropertyInfo
◊◊ )
property
◊◊* 2
in
◊◊3 5

properties
◊◊6 @
)
◊◊@ A
{
ÿÿ 
if
ŸŸ 
(
ŸŸ 
data
ŸŸ  
.
ŸŸ  !
Columns
ŸŸ! (
.
ŸŸ( )
Contains
ŸŸ) 1
(
ŸŸ1 2
property
ŸŸ2 :
.
ŸŸ: ;
Name
ŸŸ; ?
)
ŸŸ? @
)
ŸŸ@ A
{
⁄⁄ 
Type
€€  
pType
€€! &
=
€€' (
property
€€) 1
.
€€1 2
PropertyType
€€2 >
;
€€> ?
var
‹‹ 
defaultValue
‹‹  ,
=
‹‹- .
pType
‹‹/ 4
.
‹‹4 5
GetDefaultValue
‹‹5 D
(
‹‹D E
)
‹‹E F
;
‹‹F G
var
›› 
value
››  %
=
››& '
row
››( +
[
››+ ,
property
››, 4
.
››4 5
Name
››5 9
]
››9 :
;
››: ;
value
ﬁﬁ !
=
ﬁﬁ" #
DAL
ﬁﬁ$ '
.
ﬁﬁ' ( 
ConvertFromDBValue
ﬁﬁ( :
(
ﬁﬁ: ;
value
ﬁﬁ; @
,
ﬁﬁ@ A
defaultValue
ﬁﬁB N
)
ﬁﬁN O
;
ﬁﬁO P
property
ﬂﬂ $
.
ﬂﬂ$ %
SetValue
ﬂﬂ% -
(
ﬂﬂ- .
item
ﬂﬂ. 2
,
ﬂﬂ2 3
value
ﬂﬂ4 9
)
ﬂﬂ9 :
;
ﬂﬂ: ;
matched
‡‡ #
++
‡‡# %
;
‡‡% &
}
·· 
}
‚‚ 
if
„„ 
(
„„ 
matched
„„ 
!=
„„  "
data
„„# '
.
„„' (
Columns
„„( /
.
„„/ 0
Count
„„0 5
&&
„„6 8
this
„„9 =
.
„„= >
FailOnMismatch
„„> L
)
„„L M
{
‰‰ 
throw
ÂÂ 
new
ÂÂ !
	Exception
ÂÂ" +
(
ÂÂ+ ,
$str
ÂÂ, \
)
ÂÂ\ ]
;
ÂÂ] ^
}
ÊÊ 

collection
ÁÁ 
.
ÁÁ 
Add
ÁÁ "
(
ÁÁ" #
item
ÁÁ# '
)
ÁÁ' (
;
ÁÁ( )
}
ËË 
}
ÈÈ 
return
ÍÍ 

collection
ÍÍ 
;
ÍÍ 
}
ÎÎ 	
	protected
ÌÌ 
virtual
ÌÌ 
	DataTable
ÌÌ #
MakeDataTable
ÌÌ$ 1
<
ÌÌ1 2
T
ÌÌ2 3
>
ÌÌ3 4
(
ÌÌ4 5
IEnumerable
ÌÌ5 @
<
ÌÌ@ A
T
ÌÌA B
>
ÌÌB C
data
ÌÌD H
,
ÌÌH I
string
ÌÌJ P
	tableName
ÌÌQ Z
,
ÌÌZ [
BulkInsertType
ÌÌ\ j
bulkType
ÌÌk s
,
ÌÌs t
ParamPrecedenceÌÌu Ñ

precedenceÌÌÖ è
=ÌÌê ë
ParamPrecedenceÌÌí °
.ÌÌ° ¢
NoneÌÌ¢ ¶
,ÌÌ¶ ß
stringÌÌ® Æ"
paramArrayPropNameÌÌØ ¡
=ÌÌ¬ √
$strÌÌƒ ’
)ÌÌ’ ÷
{
ÓÓ 	
	DataTable
ÔÔ 
	dataTable
ÔÔ 
=
ÔÔ  !
null
ÔÔ" &
;
ÔÔ& '
Debug
ÒÒ 
.
ÒÒ 
	WriteLine
ÒÒ 
(
ÒÒ 
string
ÒÒ "
.
ÒÒ" #
Format
ÒÒ# )
(
ÒÒ) *
$str
ÒÒ* U
,
ÒÒU V
data
ÒÒW [
.
ÒÒ[ \
Count
ÒÒ\ a
(
ÒÒa b
)
ÒÒb c
)
ÒÒc d
)
ÒÒd e
;
ÒÒe f
using
ÛÛ 
(
ÛÛ 
	dataTable
ÛÛ 
=
ÛÛ 
new
ÛÛ "
	DataTable
ÛÛ# ,
(
ÛÛ, -
)
ÛÛ- .
{
ÛÛ/ 0
	TableName
ÛÛ1 :
=
ÛÛ; <
	tableName
ÛÛ= F
}
ÛÛG H
)
ÛÛH I
{
ÙÙ 
Type
ıı 
type
ıı 
=
ıı 
typeof
ıı "
(
ıı" #
T
ıı# $
)
ıı$ %
;
ıı% &
PropertyInfo
˜˜ 
[
˜˜ 
]
˜˜ 

properties
˜˜ )
=
˜˜* +
DAL
˜˜, /
.
˜˜/ 0!
GetEntityProperties
˜˜0 C
(
˜˜C D
type
˜˜D H
,
˜˜H I
bulkType
˜˜J R
)
˜˜R S
;
˜˜S T
Debug
˘˘ 
.
˘˘ 
	WriteLine
˘˘ 
(
˘˘  
string
˘˘  &
.
˘˘& '
Format
˘˘' -
(
˘˘- .
$str
˘˘. ]
,
˘˘] ^

properties
˘˘_ i
.
˘˘i j
Length
˘˘j p
)
˘˘p q
)
˘˘q r
;
˘˘r s
foreach
˚˚ 
(
˚˚ 
PropertyInfo
˚˚ %
property
˚˚& .
in
˚˚/ 1

properties
˚˚2 <
)
˚˚< =
{
¸¸ 
	dataTable
˝˝ 
.
˝˝ 
Columns
˝˝ %
.
˝˝% &
Add
˝˝& )
(
˝˝) *
new
˝˝* -

DataColumn
˝˝. 8
(
˝˝8 9
property
˝˝9 A
.
˝˝A B
Name
˝˝B F
,
˝˝F G
property
˝˝H P
.
˝˝P Q
PropertyType
˝˝Q ]
)
˝˝] ^
)
˝˝^ _
;
˝˝_ `
}
˛˛ 
Debug
ÄÄ 
.
ÄÄ 
	WriteLine
ÄÄ 
(
ÄÄ  
string
ÄÄ  &
.
ÄÄ& '
Format
ÄÄ' -
(
ÄÄ- .
$str
ÄÄ. ^
,
ÄÄ^ _
	dataTable
ÄÄ` i
.
ÄÄi j
Columns
ÄÄj q
.
ÄÄq r
Count
ÄÄr w
)
ÄÄw x
)
ÄÄx y
;
ÄÄy z
foreach
ÇÇ 
(
ÇÇ 
T
ÇÇ 
entity
ÇÇ !
in
ÇÇ" $
data
ÇÇ% )
)
ÇÇ) *
{
ÉÉ 
DataRow
ÑÑ 
row
ÑÑ 
=
ÑÑ  !
	dataTable
ÑÑ" +
.
ÑÑ+ ,
NewRow
ÑÑ, 2
(
ÑÑ2 3
)
ÑÑ3 4
;
ÑÑ4 5
foreach
ÖÖ 
(
ÖÖ 
PropertyInfo
ÖÖ )
property
ÖÖ* 2
in
ÖÖ3 5

properties
ÖÖ6 @
)
ÖÖ@ A
{
ÜÜ 
row
áá 
[
áá 
property
áá $
.
áá$ %
Name
áá% )
]
áá) *
=
áá+ ,
property
áá- 5
.
áá5 6
GetValue
áá6 >
(
áá> ?
entity
áá? E
)
ááE F
;
ááF G
}
àà 
	dataTable
ââ 
.
ââ 
Rows
ââ "
.
ââ" #
Add
ââ# &
(
ââ& '
row
ââ' *
)
ââ* +
;
ââ+ ,
}
ää 
}
ãã 
Debug
çç 
.
çç 
	WriteLine
çç 
(
çç 
string
çç "
.
çç" #
Format
çç# )
(
çç) *
$str
çç* M
,
ççM N
	dataTable
ççO X
.
ççX Y
Rows
ççY ]
.
çç] ^
Count
çç^ c
)
ççc d
)
ççd e
;
ççe f
return
èè 
	dataTable
èè 
;
èè 
}
êê 	
}
îî 
}ïï ’Q
YD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\DALStaticMethods.cs
	namespace 	
Shared
 
. 
Data 
{ 
public 
partial 
class 
DAL 
{ 
public 
static	 
PropertyInfo 
[ 
] 
GetEntityProperties 2
(2 3
Type3 7
type8 <
,< =
BulkInsertType> L
bulkTypeM U
)U V
{ 
PropertyInfo 
[ 
] 

properties 
= 
type #
.# $
GetProperties$ 1
(1 2
)2 3
;3 4
switch 	
(
 
bulkType 
) 
{ 
case 
BulkInsertType	 
. 
DBInsertAttribute )
:* +

properties 
= 
type 
. 
GetProperties $
($ %
)% &
.& '
Where' ,
(, -
prop- 1
=>2 4
	Attribute5 >
.> ?
	IsDefined? H
(H I
propI M
,M N
typeofO U
(U V 
CanDbInsertAttributeV j
)j k
)k l
)l m
.m n
ToArrayn u
(u v
)v w
;w x
break 

;
 
case 
BulkInsertType	 
. 
HaveSetMethod %
:& '

properties 
= 
type 
. 
GetProperties $
($ %
)% &
.& '
Where' ,
(, -
prop- 1
=>2 4
prop5 9
.9 :
GetSetMethod: F
(F G
)G H
!=I K
nullL P
)P Q
.Q R
ToArrayR Y
(Y Z
)Z [
;[ \
break 

;
 
} 
return 	

properties
 
; 
} 
public   
static  	 
PropertyInfo   
[   
]   
GetEntityProperties   2
<  2 3
T  3 4
>  4 5
(  5 6
T  6 7
entity  8 >
,  > ?
BulkInsertType  @ N
bulkType  O W
)  W X
{!! 
PropertyInfo"" 
["" 
]"" 

properties"" 
="" 
entity"" %
.""% &
GetType""& -
(""- .
)"". /
.""/ 0
GetProperties""0 =
(""= >
)""> ?
;""? @

properties## 
=## 
DAL## 
.## 
GetEntityProperties## '
(##' (

properties##( 2
,##2 3
bulkType##4 <
)##< =
;##= >
return$$ 	

properties$$
 
;$$ 
}%% 
public&& 
static&&	 
PropertyInfo&& 
[&& 
]&& 
GetEntityProperties&& 2
(&&2 3
PropertyInfo&&3 ?
[&&? @
]&&@ A

properties&&B L
,&&L M
BulkInsertType&&N \
bulkType&&] e
)&&e f
{'' 
switch(( 	
(((
 
bulkType(( 
)(( 
{)) 
case** 
BulkInsertType**	 
.** 
ALL** 
:** 
break++ 

;++
 
case-- 
BulkInsertType--	 
.-- 
DBInsertAttribute-- )
:--) *

properties.. 
=.. 

properties.. 
... 
Where.. "
(.." #
prop..# '
=>..( *
	Attribute..+ 4
...4 5
	IsDefined..5 >
(..> ?
prop..? C
,..C D
typeof..E K
(..K L 
CanDbInsertAttribute..L `
)..` a
)..a b
)..b c
...c d
ToArray..d k
(..k l
)..l m
;..m n
break// 

;//
 
case11 
BulkInsertType11	 
.11 
HaveSetMethod11 %
:11% &

properties22 
=22 

properties22 
.22 
Where22 "
(22" #
prop22# '
=>22( *
prop22+ /
.22/ 0
	SetMethod220 9
!=22: <
null22= A
)22A B
.22B C
ToArray22C J
(22J K
)22K L
;22L M
break33 

;33
 
}44 
;44 
return55 	

properties55
 
;55 
}66 
public88 
static88	 
MySqlParameter88 
[88 
]88  
MakeSqlParameters88! 2
<882 3
T883 4
>884 5
(885 6
T886 7
entity888 >
,88> ?
BulkInsertType88@ N
bulkType88O W
,88W X
ParamPrecedence88Y h

precedence88i s
=88t u
ParamPrecedence	88v Ö
.
88Ö Ü
None
88Ü ä
,
88ä ã
string
88å í
propertyName
88ì ü
=
88† °
$str
88¢ ≥
)
88≥ ¥
{99 
if:: 
(:: 
entity:: 
==:: 
null:: 
):: 
{;; 
throw<< 	
new<<
 !
ArgumentNullException<< #
(<<# $
$str<<$ ,
)<<, -
;<<- .
}== 
if>> 
(>> 
string>> 
.>> 
IsNullOrEmpty>> 
(>> 
propertyName>> (
)>>( )
)>>) *
{?? 
throw@@ 	
new@@
 %
InvalidOperationException@@ '
(@@' (
$str@@( a
)@@a b
;@@b c
}AA 
MySqlParameterCC 
[CC 
]CC 

parametersCC 
=CC  
nullCC! %
;CC% &
PropertyInfoDD 
[DD 
]DD 

propertiesDD 
=DD 
entityDD %
.DD% &
GetTypeDD& -
(DD- .
)DD. /
.DD/ 0
GetPropertiesDD0 =
(DD= >
)DD> ?
;DD? @
PropertyInfoFF 
	sqlParamsFF 
=FF 
	sqlParamsFF %
=FF& '

propertiesFF( 2
.FF2 3
FirstOrDefaultFF3 A
(FFA B
xFFB C
=>FFD F
xFFG H
.FFH I
PropertyTypeFFI U
.FFU V
NameFFV Z
==FF[ ]
$strFF^ p
&&FFq s
xFFt u
.FFu v
NameFFv z
==FF{ }
propertyName	FF~ ä
)
FFä ã
;
FFã å
ifGG 
(GG 
	sqlParamsGG 
!=GG 
nullGG 
&&GG 

precedenceGG &
!=GG' )
ParamPrecedenceGG* 9
.GG9 :
UseBulkTypeGG: E
)GGE F
{HH 

parametersII 
=II 
(II 
MySqlParameterII  
[II  !
]II! "
)II" #
	sqlParamsII# ,
.II, -
GetValueII- 5
(II5 6
entityII6 <
)II< =
;II= >
}JJ 
elseKK 
{LL 
ListMM 
<MM 	
MySqlParameterMM	 
>MM 
listMM 
=MM 
newMM  #
ListMM$ (
<MM( )
MySqlParameterMM) 7
>MM7 8
(MM8 9
)MM9 :
;MM: ;

propertiesNN 
=NN 
DALNN 
.NN 
GetEntityPropertiesNN (
(NN( )

propertiesNN) 3
,NN3 4
bulkTypeNN5 =
)NN= >
;NN> ?
foreachOO 
(OO 
PropertyInfoOO 
propertyOO !
inOO" $

propertiesOO% /
)OO/ 0
{PP 
listQQ 	
.QQ	 

AddQQ
 
(QQ 
newQQ 
MySqlParameterQQ  
(QQ  !
stringQQ! '
.QQ' (
FormatQQ( .
(QQ. /
$strQQ/ 5
,QQ5 6
propertyQQ7 ?
.QQ? @
NameQQ@ D
)QQD E
,QQE F
propertyQQG O
.QQO P
GetValueQQP X
(QQX Y
entityQQY _
)QQ_ `
)QQ` a
)QQa b
;QQb c
}RR 

parametersSS 
=SS 
listSS 
.SS 
ToArraySS 
(SS 
)SS 
;SS  
}TT 
GlobalVV 	
.VV	 

	WriteLineVV
 
(VV 
$strVV 3
)VV3 4
;VV4 5
ifWW 
(WW 

propertiesWW 
.WW 
LengthWW 
==WW 
$numWW 
)WW 
{XX 
GlobalYY 

.YY
 
	WriteLineYY 
(YY 
$strYY +
)YY+ ,
;YY, -
}ZZ 
else[[ 
{\\ 
int]] 
length]] 
=]] 

parameters]] 
.]] 
Max]] 
(]]  
x]]  !
=>]]! #
x]]# $
.]]$ %
ParameterName]]% 2
.]]2 3
Length]]3 9
)]]9 :
+]]; <
$num]]= >
;]]> ?
string^^ 

format^^ 
=^^ 
string^^ 
.^^ 
Concat^^ !
(^^! "
$str^^" ,
,^^, -
length^^. 4
.^^4 5
ToString^^5 =
(^^= >
)^^> ?
,^^? @
$str^^A G
)^^G H
;^^H I
Global`` 

.``
 
	WriteLine`` 
(`` 
$str`` ,
)``, -
;``- .
foreachaa 
(aa 
MySqlParameteraa 
itemaa 
inaa  "

parametersaa# -
)aa- .
{bb 
stringcc 
textcc 
=cc 
stringcc 
.cc 
Formatcc  
(cc  !
formatcc! '
,cc' (
itemcc) -
.cc- .
ParameterNamecc. ;
,cc; <
itemcc= A
.ccA B
ValueccB G
)ccG H
;ccH I
Globaldd 
.dd 
	WriteLinedd 
(dd 
textdd 
)dd 
;dd 
}ee 
}ff 
returngg 	

parametersgg
 
;gg 
}hh 
}ii 
}jj û
TD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\Enumerators.cs
	namespace 	
Shared
 
. 
Data 
{ 
public 
enum 
BulkInsertType 
{ 
DBInsertAttribute 
, 
HaveSetMethod 
, 
ALL 
} 
public		 
enum		 
ParamPrecedence		 
{

 
None 
, 
UseBulkType 
} 
} ÖY
VD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\ExtensionUtil.cs
	namespace 	
Shared
 
. 
Data 
{		 
public

 

static

 
class

 
ExtensionUtil

 %
{ 
public 
static 
async 
Task  
<  !
List! %
<% &
T& '
>' (
>( )
ToListAsync* 5
<5 6
T6 7
>7 8
(8 9
this9 =
Task> B
<B C
	DataTableC L
>L M
tableN S
)S T
whereU Z
T[ \
:] ^
new_ b
(b c
)c d
{ 	
IList 
< 
PropertyInfo 
> 

properties  *
=+ ,
typeof- 3
(3 4
T4 5
)5 6
.6 7
GetProperties7 D
(D E
)E F
;F G
List 
< 
T 
> 
result 
= 
new  
List! %
<% &
T& '
>' (
(( )
)) *
;* +
	DataTable 
dt 
= 
await  
table! &
;& '
foreach 
( 
var 
row 
in 
dt  "
." #
Rows# '
)' (
{ 
var 
item 
= 
await  
CreateItemFromRow! 2
<2 3
T3 4
>4 5
(5 6
(6 7
DataRow7 >
)> ?
row? B
,B C

propertiesD N
)N O
;O P
result 
. 
Add 
( 
item 
)  
;  !
} 
return 
result 
; 
} 	
public 
static 
async 
Task  
<  !
List! %
<% &
T& '
>' (
>( )
ToListAsync* 5
<5 6
T6 7
>7 8
(8 9
this9 =
Task> B
<B C
DataSetC J
>J K
datasetL S
)S T
whereU Z
T[ \
:] ^
new_ b
(b c
)c d
{ 	
try 
{ 
IList 
< 
PropertyInfo "
>" #

properties$ .
=/ 0
typeof1 7
(7 8
T8 9
)9 :
.: ;
GetProperties; H
(H I
)I J
;J K
List 
< 
T 
> 
result 
=  
new! $
List% )
<) *
T* +
>+ ,
(, -
)- .
;. /
DataSet!! 
ds!! 
=!! 
await!! "
dataset!!# *
;!!* +
foreach"" 
("" 
var"" 
row""  
in""! #
ds""$ &
.""& '
Tables""' -
[""- .
$num"". /
]""/ 0
.""0 1
Rows""1 5
)""5 6
{## 
var$$ 
item$$ 
=$$ 
await$$ $
CreateItemFromRow$$% 6
<$$6 7
T$$7 8
>$$8 9
($$9 :
($$: ;
DataRow$$; B
)$$B C
row$$C F
,$$F G

properties$$H R
)$$R S
;$$S T
result%% 
.%% 
Add%% 
(%% 
item%% #
)%%# $
;%%$ %
}&& 
return(( 
result(( 
;(( 
})) 
catch** 
(** 
	Exception** 
e** 
)** 
{++ 
throw-- 
e-- 
;-- 
}.. 
}00 	
public22 
static22 
async22 
Task22   
ParallelForEachAsync22! 5
<225 6
T226 7
>227 8
(228 9
this229 =
IEnumerable22> I
<22I J
T22J K
>22K L
source22M S
,22S T
Func22U Y
<22Y Z
T22Z [
,22[ \
Task22] a
>22a b
asyncAction22c n
,22n o
int22p s#
maxDegreeOfParallelism	22t ä
=
22ã å
$num
22ç é
)
22é è
{33 	
var44 
semaphoreSlim44 
=44 
new44  #
System44$ *
.44* +
	Threading44+ 4
.444 5
SemaphoreSlim445 B
(44B C"
maxDegreeOfParallelism44C Y
)44Y Z
;44Z [
var55 
tcs55 
=55 
new55  
TaskCompletionSource55 .
<55. /
object55/ 5
>555 6
(556 7
)557 8
;558 9
var66 

exceptions66 
=66 
new66  
System66! '
.66' (
Collections66( 3
.663 4

Concurrent664 >
.66> ?
ConcurrentBag66? L
<66L M
	Exception66M V
>66V W
(66W X
)66X Y
;66Y Z
bool77 
addingCompleted77  
=77! "
false77# (
;77( )
foreach99 
(99 
T99 
item99 
in99 
source99 %
)99% &
{:: 
await;; 
semaphoreSlim;; #
.;;# $
	WaitAsync;;$ -
(;;- .
);;. /
;;;/ 0
await<< 
asyncAction<< !
(<<! "
item<<" &
)<<& '
.<<' (
ContinueWith<<( 4
(<<4 5
t<<5 6
=><<7 9
{== 
semaphoreSlim>> !
.>>! "
Release>>" )
(>>) *
)>>* +
;>>+ ,
if@@ 
(@@ 
t@@ 
.@@ 
	Exception@@ #
!=@@$ &
null@@' +
)@@+ ,
{AA 

exceptionsBB "
.BB" #
AddBB# &
(BB& '
tBB' (
.BB( )
	ExceptionBB) 2
)BB2 3
;BB3 4
}CC 
ifEE 
(EE 
SystemEE 
.EE 
	ThreadingEE (
.EE( )
VolatileEE) 1
.EE1 2
ReadEE2 6
(EE6 7
refEE7 :
addingCompletedEE; J
)EEJ K
&&EEL N
semaphoreSlimEEO \
.EE\ ]
CurrentCountEE] i
==EEj l#
maxDegreeOfParallelism	EEm É
)
EEÉ Ñ
{FF 
tcsGG 
.GG 
TrySetResultGG (
(GG( )
nullGG) -
)GG- .
;GG. /
}HH 
}II 
)II 
;II 
}JJ 
SystemLL 
.LL 
	ThreadingLL 
.LL 
VolatileLL %
.LL% &
WriteLL& +
(LL+ ,
refLL, /
addingCompletedLL0 ?
,LL? @
trueLLA E
)LLE F
;LLF G
awaitMM 
tcsMM 
.MM 
TaskMM 
;MM 
ifNN 
(NN 

exceptionsNN 
.NN 
CountNN  
>NN! "
$numNN# $
)NN$ %
{OO 
throwPP 
newPP 
AggregateExceptionPP ,
(PP, -

exceptionsPP- 7
)PP7 8
;PP8 9
}QQ 
}RR 	
privateUU 
staticUU 
asyncUU 
TaskUU !
<UU! "
TUU" #
>UU# $
CreateItemFromRowUU% 6
<UU6 7
TUU7 8
>UU8 9
(UU9 :
DataRowUU: A
rowUUB E
,UUE F
IListUUG L
<UUL M
PropertyInfoUUM Y
>UUY Z

propertiesUU[ e
)UUe f
whereUUg l
TUUm n
:UUo p
newUUq t
(UUt u
)UUu v
{VV 	
TWW 
itemWW 
=WW 
newWW 
TWW 
(WW 
)WW 
;WW 
foreachXX 
(XX 
varXX 
propertyXX !
inXX" $

propertiesXX% /
)XX/ 0
{YY 
ifZZ 
(ZZ 
propertyZZ 
.ZZ 
PropertyTypeZZ )
==ZZ* ,
typeofZZ- 3
(ZZ3 4
SystemZZ4 :
.ZZ: ;
	DayOfWeekZZ; D
)ZZD E
)ZZE F
{[[ 
	DayOfWeek\\ 
day\\ !
=\\" #
(\\$ %
	DayOfWeek\\% .
)\\. /
Enum\\/ 3
.\\3 4
Parse\\4 9
(\\9 :
typeof\\: @
(\\@ A
	DayOfWeek\\A J
)\\J K
,\\K L
row\\M P
[\\P Q
property\\Q Y
.\\Y Z
Name\\Z ^
]\\^ _
.\\_ `
ToString\\` h
(\\h i
)\\i j
)\\j k
;\\k l
property]] 
.]] 
SetValue]] %
(]]% &
item]]& *
,]]* +
day]], /
,]]/ 0
null]]1 5
)]]5 6
;]]6 7
}^^ 
else__ 
{`` 
ifaa 
(aa 
rowaa 
[aa 
propertyaa $
.aa$ %
Nameaa% )
]aa) *
==aa+ -
DBNullaa. 4
.aa4 5
Valueaa5 :
)aa: ;
propertybb  
.bb  !
SetValuebb! )
(bb) *
itembb* .
,bb. /
nullbb0 4
,bb4 5
nullbb6 :
)bb: ;
;bb; <
elsecc 
{dd 
ifee 
(ee 
Nullableee $
.ee$ %
GetUnderlyingTypeee% 6
(ee6 7
propertyee7 ?
.ee? @
PropertyTypeee@ L
)eeL M
!=eeN P
nulleeQ U
)eeU V
{ff 
objecthh "
convertedValuehh# 1
=hh2 3
nullhh4 8
;hh8 9
tryii 
{jj 
convertedValuekk  .
=kk/ 0
Systemkk1 7
.kk7 8
Convertkk8 ?
.kk? @

ChangeTypekk@ J
(kkJ K
rowkkK N
[kkN O
propertykkO W
.kkW X
NamekkX \
]kk\ ]
,kk] ^
Nullablekk_ g
.kkg h
GetUnderlyingTypekkh y
(kky z
property	kkz Ç
.
kkÇ É
PropertyType
kkÉ è
)
kkè ê
)
kkê ë
;
kkë í
}ll 
catchmm !
(mm" #
	Exceptionmm# ,
exmm- /
)mm/ 0
{nn 
}oo 
propertypp $
.pp$ %
SetValuepp% -
(pp- .
itempp. 2
,pp2 3
convertedValuepp4 B
,ppB C
nullppD H
)ppH I
;ppI J
}qq 
elserr 
propertyss $
.ss$ %
SetValuess% -
(ss- .
itemss. 2
,ss2 3
rowss4 7
[ss7 8
propertyss8 @
.ss@ A
NamessA E
]ssE F
,ssF G
nullssH L
)ssL M
;ssM N
}tt 
}uu 
}vv 
returnww 
itemww 
;ww 
}xx 	
}yy 
}zz ‘	
OD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\Global.cs
	namespace 	
Shared
 
. 
Data 
{ 
public 
static 
class 
Global 
{ 
public 
static	 
bool 
IsConsoleApp !
{" #
get$ '
;' (
set) ,
;, -
}. /
static		 
Global			 
(		 
)		 
{

 
Global 	
.	 

IsConsoleApp
 
= 
false 
; 
} 
public 
static	 
void 
	WriteLine 
( 
string %
text& *
)* +
{ 
if 
( 
Global 
. 
IsConsoleApp 
) 
{ 
Console %
.% &
	WriteLine& /
(/ 0
text0 4
)4 5
;5 6
}7 8
Debug 
. 	
	WriteLine	 
( 
text 
) 
; 
} 
} 
} πZ
UD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\ListProvider.cs
	namespace 	
Shared
 
. 
Data 
{		 
public

 

class

 
ListProvider

 
<

 
T

 
>

  
where

! &
T

' (
:

) *
new

+ .
(

. /
)

/ 0
{ 
public 
static 
List 
< 
T 
> 
FindAll %
(% &
IDataReader& 1
rdr2 5
)5 6
{ 	
List 
< 
T 
> 

returnList 
=  
new! $
List% )
<) *
T* +
>+ ,
(, -
)- .
;. /
Type 
tType 
= 
new 
T 
( 
)  
.  !
GetType! (
(( )
)) *
;* +
PropertyInfo 
pInfo 
; 
T 
x 
; 
while 
( 
rdr 
. 
Read 
( 
) 
) 
{ 
x 
= 
new 
T 
( 
) 
; 
for   
(   
int   
i   
=   
$num   
;   
i    !
<  " #
rdr  $ '
.  ' (

FieldCount  ( 2
;  2 3
i  4 5
++  5 7
)  7 8
{!! 
pInfo"" 
="" 
tType"" !
.""! "
GetProperty""" -
(""- .
rdr"". 1
.""1 2
GetName""2 9
(""9 :
i"": ;
)""; <
,""< =
BindingFlags""> J
.""J K
SetProperty""K V
|""W X
BindingFlags""Y e
.""e f

IgnoreCase""f p
|""q r
BindingFlags""s 
.	"" Ä
Public
""Ä Ü
|
""á à
BindingFlags
""â ï
.
""ï ñ
Instance
""ñ û
)
""û ü
;
""ü †
if$$ 
($$ 
rdr$$ 
[$$ 
i$$ 
]$$ 
!=$$ !
DBNull$$" (
.$$( )
Value$$) .
)$$. /
pInfo%% 
.%% 
SetValue%% &
(%%& '
x%%' (
,%%( )
rdr%%* -
[%%- .
i%%. /
]%%/ 0
,%%0 1
null%%2 6
)%%6 7
;%%7 8
}(( 

returnList++ 
.++ 
Add++ 
(++ 
x++  
)++  !
;++! "
},, 
rdr.. 
... 
Dispose.. 
(.. 
).. 
;.. 
return00 

returnList00 
;00 
}11 	
public33 
static33 
List33 
<33 
T33 
>33 
GetAll33 $
(33$ %
IDataReader33% 0
rdr331 4
)334 5
{44 	
List55 
<55 
T55 
>55 

returnList55 
=55  
new55! $
List55% )
<55) *
T55* +
>55+ ,
(55, -
)55- .
;55. /
while66 
(66 
rdr66 
.66 
Read66 
(66 
)66 
)66 
{77 

returnList88 
.88 
Add88 
(88 

fillObject88 )
(88) *
rdr88* -
)88- .
)88. /
;88/ 0
}99 
rdr:: 
.:: 
Dispose:: 
(:: 
):: 
;:: 
return;; 

returnList;; 
;;; 
}<< 	
public>> 
static>> 
T>> 
Get>> 
(>> 
IDataReader>> '
rdr>>( +
)>>+ ,
{?? 	
T@@ 
objTemp@@ 
=@@ 
new@@ 
T@@ 
(@@ 
)@@ 
;@@  
whileAA 
(AA 
rdrAA 
.AA 
ReadAA 
(AA 
)AA 
)AA 
{BB 
objTempCC 
=CC 

fillObjectCC $
(CC$ %
rdrCC% (
)CC( )
;CC) *
}DD 
rdrEE 
.EE 
DisposeEE 
(EE 
)EE 
;EE 
returnFF 
objTempFF 
;FF 
}GG 	
privateII 
staticII 
TII 

fillObjectII #
(II# $
IDataReaderII$ /
rdrII0 3
)II3 4
{JJ 	
TypeKK 
tTypeKK 
=KK 
newKK 
TKK 
(KK 
)KK  
.KK  !
GetTypeKK! (
(KK( )
)KK) *
;KK* +
PropertyInfoLL 
pInfoLL 
;LL 
TMM 
xMM 
=MM 
newMM 
TMM 
(MM 
)MM 
;MM 
forNN 
(NN 
intNN 
iNN 
=NN 
$numNN 
;NN 
iNN 
<NN 
rdrNN  #
.NN# $

FieldCountNN$ .
;NN. /
iNN0 1
++NN1 3
)NN3 4
{OO 
pInfoPP 
=PP 
tTypePP 
.PP 
GetPropertyPP )
(PP) *
rdrPP* -
.PP- .
GetNamePP. 5
(PP5 6
iPP6 7
)PP7 8
)PP8 9
;PP9 :
ifQQ 
(QQ 
pInfoQQ 
!=QQ 
nullQQ !
)QQ! "
{RR 
ifSS 
(SS 
rdrSS 
[SS 
iSS 
]SS 
!=SS !
DBNullSS" (
.SS( )
ValueSS) .
)SS. /
pInfoTT 
.TT 
SetValueTT &
(TT& '
xTT' (
,TT( )
rdrTT* -
[TT- .
iTT. /
]TT/ 0
,TT0 1
nullTT2 6
)TT6 7
;TT7 8
}UU 
}VV 
returnWW 
xWW 
;WW 
}XX 	
publicZZ 
staticZZ 
MySqlParameterZZ $
[ZZ$ %
]ZZ% &
GetParameterZZ' 3
(ZZ3 4
objectZZ4 :
objParametersZZ; H
,ZZH I
boolZZJ N
isIdReqZZO V
)ZZV W
{[[ 	
Type\\ 
myType\\ 
=\\ 
objParameters\\ '
.\\' (
GetType\\( /
(\\/ 0
)\\0 1
;\\1 2
IList]] 
<]] 
PropertyInfo]] 
>]] 
props]]  %
=]]& '
new]]( +
List]], 0
<]]0 1
PropertyInfo]]1 =
>]]= >
(]]> ?
myType]]? E
.]]E F
GetProperties]]F S
(]]S T
)]]T U
)]]U V
;]]V W
MySqlParameter^^ 
[^^ 
]^^ 
arrSqlParameter^^ ,
=^^- .
new^^/ 2
MySqlParameter^^3 A
[^^A B
(^^B C
props^^C H
.^^H I
Count^^I N
)^^N O
]^^O P
;^^P Q
int__ 
index__ 
=__ 
$num__ 
;__ 
foreach`` 
(`` 
PropertyInfo`` !
prop``" &
in``' )
props``* /
)``/ 0
{aa 
objectcc 
	propValuecc  
=cc! "
propcc# '
.cc' (
GetValuecc( 0
(cc0 1
objParameterscc1 >
,cc> ?
nullcc@ D
)ccD E
;ccE F
stringdd 
namedd 
=dd 
propdd "
.dd" #
Namedd# '
;dd' (
ifee 
(ee 
nameee 
.ee 
Containsee !
(ee! "
$stree" *
)ee* +
)ee+ ,
{ff 
ifgg 
(gg 
	propValuegg !
!=gg" $
nullgg% )
)gg) *
{hh 
arrSqlParameterii '
[ii' (
indexii( -
]ii- .
=ii/ 0
newii1 4
MySqlParameterii5 C
(iiC D
$striiD G
+iiH I
nameiiJ N
,iiN O
	SqlDbTypeiiP Y
.iiY Z
XmliiZ ]
)ii] ^
;ii^ _
arrSqlParameterjj '
[jj' (
indexjj( -
]jj- .
.jj. /
	Directionjj/ 8
=jj9 :
ParameterDirectionjj; M
.jjM N
InputjjN S
;jjS T
arrSqlParameterkk '
[kk' (
indexkk( -
]kk- .
.kk. /
Valuekk/ 4
=kk5 6
(kk7 8
(kk8 9
XmlDocumentkk9 D
)kkD E
	propValuekkE N
)kkN O
.kkO P
InnerXmlkkP X
;kkX Y
}ll 
elsemm 
{nn 
arrSqlParameteroo '
[oo' (
indexoo( -
]oo- .
=oo/ 0
newoo1 4
MySqlParameteroo5 C
(ooC D
$strooD G
+ooH I
nameooJ N
,ooN O
	SqlDbTypeooP Y
.ooY Z
XmlooZ ]
)oo] ^
;oo^ _
arrSqlParameterpp '
[pp' (
indexpp( -
]pp- .
.pp. /
	Directionpp/ 8
=pp9 :
ParameterDirectionpp; M
.ppM N
InputppN S
;ppS T
arrSqlParameterqq '
[qq' (
indexqq( -
]qq- .
.qq. /
Valueqq/ 4
=qq5 6
nullqq7 ;
;qq; <
}rr 
}tt 
elsevv 
ifvv 
(vv 
namevv 
!=vv  
$strvv! %
&&vv& (
(vv) *
!vv* +
namevv+ /
.vv/ 0
Containsvv0 8
(vv8 9
$strvv9 A
)vvA B
)vvB C
)vvC D
{ww 
ifxx 
(xx 
propxx 
.xx 
GetTypexx $
(xx$ %
)xx% &
==xx' )
typeofxx* 0
(xx0 1
DateTimexx1 9
)xx9 :
)xx: ;
{yy 
DateTimezz  
objDatezz! (
=zz) *
newzz+ .
DateTimezz/ 7
(zz7 8
)zz8 9
;zz9 :
arrSqlParameter{{ '
[{{' (
index{{( -
]{{- .
={{/ 0
({{1 2
({{2 3
DateTime{{3 ;
){{; <
	propValue{{< E
!={{F H
objDate{{I P
){{P Q
?{{R S
new{{T W
MySqlParameter{{X f
({{f g
$str{{g j
+{{k l
name{{m q
,{{q r
	propValue{{s |
){{| }
:{{~ 
new
{{Ä É
MySqlParameter
{{Ñ í
(
{{í ì
$str
{{ì ñ
+
{{ó ò
name
{{ô ù
,
{{ù û
null
{{ü £
)
{{£ §
;
{{§ •
}|| 
else}} 
{~~ 
arrSqlParameter '
[' (
index( -
]- .
=/ 0
new1 4
MySqlParameter5 C
(C D
$strD G
+H I
nameJ N
,N O
	propValueP Y
)Y Z
;Z [
}
ÄÄ 
}
ÅÅ 
index
ÇÇ 
++
ÇÇ 
;
ÇÇ 
}
ÉÉ 
return
ÖÖ 
arrSqlParameter
ÖÖ "
;
ÖÖ" #
}
ÜÜ 	
}
áá 
}àà ã¸
XD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\MySqlDataHelper.cs
	namespace 	
Shared
 
. 
Data 
{		 
public

 

class

 
MySqlDataHelper

  
{ 
private 
int 
DataCmdTimeout "
=# $
$num% (
;( )
private 
MySqlCommand 
cmd  
=! "
new# &
MySqlCommand' 3
(3 4
)4 5
;5 6
public 
MySqlConnection 
DataConn '
=( )
new* -
MySqlConnection. =
(= >
)> ?
;? @
public 
MySqlDataHelper 
( 
)  
{! "
}# $
public 
async 
Task 
< 
int 
> 
ExecuteNonQuery .
(. /
string/ 5
strConn6 =
,= >
string? E
strProcF M
,M N
CommandTypeO Z
cmdType[ b
,b c
MySqlParameterd r
[r s
]s t
arrPrmu {
,{ |
ILogger	} Ñ
_logger
Ö å
)
å ç
{ 	
try 
{ 
_logger 
. 
LogInformation &
(& '
string' -
.- .
Format. 4
(4 5
$str5 Q
,Q R
this 
. 
GetType  
(  !
)! "
." #
Name# '
,' (
System 
. 

Reflection %
.% &

MethodBase& 0
.0 1
GetCurrentMethod1 A
(A B
)B C
.C D
NameD H
,H I
DateTime 
. 
Now  
) 
) 
; 
int   
i   
=   
await   %
ExecuteNonQueryThreadSafe   7
(  7 8
strConn  8 ?
,  ? @
strProc  A H
,  H I
cmdType  J Q
,  Q R
arrPrm  S Y
,  Y Z
_logger  Z a
)  a b
;  b c
return!! 
i!! 
;!! 
}"" 
catch## 
(## 
	Exception## 
err##  
)##  !
{$$ 
_logger%% 
.%% 
LogCritical%% #
(%%# $
string%%$ *
.%%* +
Format%%+ 1
(%%1 2
$str%%2 d
,%%d e
this&& 
.&& 
GetType&&  
(&&  !
)&&! "
.&&" #
Name&&# '
,&&' (
System'' 
.'' 

Reflection'' %
.''% &

MethodBase''& 0
.''0 1
GetCurrentMethod''1 A
(''A B
)''B C
.''C D
Name''D H
,''H I
DateTime(( 
.(( 
Now((  
,((  !
err)) 
.)) 
Message)) 
)** 
)** 
;** 
return++ 
$num++ 
;++ 
},, 
}-- 	
public// 
async// 
Task// 
<// 
int// 
>// %
ExecuteNonQueryThreadSafe// 8
(//8 9
string//9 ?
strConn//@ G
,//G H
string//I O
strProc//P W
,//W X
CommandType//Y d
cmdType//e l
,//l m
MySqlParameter//n |
[//| }
]//} ~
arrPrm	// Ö
,
//Ö Ü
ILogger
//á é
_logger
//è ñ
)
//ñ ó
{00 	
int11 
result11 
=11 
default11  
(11  !
int11! $
)11$ %
;11% &
_logger22 
.22 
LogInformation22 "
(22" #
string22# )
.22) *
Format22* 0
(220 1
$str221 M
,22M N
this33 
.33 
GetType33 
(33 
)33 
.33 
Name33 #
,33# $
System44 
.44 

Reflection44 !
.44! "

MethodBase44" ,
.44, -
GetCurrentMethod44- =
(44= >
)44> ?
.44? @
Name44@ D
,44D E
DateTime55 
.55 
Now55 
)66 
)66 
;66 
try77 
{88 
_logger99 
.99 
LogInformation99 &
(99& '
string99' -
.99- .
Format99. 4
(994 5
$str995 Q
,99Q R
this:: 
.:: 
GetType::  
(::  !
)::! "
.::" #
Name::# '
,::' (
System;; 
.;; 

Reflection;; %
.;;% &

MethodBase;;& 0
.;;0 1
GetCurrentMethod;;1 A
(;;A B
);;B C
.;;C D
Name;;D H
,;;H I
DateTime<< 
.<< 
Now<<  
)== 
)== 
;== 
using>> 
(>> 
MySqlConnection>> &
dataConnection>>' 5
=>>6 7
new>>8 ;
MySqlConnection>>< K
(>>K L
strConn>>L S
)>>S T
)>>T U
{?? 
_logger@@ 
.@@ 
LogInformation@@ *
(@@* +
string@@+ 1
.@@1 2
Format@@2 8
(@@8 9
$str@@9 e
,@@e f
thisAA 
.AA 
GetTypeAA $
(AA$ %
)AA% &
.AA& '
NameAA' +
,AA+ ,
SystemBB 
.BB 

ReflectionBB )
.BB) *

MethodBaseBB* 4
.BB4 5
GetCurrentMethodBB5 E
(BBE F
)BBF G
.BBG H
NameBBH L
,BBL M
DateTimeCC  
.CC  !
NowCC! $
)DD 
)DD 
;DD 
usingEE 
(EE 
MySqlCommandEE '
icmdEE( ,
=EE- .
dataConnectionEE/ =
.EE= >
CreateCommandEE> K
(EEK L
)EEL M
)EEM N
{FF 
_loggerGG 
.GG  
LogInformationGG  .
(GG. /
stringGG/ 5
.GG5 6
FormatGG6 <
(GG< =
$strGG= h
,GGh i
thisHH  
.HH  !
GetTypeHH! (
(HH( )
)HH) *
.HH* +
NameHH+ /
,HH/ 0
SystemII "
.II" #

ReflectionII# -
.II- .

MethodBaseII. 8
.II8 9
GetCurrentMethodII9 I
(III J
)IIJ K
.IIK L
NameIIL P
,IIP Q
DateTimeJJ $
.JJ$ %
NowJJ% (
)KK 
)KK 
;KK 
dataConnectionLL &
.LL& '
ConnectionStringLL' 7
=LL8 9
strConnLL: A
;LLA B
dataConnectionMM &
.MM& '
OpenMM' +
(MM+ ,
)MM, -
;MM- .
icmdNN 
.NN 

ConnectionNN '
=NN( )
dataConnectionNN* 8
;NN8 9
icmdOO 
.OO 
CommandTimeoutOO +
=OO, -
DataCmdTimeoutOO. <
;OO< =
icmdPP 
.PP 
CommandTextPP (
=PP) *
strProcPP+ 2
;PP2 3
icmdQQ 
.QQ 
CommandTypeQQ (
=QQ) *
cmdTypeQQ+ 2
;QQ2 3
intRR 
iRR 
=RR 
arrPrmRR  &
.RR& '
GetUpperBoundRR' 4
(RR4 5
$numRR5 6
)RR6 7
;RR7 8
intSS 
jSS 
=SS 
$numSS  !
;SS! "
icmdTT 
.TT 

ParametersTT '
.TT' (
ClearTT( -
(TT- .
)TT. /
;TT/ 0
foreachUU 
(UU  !
MySqlParameterUU! /
pUU0 1
inUU2 4
arrPrmUU5 ;
)UU; <
{VV 
ifWW 
(WW  
jWW  !
<=WW" $
iWW% &
)WW& '
{XX 
icmdYY  $
.YY$ %

ParametersYY% /
.YY/ 0
AddYY0 3
(YY3 4
pYY4 5
)YY5 6
;YY6 7
}ZZ 
j[[ 
++[[ 
;[[  
}\\ 
result]] 
=]]  
await]]! &
icmd]]' +
.]]+ , 
ExecuteNonQueryAsync]], @
(]]@ A
)]]A B
;]]B C
if__ 
(__ 
dataConnection__ *
.__* +
State__+ 0
==__1 3
ConnectionState__4 C
.__C D
Open__D H
)__H I
{`` 
dataConnectionaa *
.aa* +
Closeaa+ 0
(aa0 1
)aa1 2
;aa2 3
}bb 
_loggercc 
.cc  
LogInformationcc  .
(cc. /
stringcc/ 5
.cc5 6
Formatcc6 <
(cc< =
$strcc= f
,ccf g
thisdd  
.dd  !
GetTypedd! (
(dd( )
)dd) *
.dd* +
Namedd+ /
,dd/ 0
Systemee "
.ee" #

Reflectionee# -
.ee- .

MethodBaseee. 8
.ee8 9
GetCurrentMethodee9 I
(eeI J
)eeJ K
.eeK L
NameeeL P
,eeP Q
DateTimeff $
.ff$ %
Nowff% (
)gg 
)gg 
;gg 
}hh 
_loggerii 
.ii 
LogInformationii *
(ii* +
stringii+ 1
.ii1 2
Formatii2 8
(ii8 9
$strii9 S
,iiS T
thisjj 
.jj 
GetTypejj $
(jj$ %
)jj% &
.jj& '
Namejj' +
,jj+ ,
Systemkk 
.kk 

Reflectionkk )
.kk) *

MethodBasekk* 4
.kk4 5
GetCurrentMethodkk5 E
(kkE F
)kkF G
.kkG H
NamekkH L
,kkL M
DateTimell  
.ll  !
Nowll! $
)mm 
)mm 
;mm 
}nn 
_loggeroo 
.oo 
LogInformationoo &
(oo& '
stringoo' -
.oo- .
Formatoo. 4
(oo4 5
$stroo5 O
,ooO P
thispp 
.pp 
GetTypepp  
(pp  !
)pp! "
.pp" #
Namepp# '
,pp' (
Systemqq 
.qq 

Reflectionqq %
.qq% &

MethodBaseqq& 0
.qq0 1
GetCurrentMethodqq1 A
(qqA B
)qqB C
.qqC D
NameqqD H
,qqH I
DateTimerr 
.rr 
Nowrr  
)ss 
)ss 
;ss 
returntt 
resulttt 
;tt 
}uu 
catchvv 
(vv 
	Exceptionvv 
errvv  
)vv  !
{vv" #
_loggerww 
.ww 
LogCriticalww #
(ww# $
stringww$ *
.ww* +
Formatww+ 1
(ww1 2
$strww2 d
,wwd e
thisxx 
.xx 
GetTypexx  
(xx  !
)xx! "
.xx" #
Namexx# '
,xx' (
Systemyy 
.yy 

Reflectionyy %
.yy% &

MethodBaseyy& 0
.yy0 1
GetCurrentMethodyy1 A
(yyA B
)yyB C
.yyC D
NameyyD H
,yyH I
DateTimezz 
.zz 
Nowzz  
,zz  !
err{{ 
.{{ 
Message{{ 
)|| 
)|| 
;|| 
return}} 
$num}} 
;}} 
}~~ 
}
ÄÄ 	
public
ÇÇ 
async
ÇÇ 
Task
ÇÇ 
<
ÇÇ 
object
ÇÇ  
>
ÇÇ  !
ExecuteScalar
ÇÇ" /
(
ÇÇ/ 0
string
ÇÇ0 6
strConn
ÇÇ7 >
,
ÇÇ> ?
string
ÇÇ@ F
strProc
ÇÇG N
,
ÇÇN O
CommandType
ÇÇP [
cmdType
ÇÇ\ c
,
ÇÇc d
MySqlParameter
ÇÇe s
[
ÇÇs t
]
ÇÇt u
arrPrm
ÇÇv |
,
ÇÇ| }
ILoggerÇÇ~ Ö
_loggerÇÇÜ ç
)ÇÇç é
{
ÉÉ 	
Tuple
ÑÑ 
<
ÑÑ 
MySqlCommand
ÑÑ 
,
ÑÑ 
MySqlConnection
ÑÑ  /
>
ÑÑ/ 0
tplObj
ÑÑ1 7
=
ÑÑ8 9
await
ÑÑ: ?
PrepareCommand
ÑÑ@ N
(
ÑÑN O
strConn
ÑÑO V
,
ÑÑV W
strProc
ÑÑX _
,
ÑÑ_ `
cmdType
ÑÑa h
,
ÑÑh i
arrPrm
ÑÑj p
,
ÑÑp q
_logger
ÑÑr y
)
ÑÑy z
;
ÑÑz {
var
ÖÖ 
obj
ÖÖ 
=
ÖÖ 
await
ÖÖ 
tplObj
ÖÖ "
.
ÖÖ" #
Item1
ÖÖ# (
.
ÖÖ( ) 
ExecuteScalarAsync
ÖÖ) ;
(
ÖÖ; <
)
ÖÖ< =
;
ÖÖ= >
if
ÜÜ 
(
ÜÜ 
tplObj
ÜÜ 
.
ÜÜ 
Item2
ÜÜ 
.
ÜÜ 
State
ÜÜ "
==
ÜÜ# %
ConnectionState
ÜÜ& 5
.
ÜÜ5 6
Open
ÜÜ6 :
)
ÜÜ: ;
{
áá 
tplObj
àà 
.
àà 
Item2
àà 
.
àà 
Close
àà "
(
àà" #
)
àà# $
;
àà$ %
tplObj
ââ 
.
ââ 
Item2
ââ 
.
ââ 
Dispose
ââ $
(
ââ$ %
)
ââ% &
;
ââ& '
}
ää 
return
ãã 
obj
ãã 
;
ãã 
}
åå 	
public
éé 
async
éé 
Task
éé 
<
éé 
string
éé  
>
éé  !)
ExecuteNonQueryReturnOutput
éé" =
(
éé= >
string
éé> D
strConn
ééE L
,
ééL M
string
ééN T
strProc
ééU \
,
éé\ ]
CommandType
éé^ i
cmdType
ééj q
,
ééq r
MySqlParameteréés Å
[ééÅ Ç
]ééÇ É
arrPrmééÑ ä
,ééä ã
ILoggerééå ì
_loggerééî õ
)ééõ ú
{
èè 	
Tuple
êê 
<
êê 
MySqlCommand
êê 
,
êê 
MySqlConnection
êê  /
>
êê/ 0
tplObj
êê1 7
=
êê8 9
await
êê: ?
PrepareCommand
êê@ N
(
êêN O
strConn
êêO V
,
êêV W
strProc
êêX _
,
êê_ `
cmdType
êêa h
,
êêh i
arrPrm
êêj p
,
êêp q
_logger
êêr y
)
êêy z
;
êêz {
string
ëë 
	outputVal
ëë 
=
ëë 
arrPrm
ëë %
.
ëë% &
SingleOrDefault
ëë& 5
(
ëë5 6
x
ëë6 7
=>
ëë8 :
x
ëë; <
.
ëë< =
	Direction
ëë= F
==
ëëG I 
ParameterDirection
ëëJ \
.
ëë\ ]
Output
ëë] c
)
ëëc d
.
ëëd e
ParameterName
ëëe r
;
ëër s
var
íí 
obj
íí 
=
íí 
await
íí 
tplObj
íí "
.
íí" #
Item1
íí# (
.
íí( )"
ExecuteNonQueryAsync
íí) =
(
íí= >
)
íí> ?
;
íí? @
if
ìì 
(
ìì 
tplObj
ìì 
.
ìì 
Item2
ìì 
.
ìì 
State
ìì "
==
ìì# %
ConnectionState
ìì& 5
.
ìì5 6
Open
ìì6 :
)
ìì: ;
{
îî 
tplObj
ïï 
.
ïï 
Item2
ïï 
.
ïï 
Close
ïï "
(
ïï" #
)
ïï# $
;
ïï$ %
tplObj
ññ 
.
ññ 
Item2
ññ 
.
ññ 
Dispose
ññ $
(
ññ$ %
)
ññ% &
;
ññ& '
}
óó 
return
òò 
Convert
òò 
.
òò 
ToString
òò #
(
òò# $
tplObj
òò$ *
.
òò* +
Item1
òò+ 0
.
òò0 1

Parameters
òò1 ;
[
òò; <
	outputVal
òò< E
]
òòE F
.
òòF G
Value
òòG L
)
òòL M
;
òòM N
}
ôô 	
public
õõ 
async
õõ 
Task
õõ 
<
õõ 
object
õõ  
>
õõ  !
ExecuteReader
õõ" /
(
õõ/ 0
string
õõ0 6
strConn
õõ7 >
,
õõ> ?
string
õõ@ F
strProc
õõG N
,
õõN O
CommandType
õõP [
cmdType
õõ\ c
,
õõc d
MySqlParameter
õõe s
[
õõs t
]
õõt u
arrPrm
õõv |
,
õõ| }
ILoggerõõ~ Ö
_loggerõõÜ ç
)õõç é
{
úú 	
try
ùù 
{
ûû 
Tuple
üü 
<
üü 
MySqlCommand
üü "
,
üü" #
MySqlConnection
üü$ 3
>
üü3 4
tplObj
üü5 ;
=
üü< =
await
üü> C
PrepareCommand
üüD R
(
üüR S
strConn
üüS Z
,
üüZ [
strProc
üü\ c
,
üüc d
cmdType
üüe l
,
üül m
arrPrm
üün t
,
üüt u
_logger
üüv }
)
üü} ~
;
üü~ 
MySqlDataReader
†† 
reader
††  &
=
††' (
tplObj
††) /
.
††/ 0
Item1
††0 5
.
††5 6
ExecuteReader
††6 C
(
††C D
)
††D E
;
††E F
if
°° 
(
°° 
tplObj
°° 
.
°° 
Item2
°°  
.
°°  !
State
°°! &
==
°°' )
ConnectionState
°°* 9
.
°°9 :
Open
°°: >
)
°°> ?
{
¢¢ 
tplObj
££ 
.
££ 
Item2
££  
.
££  !
Close
££! &
(
££& '
)
££' (
;
££( )
tplObj
§§ 
.
§§ 
Item2
§§  
.
§§  !
Dispose
§§! (
(
§§( )
)
§§) *
;
§§* +
}
•• 
return
¶¶ 
reader
¶¶ 
;
¶¶ 
}
ßß 
catch
®® 
(
®® 
	Exception
®® 
ex
®® 
)
®®  
{
©© 
throw
™™ 
ex
™™ 
;
™™ 
}
´´ 
}
¨¨ 	
public
ÆÆ 
async
ÆÆ 
Task
ÆÆ 
<
ÆÆ 
DataSet
ÆÆ !
>
ÆÆ! "
ExecuteDataSet
ÆÆ# 1
(
ÆÆ1 2
string
ÆÆ2 8
strConn
ÆÆ9 @
,
ÆÆ@ A
string
ÆÆB H
strProc
ÆÆI P
,
ÆÆP Q
CommandType
ÆÆR ]
cmdType
ÆÆ^ e
,
ÆÆe f
MySqlParameter
ÆÆg u
[
ÆÆu v
]
ÆÆv w
arrPrm
ÆÆx ~
,
ÆÆ~ 
ILoggerÆÆÄ á
_loggerÆÆà è
)ÆÆè ê
{
ØØ 	
try
∞∞ 
{
±± 
_logger
≤≤ 
.
≤≤ 
LogInformation
≤≤ &
(
≤≤& '
string
≤≤' -
.
≤≤- .
Format
≤≤. 4
(
≤≤4 5
$str
≤≤5 Q
,
≤≤Q R
this
≥≥ 
.
≥≥ 
GetType
≥≥  
(
≥≥  !
)
≥≥! "
.
≥≥" #
Name
≥≥# '
,
≥≥' (
System
¥¥ 
.
¥¥ 

Reflection
¥¥ %
.
¥¥% &

MethodBase
¥¥& 0
.
¥¥0 1
GetCurrentMethod
¥¥1 A
(
¥¥A B
)
¥¥B C
.
¥¥C D
Name
¥¥D H
,
¥¥H I
DateTime
µµ 
.
µµ 
Now
µµ  
)
∂∂ 
)
∂∂ 
;
∂∂ 
Tuple
∑∑ 
<
∑∑ 
MySqlCommand
∑∑ "
,
∑∑" #
MySqlConnection
∑∑$ 3
>
∑∑3 4
tplObj
∑∑5 ;
=
∑∑< =
await
∑∑> C
PrepareCommand
∑∑D R
(
∑∑R S
strConn
∑∑S Z
,
∑∑Z [
strProc
∑∑\ c
,
∑∑c d
cmdType
∑∑e l
,
∑∑l m
arrPrm
∑∑n t
,
∑∑t u
_logger
∑∑v }
)
∑∑} ~
;
∑∑~ 
MySqlDataAdapter
∏∏  
da
∏∏! #
=
∏∏$ %
new
∏∏& )
MySqlDataAdapter
∏∏* :
(
∏∏: ;
tplObj
∏∏; A
.
∏∏A B
Item1
∏∏B G
)
∏∏G H
;
∏∏H I
DataSet
ππ 
ds
ππ 
=
ππ 
new
ππ  
DataSet
ππ! (
(
ππ( )
)
ππ) *
;
ππ* +
await
∫∫ 
da
∫∫ 
.
∫∫ 
	FillAsync
∫∫ "
(
∫∫" #
ds
∫∫# %
)
∫∫% &
;
∫∫& '
_logger
ªª 
.
ªª 
LogInformation
ªª &
(
ªª& '
string
ªª' -
.
ªª- .
Format
ªª. 4
(
ªª4 5
$str
ªª5 b
,
ªªb c
this
ºº 
.
ºº 
GetType
ºº  
(
ºº  !
)
ºº! "
.
ºº" #
Name
ºº# '
,
ºº' (
System
ΩΩ 
.
ΩΩ 

Reflection
ΩΩ %
.
ΩΩ% &

MethodBase
ΩΩ& 0
.
ΩΩ0 1
GetCurrentMethod
ΩΩ1 A
(
ΩΩA B
)
ΩΩB C
.
ΩΩC D
Name
ΩΩD H
,
ΩΩH I
DateTime
ææ 
.
ææ 
Now
ææ  
)
øø 
)
øø 
;
øø 
if
¿¿ 
(
¿¿ 
tplObj
¿¿ 
.
¿¿ 
Item2
¿¿  
.
¿¿  !
State
¿¿! &
==
¿¿' )
ConnectionState
¿¿* 9
.
¿¿9 :
Open
¿¿: >
)
¿¿> ?
{
¡¡ 
tplObj
¬¬ 
.
¬¬ 
Item2
¬¬  
.
¬¬  !
Close
¬¬! &
(
¬¬& '
)
¬¬' (
;
¬¬( )
tplObj
√√ 
.
√√ 
Item2
√√  
.
√√  !
Dispose
√√! (
(
√√( )
)
√√) *
;
√√* +
}
ƒƒ 
return
≈≈ 
ds
≈≈ 
;
≈≈ 
}
∆∆ 
catch
«« 
(
«« 
	Exception
«« 
err
««  
)
««  !
{
»» 
_logger
…… 
.
…… 
LogCritical
…… #
(
……# $
string
……$ *
.
……* +
Format
……+ 1
(
……1 2
$str
……2 d
,
……d e
this
   
.
   
GetType
    
(
    !
)
  ! "
.
  " #
Name
  # '
,
  ' (
System
ÀÀ 
.
ÀÀ 

Reflection
ÀÀ %
.
ÀÀ% &

MethodBase
ÀÀ& 0
.
ÀÀ0 1
GetCurrentMethod
ÀÀ1 A
(
ÀÀA B
)
ÀÀB C
.
ÀÀC D
Name
ÀÀD H
,
ÀÀH I
DateTime
ÃÃ 
.
ÃÃ 
Now
ÃÃ  
,
ÃÃ  !
err
ÕÕ 
.
ÕÕ 
Message
ÕÕ 
)
ŒŒ 
)
ŒŒ 
;
ŒŒ 
return
œœ 
null
œœ 
;
œœ 
}
–– 
}
—— 	
private
’’ 
async
’’ 
Task
’’ 
<
’’ 
Tuple
’’  
<
’’  !
MySqlCommand
’’! -
,
’’- .
MySqlConnection
’’/ >
>
’’> ?
>
’’? @
PrepareCommand
’’A O
(
’’O P
string
’’P V
strConn
’’W ^
,
’’^ _
string
’’` f
strProc
’’g n
,
’’n o
CommandType
’’p {
cmdType’’| É
,’’É Ñ
MySqlParameter’’Ö ì
[’’ì î
]’’î ï
arrPrm’’ñ ú
,’’ú ù
ILogger’’û •
_logger’’¶ ≠
)’’≠ Æ
{
÷÷ 	
try
◊◊ 
{
ÿÿ 
_logger
ŸŸ 
.
ŸŸ 
LogInformation
ŸŸ &
(
ŸŸ& '
string
ŸŸ' -
.
ŸŸ- .
Format
ŸŸ. 4
(
ŸŸ4 5
$str
ŸŸ5 Q
,
ŸŸQ R
this
⁄⁄ 
.
⁄⁄ 
GetType
⁄⁄ 
(
⁄⁄  
)
⁄⁄  !
.
⁄⁄! "
Name
⁄⁄" &
,
⁄⁄& '
System
€€ 
.
€€ 

Reflection
€€ $
.
€€$ %

MethodBase
€€% /
.
€€/ 0
GetCurrentMethod
€€0 @
(
€€@ A
)
€€A B
.
€€B C
Name
€€C G
,
€€G H
DateTime
‹‹ 
.
‹‹ 
Now
‹‹ 
)
›› 
)
›› 
;
›› 
MySqlCommand
ﬁﬁ 
icmd
ﬁﬁ !
;
ﬁﬁ! "
MySqlConnection
ﬂﬂ 
dataConnection
ﬂﬂ  .
;
ﬂﬂ. /
Tuple
‡‡ 
<
‡‡ 
MySqlCommand
‡‡ "
,
‡‡" #
MySqlConnection
‡‡$ 3
>
‡‡3 4
tplObj
‡‡5 ;
;
‡‡; <
using
·· 
(
·· 
dataConnection
·· %
=
··& '
new
··( +
MySqlConnection
··, ;
(
··; <
strConn
··< C
)
··C D
)
··D E
{
‚‚ 
_logger
„„ 
.
„„ 
LogInformation
„„ *
(
„„* +
string
„„+ 1
.
„„1 2
Format
„„2 8
(
„„8 9
$str
„„9 e
,
„„e f
this
‰‰ 
.
‰‰ 
GetType
‰‰ $
(
‰‰$ %
)
‰‰% &
.
‰‰& '
Name
‰‰' +
,
‰‰+ ,
System
ÂÂ 
.
ÂÂ 

Reflection
ÂÂ )
.
ÂÂ) *

MethodBase
ÂÂ* 4
.
ÂÂ4 5
GetCurrentMethod
ÂÂ5 E
(
ÂÂE F
)
ÂÂF G
.
ÂÂG H
Name
ÂÂH L
,
ÂÂL M
DateTime
ÊÊ  
.
ÊÊ  !
Now
ÊÊ! $
)
ÁÁ 
)
ÁÁ 
;
ÁÁ 
using
ËË 
(
ËË 
icmd
ËË 
=
ËË  !
dataConnection
ËË" 0
.
ËË0 1
CreateCommand
ËË1 >
(
ËË> ?
)
ËË? @
)
ËË@ A
{
ÈÈ 
_logger
ÍÍ 
.
ÍÍ  
LogInformation
ÍÍ  .
(
ÍÍ. /
string
ÍÍ/ 5
.
ÍÍ5 6
Format
ÍÍ6 <
(
ÍÍ< =
$str
ÍÍ= h
,
ÍÍh i
this
ÎÎ 
.
ÎÎ  
GetType
ÎÎ  '
(
ÎÎ' (
)
ÎÎ( )
.
ÎÎ) *
Name
ÎÎ* .
,
ÎÎ. /
System
ÏÏ !
.
ÏÏ! "

Reflection
ÏÏ" ,
.
ÏÏ, -

MethodBase
ÏÏ- 7
.
ÏÏ7 8
GetCurrentMethod
ÏÏ8 H
(
ÏÏH I
)
ÏÏI J
.
ÏÏJ K
Name
ÏÏK O
,
ÏÏO P
DateTime
ÌÌ #
.
ÌÌ# $
Now
ÌÌ$ '
)
ÓÓ 
)
ÓÓ 
;
ÓÓ 
if
ÔÔ 
(
ÔÔ 
dataConnection
ÔÔ *
.
ÔÔ* +
State
ÔÔ+ 0
==
ÔÔ1 3
ConnectionState
ÔÔ4 C
.
ÔÔC D
Open
ÔÔD H
)
ÔÔH I
{
 
dataConnection
ÒÒ *
.
ÒÒ* +
Close
ÒÒ+ 0
(
ÒÒ0 1
)
ÒÒ1 2
;
ÒÒ2 3
}
ÚÚ 
dataConnection
ÛÛ &
.
ÛÛ& '
ConnectionString
ÛÛ' 7
=
ÛÛ8 9
strConn
ÛÛ: A
;
ÛÛA B
dataConnection
ÙÙ &
.
ÙÙ& '
Open
ÙÙ' +
(
ÙÙ+ ,
)
ÙÙ, -
;
ÙÙ- .
icmd
ıı 
.
ıı 

Connection
ıı '
=
ıı( )
dataConnection
ıı* 8
;
ıı8 9
icmd
ˆˆ 
.
ˆˆ 
CommandTimeout
ˆˆ +
=
ˆˆ, -
DataCmdTimeout
ˆˆ. <
;
ˆˆ< =
icmd
˜˜ 
.
˜˜ 
CommandText
˜˜ (
=
˜˜) *
strProc
˜˜+ 2
;
˜˜2 3
icmd
¯¯ 
.
¯¯ 
CommandType
¯¯ (
=
¯¯) *
cmdType
¯¯+ 2
;
¯¯2 3
int
˘˘ 
i
˘˘ 
=
˘˘ 
arrPrm
˘˘  &
.
˘˘& '
GetUpperBound
˘˘' 4
(
˘˘4 5
$num
˘˘5 6
)
˘˘6 7
;
˘˘7 8
int
˙˙ 
j
˙˙ 
=
˙˙ 
$num
˙˙  !
;
˙˙! "
icmd
˚˚ 
.
˚˚ 

Parameters
˚˚ '
.
˚˚' (
Clear
˚˚( -
(
˚˚- .
)
˚˚. /
;
˚˚/ 0
foreach
¸¸ 
(
¸¸  !
MySqlParameter
¸¸! /
p
¸¸0 1
in
¸¸2 4
arrPrm
¸¸5 ;
)
¸¸; <
{
˝˝ 
if
˛˛ 
(
˛˛  
j
˛˛  !
<=
˛˛" $
i
˛˛% &
)
˛˛& '
{
ˇˇ 
icmd
ÄÄ  $
.
ÄÄ$ %

Parameters
ÄÄ% /
.
ÄÄ/ 0
Add
ÄÄ0 3
(
ÄÄ3 4
p
ÄÄ4 5
)
ÄÄ5 6
;
ÄÄ6 7
}
ÅÅ 
j
ÇÇ 
++
ÇÇ 
;
ÇÇ  
}
ÉÉ 
_logger
ÑÑ 
.
ÑÑ  
LogInformation
ÑÑ  .
(
ÑÑ. /
string
ÑÑ/ 5
.
ÑÑ5 6
Format
ÑÑ6 <
(
ÑÑ< =
$str
ÑÑ= f
,
ÑÑf g
this
ÖÖ 
.
ÖÖ  
GetType
ÖÖ  '
(
ÖÖ' (
)
ÖÖ( )
.
ÖÖ) *
Name
ÖÖ* .
,
ÖÖ. /
System
ÜÜ !
.
ÜÜ! "

Reflection
ÜÜ" ,
.
ÜÜ, -

MethodBase
ÜÜ- 7
.
ÜÜ7 8
GetCurrentMethod
ÜÜ8 H
(
ÜÜH I
)
ÜÜI J
.
ÜÜJ K
Name
ÜÜK O
,
ÜÜO P
DateTime
áá #
.
áá# $
Now
áá$ '
)
àà 
)
àà 
;
àà 
}
ââ 
_logger
ää 
.
ää 
LogInformation
ää *
(
ää* +
string
ää+ 1
.
ää1 2
Format
ää2 8
(
ää8 9
$str
ää9 c
,
ääc d
this
ãã 
.
ãã 
GetType
ãã $
(
ãã$ %
)
ãã% &
.
ãã& '
Name
ãã' +
,
ãã+ ,
System
åå 
.
åå 

Reflection
åå )
.
åå) *

MethodBase
åå* 4
.
åå4 5
GetCurrentMethod
åå5 E
(
ååE F
)
ååF G
.
ååG H
Name
ååH L
,
ååL M
DateTime
çç  
.
çç  !
Now
çç! $
)
éé 
)
éé 
;
éé 
}
èè 
tplObj
êê 
=
êê 
new
êê 
Tuple
êê "
<
êê" #
MySqlCommand
êê# /
,
êê/ 0
MySqlConnection
êê1 @
>
êê@ A
(
êêA B
icmd
êêB F
,
êêF G
dataConnection
êêH V
)
êêV W
;
êêW X
_logger
ëë 
.
ëë 
LogInformation
ëë &
(
ëë& '
string
ëë' -
.
ëë- .
Format
ëë. 4
(
ëë4 5
$str
ëë5 O
,
ëëO P
this
íí 
.
íí 
GetType
íí  
(
íí  !
)
íí! "
.
íí" #
Name
íí# '
,
íí' (
System
ìì 
.
ìì 

Reflection
ìì %
.
ìì% &

MethodBase
ìì& 0
.
ìì0 1
GetCurrentMethod
ìì1 A
(
ììA B
)
ììB C
.
ììC D
Name
ììD H
,
ììH I
DateTime
îî 
.
îî 
Now
îî  
)
ïï 
)
ïï 
;
ïï 
return
ññ 
tplObj
ññ 
;
ññ 
}
óó 
catch
òò 
(
òò 
	Exception
òò 
err
òò  
)
òò  !
{
òò" #
_logger
ôô 
.
ôô 
LogCritical
ôô #
(
ôô# $
string
ôô$ *
.
ôô* +
Format
ôô+ 1
(
ôô1 2
$str
ôô2 d
,
ôôd e
this
öö 
.
öö 
GetType
öö  
(
öö  !
)
öö! "
.
öö" #
Name
öö# '
,
öö' (
System
õõ 
.
õõ 

Reflection
õõ %
.
õõ% &

MethodBase
õõ& 0
.
õõ0 1
GetCurrentMethod
õõ1 A
(
õõA B
)
õõB C
.
õõC D
Name
õõD H
,
õõH I
DateTime
úú 
.
úú 
Now
úú  
,
úú  !
err
ùù 
.
ùù 
Message
ùù 
)
ûû 
)
ûû 
;
ûû 
return
üü 
null
üü 
;
üü 
}
†† 
}
¢¢ 	
}
§§ 
}•• ÚK
jD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\ObjectExtensions\ExtendAllObjects.cs
	namespace 	
ObjectExtensions
 
{ 
public		 

static		 
class		 

Extensions		 "
{

 
public 
static 
bool 
CompareEquals (
<( )
T) *
>* +
(+ ,
this, 0
T1 2
objectFromCompare3 D
,D E
TF G
objectToCompareH W
,W X
boolY ]
includeNonPublic^ n
=o p
falseq v
)v w
{ 	
bool 
result 
= 
( 
objectFromCompare ,
==- /
null0 4
&&5 7
objectToCompare8 G
==H J
nullK O
)O P
;P Q
if 
( 
! 
result 
) 
{ 
Type 
fromType 
= 
objectFromCompare  1
.1 2
GetType2 9
(9 :
): ;
;; <
if 
( 
fromType 
. 
IsPrimitive (
)( )
{ 
result 
= 
objectFromCompare .
.. /
Equals/ 5
(5 6
objectToCompare6 E
)E F
;F G
} 
else 
if 
( 
fromType !
.! "
FullName" *
.* +
Contains+ 3
(3 4
$str4 C
)C D
)D E
{ 
result 
= 
( 
( 
objectFromCompare 0
as1 3
string4 :
): ;
==< >
(? @
objectToCompare@ O
asP R
stringS Y
)Y Z
)Z [
;[ \
} 
else 
if 
( 
fromType !
.! "
FullName" *
.* +
Contains+ 3
(3 4
$str4 >
)> ?
)? @
{ 
result 
= 
DateTime %
.% &
Parse& +
(+ ,
objectFromCompare, =
.= >
ToString> F
(F G
)G H
)H I
.I J
TicksJ O
==P R
DateTimeS [
.[ \
Parse\ a
(a b
objectToCompareb q
.q r
ToStringr z
(z {
){ |
)| }
.} ~
Ticks	~ É
;
É Ñ
} 
else 
if 
( 
fromType !
.! "
FullName" *
.* +
Contains+ 3
(3 4
$str4 O
)O P
)P Q
{ 
result 
= 
( 
( 
objectFromCompare 0
as1 3
StringBuilder4 A
)A B
.B C
ToStringC K
(K L
)L M
==N P
(Q R
objectToCompareR a
asb d
StringBuildere r
)r s
.s t
ToStringt |
(| }
)} ~
)~ 
;	 Ä
}   
else"" 
if"" 
("" 
fromType"" !
.""! "
IsGenericType""" /
||""0 2
fromType""3 ;
.""; <
IsArray""< C
)""C D
{## 
string$$ 
propName$$ #
=$$$ %
($$& '
fromType$$' /
.$$/ 0
IsGenericType$$0 =
)$$= >
?$$? @
$str$$A H
:$$I J
$str$$K S
;$$S T
string%% 
methName%% #
=%%$ %
(%%& '
fromType%%' /
.%%/ 0
IsGenericType%%0 =
)%%= >
?%%? @
$str%%A K
:%%L M
$str%%N S
;%%S T
PropertyInfo&&  
propInfo&&! )
=&&* +
fromType&&, 4
.&&4 5
GetProperty&&5 @
(&&@ A
propName&&A I
)&&I J
;&&J K

MethodInfo'' 
methInfo'' '
=''( )
fromType''* 2
.''2 3
	GetMethod''3 <
(''< =
methName''= E
)''E F
;''F G
if(( 
((( 
propInfo((  
!=((! #
null(($ (
&&(() +
methInfo((, 4
!=((5 7
null((8 <
)((< =
{)) 
int** 
	fromCount** %
=**& '
(**( )
int**) ,
)**, -
propInfo**- 5
.**5 6
GetValue**6 >
(**> ?
objectFromCompare**? P
,**P Q
null**R V
)**V W
;**W X
int++ 
toCount++ #
=++$ %
(++& '
int++' *
)++* +
propInfo+++ 3
.++3 4
GetValue++4 <
(++< =
objectToCompare++= L
,++L M
null++N R
)++R S
;++S T
result,, 
=,,  
(,,! "
	fromCount,," +
==,,, .
toCount,,/ 6
),,6 7
;,,7 8
if-- 
(-- 
result-- "
&&--# %
	fromCount--& /
>--0 1
$num--2 3
)--3 4
{.. 
for// 
(//  !
int//! $
index//% *
=//+ ,
$num//- .
;//. /
index//0 5
<//6 7
	fromCount//8 A
;//A B
index//C H
++//H J
)//J K
{00 
object11  &
fromItem11' /
=110 1
methInfo112 :
.11: ;
Invoke11; A
(11A B
objectFromCompare11B S
,11S T
new11U X
object11Y _
[11_ `
]11` a
{11b c
index11d i
}11j k
)11k l
;11l m
object22  &
toItem22' -
=22. /
methInfo220 8
.228 9
Invoke229 ?
(22? @
objectToCompare22@ O
,22O P
new22Q T
object22U [
[22[ \
]22\ ]
{22^ _
index22` e
}22f g
)22g h
;22h i
result33  &
=33' (
CompareEquals33) 6
(336 7
fromItem337 ?
,33? @
toItem33A G
)33G H
;33H I
if44  "
(44# $
!44$ %
result44% +
)44+ ,
{55  !
break66$ )
;66) *
}77  !
}88 
}99 
}:: 
else;; 
{;; 
};; 
}<< 
else== 
{>> 
BindingFlags??  
flags??! &
=??' (
BindingFlags??) 5
.??5 6
Public??6 <
|??= >
BindingFlags??? K
.??K L
Instance??L T
;??T U
if@@ 
(@@ 
includeNonPublic@@ (
)@@( )
{AA 
flagsBB 
|=BB  
BindingFlagsBB! -
.BB- .
	NonPublicBB. 7
;BB7 8
}CC 
PropertyInfoDD  
[DD  !
]DD! "
propsDD# (
=DD) *
typeofDD+ 1
(DD1 2
TDD2 3
)DD3 4
.DD4 5
GetPropertiesDD5 B
(DDB C
flagsDDC H
)DDH I
;DDI J
foreachEE 
(EE 
PropertyInfoEE )
propEE* .
inEE/ 1
propsEE2 7
)EE7 8
{FF 
TypeGG 
typeGG !
=GG" #
fromTypeGG$ ,
.GG, -
GetPropertyGG- 8
(GG8 9
propGG9 =
.GG= >
NameGG> B
)GGB C
.GGC D
GetValueGGD L
(GGL M
objectToCompareGGM \
,GG\ ]
nullGG^ b
)GGb c
.GGc d
GetTypeGGd k
(GGk l
)GGl m
;GGm n
objectII 
dataFromCompareII .
=II/ 0
objectFromCompareII1 B
.IIB C
GetTypeIIC J
(IIJ K
)IIK L
.IIL M
GetPropertyIIM X
(IIX Y
propIIY ]
.II] ^
NameII^ b
)IIb c
.IIc d
GetValueIId l
(IIl m
objectFromCompareIIm ~
,II~ 
null
IIÄ Ñ
)
IIÑ Ö
;
IIÖ Ü
objectJJ 
dataToCompareJJ ,
=JJ- .
objectToCompareJJ/ >
.JJ> ?
GetTypeJJ? F
(JJF G
)JJG H
.JJH I
GetPropertyJJI T
(JJT U
propJJU Y
.JJY Z
NameJJZ ^
)JJ^ _
.JJ_ `
GetValueJJ` h
(JJh i
objectToCompareJJi x
,JJx y
nullJJz ~
)JJ~ 
;	JJ Ä
resultKK 
=KK  
CompareEqualsKK! .
(KK. /
ConvertKK/ 6
.KK6 7

ChangeTypeKK7 A
(KKA B
dataFromCompareKKB Q
,KKQ R
typeKKS W
)KKW X
,KKX Y
ConvertKKZ a
.KKa b

ChangeTypeKKb l
(KKl m
dataToCompareKKm z
,KKz {
type	KK| Ä
)
KKÄ Å
,
KKÅ Ç
includeNonPublic
KKÉ ì
)
KKì î
;
KKî ï
ifLL 
(LL 
!LL 
resultLL #
)LL# $
{MM 
breakNN !
;NN! "
}OO 
}PP 
}QQ 
}RR 
returnSS 
resultSS 
;SS 
}TT 	
}UU 
}VV ö
eD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\ObjectExtensions\ExtendChars.cs
	namespace 	
ObjectExtensions
 
{ 
public		 
static		 
class		 
ExtendChars		  
{

 
public 
static	 
bool 
IsAsciiNumeric #
(# $
this$ (
char) -
ch. 0
)0 1
{ 
int 
chInt 
= 
( 
int 
) 
ch 
; 
return 	
(
 
chInt 
>= 
$num 
&& 
chInt 
<=  "
$num# %
)% &
;& '
} 
public 
static	 
bool 
IsAsciiAlpha !
(! "
this" &
char' +
ch, .
). /
{ 
int 
chInt 
= 
( 
int 
) 
ch 
; 
return 	
(
 
( 
chInt 
>= 
$num 
&& 
chInt  
<=! #
$num$ &
)& '
||( *
(+ ,
chInt, 1
>=2 4
$num4 6
&&7 9
chInt: ?
<=@ B
$numB E
)E F
)F G
;G H
} 
public 
static	 
bool 
IsAsciiNonPrintable (
(( )
this) -
char. 2
ch3 5
)5 6
{ 
int 
chInt 
= 
( 
int 
) 
ch 
; 
return 	
(
 
chInt 
>= 
$num 
&& 
chInt 
<= !
$num" $
||% '
chInt( -
==. 0
$num1 4
)4 5
;5 6
} 
public 
static	 
bool 
IsAsciiOther !
(! "
this" &
char' +
ch, .
). /
{ 
return 	
(
 
! 
ch 
. 
IsAsciiNumeric 
( 
) 
&&  "
!# $
ch$ &
.& '
IsAsciiAlpha' 3
(3 4
)4 5
&&6 8
!9 :
ch: <
.< =
IsAsciiNonPrintable= P
(P Q
)Q R
)R S
;S T
}   
}!! 
}"" “Y
oD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\ObjectExtensions\ExtendDataTableReader.cs
	namespace 	
ObjectExtensions
 
{		 
public

 
static

 
class

 !
ExtendDataTableReader

 *
{ 
public 
static	 
string 
GetStringOrDefault )
() *
this* .
DataTableReader/ >
reader? E
,E F
intG J
ordinalK R
,R S
stringT Z
defaultValue[ g
)g h
{ 
string 	
value
 
= 
defaultValue 
; 
if 
( 
! 
reader 
. 
IsDBNull 
( 
ordinal 
)  
)  !
{ 
value 	
=
 
reader 
. 
	GetString 
( 
ordinal $
)$ %
;% &
} 
return 	
value
 
; 
} 
public 
static	 
Int32 
GetInt32OrDefault '
(' (
this( ,
DataTableReader- <
reader= C
,C D
intE H
ordinalI P
,P Q
Int32R W
defaultValueX d
)d e
{ 
Int32 
value	 
= 
defaultValue 
; 
if 
( 
! 
reader 
. 
IsDBNull 
( 
ordinal 
)  
)  !
{ 
value 	
=
 
reader 
. 
GetInt32 
( 
ordinal #
)# $
;$ %
} 
return 	
value
 
; 
} 
public   
static  	 
Int64   
GetInt64OrDefault   '
(  ' (
this  ( ,
DataTableReader  - <
reader  = C
,  C D
int  E H
ordinal  I P
,  P Q
Int64  R W
defaultValue  X d
)  d e
{!! 
Int64"" 
value""	 
="" 
defaultValue"" 
;"" 
if## 
(## 
!## 
reader## 
.## 
IsDBNull## 
(## 
ordinal## 
)##  
)##  !
{$$ 
value%% 	
=%%
 
reader%% 
.%% 
GetInt64%% 
(%% 
ordinal%% #
)%%# $
;%%$ %
}&& 
return'' 	
value''
 
;'' 
}(( 
public** 
static**	 
DateTime**  
GetDateTimeOrDefault** -
(**- .
this**. 2
DataTableReader**3 B
reader**C I
,**I J
int**K N
ordinal**O V
,**V W
DateTime**X `
defaultValue**a m
)**m n
{++ 
DateTime,, 
value,, 
=,, 
defaultValue,,  
;,,  !
if-- 
(-- 
!-- 
reader-- 
.-- 
IsDBNull-- 
(-- 
ordinal-- 
)--  
)--  !
{.. 
object// 

obj// 
=// 
reader// 
.// 
GetValue//  
(//  !
ordinal//! (
)//( )
;//) *
if00 
(00 
obj00 
is00 
string00 
)00 
{11 
DateTime22 
.22 
TryParse22 
(22 
(22 
string22 
)22 
obj22 "
,22" #
out22$ '
value22( -
)22- .
;22. /
}33 
else44 
{55 
value66 

=66 
reader66 
.66 
GetDateTime66 
(66  
ordinal66  '
)66' (
;66( )
}77 
}88 
return99 	
value99
 
;99 
}:: 
public<< 
static<<	 
DateTime<< "
GetOADateTimeOrDefault<< /
(<</ 0
this<<0 4
DataTableReader<<5 D
reader<<E K
,<<K L
int<<M P
ordinal<<Q X
,<<X Y
DateTime<<Z b
defaultValue<<c o
)<<o p
{== 
DateTime>> 
value>> 
=>> 
defaultValue>>  
;>>  !
if?? 
(?? 
!?? 
reader?? 
.?? 
IsDBNull?? 
(?? 
ordinal?? 
)??  
)??  !
{@@ 
objectAA 

objAA 
=AA 
readerAA 
.AA 
GetValueAA  
(AA  !
ordinalAA! (
)AA( )
;AA) *
valueBB 	
=BB
 
DateTimeBB 
.BB 

FromOADateBB 
(BB  
ConvertBB  '
.BB' (
ToDoubleBB( 0
(BB0 1
objBB1 4
)BB4 5
)BB5 6
;BB6 7
}CC 
returnDD 	
valueDD
 
;DD 
}EE 
publicGG 
staticGG	 
doubleGG 
GetDoubleOrDefaultGG )
(GG) *
thisGG* .
DataTableReaderGG/ >
readerGG? E
,GGE F
intGGG J
ordinalGGK R
,GGR S
doubleGGT Z
defaultValueGG[ g
)GGg h
{HH 
doubleII 	
valueII
 
=II 
defaultValueII 
;II 
ifJJ 
(JJ 
!JJ 
readerJJ 
.JJ 
IsDBNullJJ 
(JJ 
ordinalJJ 
)JJ  
)JJ  !
{KK 
valueLL 	
=LL
 
readerLL 
.LL 
	GetDoubleLL 
(LL 
ordinalLL $
)LL$ %
;LL% &
}MM 
returnNN 	
valueNN
 
;NN 
}OO 
publicQQ 
staticQQ	 
decimalQQ 
GetDecimalOrDefaultQQ +
(QQ+ ,
thisQQ, 0
DataTableReaderQQ1 @
readerQQA G
,QQG H
intQQI L
ordinalQQM T
,QQT U
decimalQQV ]
defaultValueQQ^ j
)QQj k
{RR 
decimalSS 

valueSS 
=SS 
defaultValueSS 
;SS  
ifTT 
(TT 
!TT 
readerTT 
.TT 
IsDBNullTT 
(TT 
ordinalTT 
)TT  
)TT  !
{UU 
valueVV 	
=VV
 
readerVV 
.VV 

GetDecimalVV 
(VV 
ordinalVV %
)VV% &
;VV& '
}WW 
returnXX 	
valueXX
 
;XX 
}YY 
public[[ 
static[[	 
bool[[ 
GetBoolOrDefault[[ %
([[% &
this[[& *
DataTableReader[[+ :
reader[[; A
,[[A B
int[[C F
ordinal[[G N
,[[N O
bool[[P T
defaultValue[[U a
)[[a b
{\\ 
bool]] 
value]] 
=]] 
defaultValue]] 
;]] 
if^^ 
(^^ 
reader^^ 
.^^ 
HasRows^^ 
&&^^ 
!^^ 
reader^^  
.^^  !
IsDBNull^^! )
(^^) *
ordinal^^* 1
)^^1 2
)^^2 3
{__ 
value`` 	
=``
 
reader`` 
.`` 

GetBoolean`` 
(`` 
ordinal`` %
)``% &
;``& '
}cc 
returndd 	
valuedd
 
;dd 
}ee 
publicgg 
staticgg	 
voidgg 
Cleargg 
(gg 
thisgg 
DataRowgg  '
rowgg( +
)gg+ ,
{hh 
forii 
(ii 
intii 
iii 
=ii 
$numii 
;ii 
iii 
<ii 
rowii 
.ii 
Tableii  
.ii  !
Columnsii! (
.ii( )
Countii) .
;ii. /
iii0 1
++ii1 3
)ii3 4
{jj 

DataColumnkk 
columnkk 
=kk 
rowkk 
.kk 
Tablekk !
.kk! "
Columnskk" )
[kk) *
ikk* +
]kk+ ,
;kk, -
ifll 
(ll 
columnll 
.ll 
DefaultValuell 
!=ll 
nullll #
)ll# $
{mm 
ifnn 
(nn 	
!nn	 

columnnn
 
.nn 
ReadOnlynn 
)nn 
{oo 
switchpp 
(pp 
columnpp 
.pp 
DataTypepp 
.pp 
Namepp "
.pp" #
ToLowerpp# *
(pp* +
)pp+ ,
.pp, -
	Substringpp- 6
(pp6 7
$numpp7 8
,pp8 9
$numpp9 :
)pp: ;
)pp; <
{qq 
caserr 
$strrr 
:rr 
caserr 
$strrr 
:rr 
rowss 
[ss 
iss 
]ss 
=ss 
$strss 
;ss 
breaktt 
;tt 
caseuu 
$struu 
:uu 
caseuu 
$struu 
:uu 
caseuu #
$struu$ )
:uu) *
caseuu+ /
$struu0 5
:uu5 6
casevv 
$strvv 
:vv 
casevv 
$strvv 
:vv 
casevv #
$strvv$ )
:vv) *
casevv+ /
$strvv0 5
:vv5 6
rowww 
[ww 
iww 
]ww 
=ww 
$numww 
;ww 
breakxx 
;xx 
caseyy 
$stryy 
:yy 
rowzz 
[zz 
izz 
]zz 
=zz 
falsezz 
;zz 
break{{ 
;{{ 
case|| 
$str|| 
:|| 
row}} 
[}} 
i}} 
]}} 
=}} 
new}} 
DateTime}} 
(}} 
$num}} 
)}}  
;}}  !
break~~ 
;~~ 
case 
$str 
: 
default 
: 
row
ÄÄ 
[
ÄÄ 
i
ÄÄ 
]
ÄÄ 
=
ÄÄ 
DBNull
ÄÄ 
.
ÄÄ 
Value
ÄÄ 
;
ÄÄ 
break
ÅÅ 
;
ÅÅ 
}
ÇÇ 
}
ÉÉ 
else
ÑÑ 	
{
ÖÖ 
throw
ÜÜ 
new
ÜÜ 
	Exception
ÜÜ 
(
ÜÜ 
string
ÜÜ  
.
ÜÜ  !
Format
ÜÜ! '
(
ÜÜ' (
$str
ÜÜ( B
,
ÜÜB C
i
ÜÜD E
)
ÜÜE F
)
ÜÜF G
;
ÜÜG H
}
áá 
}
àà 
else
ââ 
{
ää 
row
ãã 
[
ãã 	
i
ãã	 

]
ãã
 
=
ãã 
column
ãã 
.
ãã 
DefaultValue
ãã !
;
ãã! "
}
åå 
}
çç 
}
éé 
}
èè 
}êê î¨
iD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\ObjectExtensions\ExtendDateTimes.cs
	namespace 	
ObjectExtensions
 
{		 
public

 

static

 
class

 
ExtendDateTimes

 '
{ 
public 
enum 
ScheduleMode  
{ 	
Hourly 
, 
Daily 
, 
Weekly 
, 
FirstDayOfMonth 
, 

NthWeekday 
, 
LastDayOfMonth 
, 

DayOfMonth 
, 
SpecificInterval 
} 	
;	 

public 
enum 
DateCompareState $
{ 	
Equal 
= 
$num 
, 
Earlier 
= 
$num 
, 
Later 
= 
$num 
} 	
;	 

[!! 	
Flags!!	 
]!! 
public"" 
enum"" 
DatePartFlags"" !
{## 	
Ticks$$ 
=$$ 
$num$$ 
,$$ 
Year%% 
=%% 
$num%% 
,%% 
Month&& 
=&& 
$num&& 
,&& 
Day'' 
='' 
$num'' 
,'' 
Hour(( 
=(( 
$num(( 
,(( 
Minute)) 
=)) 
$num)) 
,)) 
Second** 
=** 
$num** 
,** 
Millisecond++ 
=++ 
$num++ 
},, 	
;,,	 

public.. 
static.. 
bool.. 
PartiallyEqual.. )
(..) *
this..* .
DateTime../ 7
then..8 <
,..< =
DateTime..> F
now..G J
,..J K
DatePartFlags..L Y
flags..Z _
=..` a
DatePartFlags..b o
...o p
Ticks..p u
)..u v
{// 	
bool00 
isEqual00 
=00 
false00  
;00  !
if11 
(11 
flags11 
==11 
DatePartFlags11 &
.11& '
Ticks11' ,
)11, -
{22 
isEqual33 
=33 
(33 
now33 
==33 !
then33" &
)33& '
;33' (
}44 
else55 
{66 
StringBuilder77 

compareStr77 (
=77) *
new77+ .
StringBuilder77/ <
(77< =
)77= >
;77> ?

compareStr88 
.88 
Append88 !
(88! "
flags88" '
.88' (
HasFlag88( /
(88/ 0
DatePartFlags880 =
.88= >
Year88> B
)88B C
?88D E
$str88F L
:88M N
$str88O Q
)88Q R
;88R S

compareStr99 
.99 
Append99 !
(99! "
flags99" '
.99' (
HasFlag99( /
(99/ 0
DatePartFlags990 =
.99= >
Month99> C
)99C D
?99E F
$str99G K
:99L M
$str99N P
)99P Q
;99Q R

compareStr:: 
.:: 
Append:: !
(::! "
flags::" '
.::' (
HasFlag::( /
(::/ 0
DatePartFlags::0 =
.::= >
Day::> A
)::A B
?::C D
$str::E I
:::J K
$str::L N
)::N O
;::O P

compareStr;; 
.;; 
Append;; !
(;;! "
flags;;" '
.;;' (
HasFlag;;( /
(;;/ 0
DatePartFlags;;0 =
.;;= >
Hour;;> B
);;B C
?;;D E
$str;;F J
:;;K L
$str;;M O
);;O P
;;;P Q

compareStr<< 
.<< 
Append<< !
(<<! "
flags<<" '
.<<' (
HasFlag<<( /
(<</ 0
DatePartFlags<<0 =
.<<= >
Minute<<> D
)<<D E
?<<F G
$str<<H L
:<<M N
$str<<O Q
)<<Q R
;<<R S

compareStr== 
.== 
Append== !
(==! "
flags==" '
.==' (
HasFlag==( /
(==/ 0
DatePartFlags==0 =
.=== >
Second==> D
)==D E
?==F G
$str==H L
:==M N
$str==O Q
)==Q R
;==R S

compareStr>> 
.>> 
Append>> !
(>>! "
flags>>" '
.>>' (
HasFlag>>( /
(>>/ 0
DatePartFlags>>0 =
.>>= >
Millisecond>>> I
)>>I J
?>>K L
$str>>M R
:>>S T
$str>>U W
)>>W X
;>>X Y
isEqual?? 
=?? 
now?? 
.?? 
ConvertToInt64?? ,
(??, -

compareStr??- 7
.??7 8
ToString??8 @
(??@ A
)??A B
)??B C
==??D F
then??G K
.??K L
ConvertToInt64??L Z
(??Z [

compareStr??[ e
.??e f
ToString??f n
(??n o
)??o p
)??p q
;??q r
}@@ 
returnAA 
isEqualAA 
;AA 
}BB 	
publicDD 
staticDD 
DateCompareStateDD &
CompareDatesExternDD' 9
(DD9 :
DateTimeDD: B
thisDateDDC K
,DDK L
DateTimeDDM U
thatDateDDV ^
,DD^ _
boolDD` d
includeTimeDDe p
=DDq r
falseDDs x
,DDx y
DatePartFlags	DDz á
	timeFlags
DDà ë
=
DDí ì
DatePartFlags
DDî °
.
DD° ¢
Hour
DD¢ ¶
|
DDß ®
DatePartFlags
DD© ∂
.
DD∂ ∑
Minute
DD∑ Ω
)
DDΩ æ
{EE 	
returnFF 
thisDateFF 
.FF 
CompareDatesFF (
(FF( )
thatDateFF) 1
,FF1 2
includeTimeFF3 >
,FF> ?
	timeFlagsFF@ I
)FFI J
;FFJ K
}GG 	
publicII 
staticII 
DateCompareStateII &
CompareDatesII' 3
(II3 4
thisII4 8
DateTimeII9 A
thisDateIIB J
,IIJ K
DateTimeIIL T
thatDateIIU ]
,II] ^
boolII_ c
includeTimeIId o
=IIp q
falseIIr w
,IIw x
DatePartFlags	IIy Ü
	timeFlags
IIá ê
=
IIë í
DatePartFlags
IIì †
.
II† °
Hour
II° •
|
II¶ ß
DatePartFlags
II® µ
.
IIµ ∂
Minute
II∂ º
)
IIº Ω
{JJ 	
DateCompareStateKK 
stateKK "
=KK# $
DateCompareStateKK% 5
.KK5 6
EqualKK6 ;
;KK; <
TimeSpanMM 
thisTimeMM 
=MM 
(MM  !
includeTimeMM! ,
)MM, -
?MM. /
newMM0 3
TimeSpanMM4 <
(MM< =
	timeFlagsMM= F
.MMF G
HasFlagMMG N
(MMN O
DatePartFlagsMMO \
.MM\ ]
HourMM] a
)MMa b
?MMc d
thisDateMMe m
.MMm n
HourMMn r
:MMs t
$numMMu v
,MMv w
	timeFlagsNN@ I
.NNI J
HasFlagNNJ Q
(NNQ R
DatePartFlagsNNR _
.NN_ `
MinuteNN` f
)NNf g
?NNh i
thisDateNNj r
.NNr s
MinuteNNs y
:NNz {
$numNN| }
,NN} ~
	timeFlagsOO@ I
.OOI J
HasFlagOOJ Q
(OOQ R
DatePartFlagsOOR _
.OO_ `
SecondOO` f
)OOf g
?OOh i
thisDateOOj r
.OOr s
SecondOOs y
:OOz {
$numOO| }
,OO} ~
	timeFlagsPP@ I
.PPI J
HasFlagPPJ Q
(PPQ R
DatePartFlagsPPR _
.PP_ `
MillisecondPP` k
)PPk l
?PPm n
thatDatePPo w
.PPw x
Millisecond	PPx É
:
PPÑ Ö
$num
PPÜ á
)
PPá à
:QQ0 1
newQQ2 5
TimeSpanQQ6 >
(QQ> ?
$numQQ? @
)QQ@ A
;QQA B
TimeSpanRR 
thatTimeRR 
=RR 
(RR  !
includeTimeRR! ,
)RR, -
?RR. /
newRR0 3
TimeSpanRR4 <
(RR< =
	timeFlagsRR= F
.RRF G
HasFlagRRG N
(RRN O
DatePartFlagsRRO \
.RR\ ]
HourRR] a
)RRa b
?RRc d
thatDateRRe m
.RRm n
HourRRn r
:RRs t
$numRRu v
,RRv w
	timeFlagsSS@ I
.SSI J
HasFlagSSJ Q
(SSQ R
DatePartFlagsSSR _
.SS_ `
MinuteSS` f
)SSf g
?SSh i
thatDateSSj r
.SSr s
MinuteSSs y
:SSz {
$numSS| }
,SS} ~
	timeFlagsTT@ I
.TTI J
HasFlagTTJ Q
(TTQ R
DatePartFlagsTTR _
.TT_ `
SecondTT` f
)TTf g
?TTh i
thatDateTTj r
.TTr s
SecondTTs y
:TTz {
$numTT| }
,TT} ~
	timeFlagsUU@ I
.UUI J
HasFlagUUJ Q
(UUQ R
DatePartFlagsUUR _
.UU_ `
MillisecondUU` k
)UUk l
?UUm n
thatDateUUo w
.UUw x
Millisecond	UUx É
:
UUÑ Ö
$num
UUÜ á
)
UUá à
:VV0 1
newVV2 5
TimeSpanVV6 >
(VV> ?
$numVV? @
)VV@ A
;VVA B
thisDateXX 
=XX 
thisDateXX 
.XX  
SetTimeXX  '
(XX' (
thisTimeXX( 0
)XX0 1
;XX1 2
thatDateYY 
=YY 
thatDateYY 
.YY  
SetTimeYY  '
(YY' (
thatTimeYY( 0
)YY0 1
;YY1 2
long[[ 
	thisValue[[ 
=[[ 
thisDate[[ %
.[[% &
Ticks[[& +
;[[+ ,
long\\ 
	thatValue\\ 
=\\ 
thatDate\\ %
.\\% &
Ticks\\& +
;\\+ ,
if^^ 
(^^ 
	thisValue^^ 
<^^ 
	thatValue^^ %
)^^% &
{__ 
state`` 
=`` 
DateCompareState`` (
.``( )
Earlier``) 0
;``0 1
}aa 
elsebb 
{cc 
ifdd 
(dd 
	thisValuedd 
>dd 
	thatValuedd  )
)dd) *
{ee 
stateff 
=ff 
DateCompareStateff ,
.ff, -
Laterff- 2
;ff2 3
}gg 
}hh 
returnii 
stateii 
;ii 
}jj 	
publicll 
staticll 
DateTimell 
Highestll &
(ll& '
thisll' +
DateTimell, 4
datell5 9
,ll9 :
DateTimell; C
thatDatellD L
)llL M
{mm 	
DateTimeoo 
resultoo 
=oo 
newoo !
DateTimeoo" *
(oo* +
Mathoo+ /
.oo/ 0
Maxoo0 3
(oo3 4
dateoo4 8
.oo8 9
Ticksoo9 >
,oo> ?
thatDateoo@ H
.ooH I
TicksooI N
)ooN O
)ooO P
;ooP Q
returnpp 
resultpp 
;pp 
}qq 	
publicss 
staticss 
DateTimess 
Lowestss %
(ss% &
thisss& *
DateTimess+ 3
datess4 8
,ss8 9
DateTimess: B
thatDatessC K
)ssK L
{tt 	
DateTimevv 
resultvv 
=vv 
newvv !
DateTimevv" *
(vv* +
Mathvv+ /
.vv/ 0
Minvv0 3
(vv3 4
datevv4 8
.vv8 9
Ticksvv9 >
,vv> ?
thatDatevv@ H
.vvH I
TicksvvI N
)vvN O
)vvO P
;vvP Q
returnww 
resultww 
;ww 
}xx 	
publiczz 
staticzz 
intzz 
DateDiffzz "
(zz" #
thiszz# '
DateTimezz( 0
datezz1 5
,zz5 6
DateTimezz7 ?
thatDatezz@ H
,zzH I
DatePartFlagszzJ W
datePartzzX `
)zz` a
{{{ 	
int|| 
result|| 
=|| 
$num|| 
;|| 
switch}} 
(}} 
datePart}} 
)}} 
{~~ 
case 
DatePartFlags "
." #
Day# &
:& '
result
ÄÄ 
=
ÄÄ 
(
ÄÄ 
int
ÄÄ !
)
ÄÄ! "
(
ÄÄ" #
(
ÄÄ# $
date
ÄÄ$ (
.
ÄÄ( )
Date
ÄÄ) -
-
ÄÄ. /
thatDate
ÄÄ0 8
.
ÄÄ8 9
Date
ÄÄ9 =
)
ÄÄ= >
.
ÄÄ> ?
	TotalDays
ÄÄ? H
)
ÄÄH I
;
ÄÄI J
break
ÅÅ 
;
ÅÅ 
case
ÇÇ 
DatePartFlags
ÇÇ "
.
ÇÇ" #
Month
ÇÇ# (
:
ÇÇ( )
result
ÉÉ 
=
ÉÉ 
Math
ÉÉ !
.
ÉÉ! "
Abs
ÉÉ" %
(
ÉÉ% &
(
ÉÉ& '
(
ÉÉ' (
date
ÉÉ( ,
.
ÉÉ, -
Year
ÉÉ- 1
*
ÉÉ2 3
$num
ÉÉ4 6
)
ÉÉ6 7
+
ÉÉ8 9
date
ÉÉ: >
.
ÉÉ> ?
Month
ÉÉ? D
)
ÉÉD E
-
ÉÉF G
(
ÉÉH I
(
ÉÉI J
thatDate
ÉÉJ R
.
ÉÉR S
Year
ÉÉS W
*
ÉÉX Y
$num
ÉÉZ \
)
ÉÉ\ ]
+
ÉÉ^ _
thatDate
ÉÉ` h
.
ÉÉh i
Month
ÉÉi n
)
ÉÉn o
)
ÉÉo p
;
ÉÉp q
break
ÑÑ 
;
ÑÑ 
case
ÖÖ 
DatePartFlags
ÖÖ "
.
ÖÖ" #
Year
ÖÖ# '
:
ÖÖ' (
result
ÜÜ 
=
ÜÜ 
Math
ÜÜ !
.
ÜÜ! "
Abs
ÜÜ" %
(
ÜÜ% &
date
ÜÜ& *
.
ÜÜ* +
Year
ÜÜ+ /
-
ÜÜ0 1
thatDate
ÜÜ2 :
.
ÜÜ: ;
Year
ÜÜ; ?
)
ÜÜ? @
;
ÜÜ@ A
break
áá 
;
áá 
}
àà 
return
ââ 
result
ââ 
;
ââ 
}
ää 	
public
åå 
static
åå 
bool
åå 
	IsBetween
åå $
(
åå$ %
this
åå% )
DateTime
åå* 2
date
åå3 7
,
åå7 8
DateTime
åå9 A
start
ååB G
,
ååG H
DateTime
ååI Q
end
ååR U
,
ååU V
bool
ååW [
	inclusive
åå\ e
)
ååe f
{
çç 	
bool
éé 
result
éé 
=
éé 
false
éé 
;
éé  
DateTime
èè 
d1
èè 
=
èè 
start
èè 
.
èè  
Lowest
èè  &
(
èè& '
end
èè' *
)
èè* +
;
èè+ ,
DateTime
êê 
d2
êê 
=
êê 
start
êê 
.
êê  
Highest
êê  '
(
êê' (
end
êê( +
)
êê+ ,
;
êê, -
if
ëë 
(
ëë 
	inclusive
ëë 
)
ëë 
{
íí 
result
ìì 
=
ìì 
(
ìì 
date
ìì 
>=
ìì !
d1
ìì" $
&&
ìì% '
date
ìì( ,
<=
ìì- /
d2
ìì0 2
)
ìì2 3
;
ìì3 4
}
îî 
else
ïï 
{
ññ 
result
óó 
=
óó 
(
óó 
date
óó 
==
óó !
d1
óó" $
&&
óó% '
date
óó( ,
==
óó- /
d2
óó0 2
)
óó2 3
;
óó3 4
}
òò 
return
ôô 
result
ôô 
;
ôô 
}
öö 	
private
†† 
static
†† 
int
†† "
fiscalYearStartMonth
†† /
=
††0 1
$num
††2 4
;
††4 5
public
¢¢ 
static
¢¢ 
int
¢¢ "
FiscalYearStartMonth
¢¢ .
{
££ 	
get
§§ 
{
§§ 
return
§§ 
ExtendDateTimes
§§ (
.
§§( )"
fiscalYearStartMonth
§§) =
;
§§= >
}
§§? @
set
•• 
{
•• 
ExtendDateTimes
•• !
.
••! ""
fiscalYearStartMonth
••" 6
=
••7 8
value
••9 >
;
••> ?
}
••@ A
}
¶¶ 	
public
®® 
static
®® 
DateTime
®® 
ToFiscalDate
®® +
(
®®+ ,
this
®®, 0
DateTime
®®1 9
thisDate
®®: B
,
®®B C
int
®®D G
fiscalStartMonth
®®H X
)
®®X Y
{
©© 	
ExtendDateTimes
™™ 
.
™™ "
fiscalYearStartMonth
™™ 0
=
™™1 2
fiscalStartMonth
™™3 C
;
™™C D
return
´´ 
thisDate
´´ 
.
´´ 
ToFiscalDate
´´ (
(
´´( )
)
´´) *
;
´´* +
}
¨¨ 	
public
ÆÆ 
static
ÆÆ 
DateTime
ÆÆ 
FromFiscalDate
ÆÆ -
(
ÆÆ- .
this
ÆÆ. 2
DateTime
ÆÆ3 ;
thisDate
ÆÆ< D
,
ÆÆD E
int
ÆÆF I
fiscalStartMonth
ÆÆJ Z
)
ÆÆZ [
{
ØØ 	
ExtendDateTimes
∞∞ 
.
∞∞ "
fiscalYearStartMonth
∞∞ 0
=
∞∞1 2
fiscalStartMonth
∞∞3 C
;
∞∞C D
return
±± 
thisDate
±± 
.
±± 
FromFiscalDate
±± *
(
±±* +
)
±±+ ,
;
±±, -
}
≤≤ 	
public
¥¥ 
static
¥¥ 
DateTime
¥¥ 
ToFiscalDate
¥¥ +
(
¥¥+ ,
this
¥¥, 0
DateTime
¥¥1 9
thisDate
¥¥: B
)
¥¥B C
{
µµ 	
DateTime
∂∂ 
newDate
∂∂ 
=
∂∂ 
new
∂∂ "
DateTime
∂∂# +
(
∂∂+ ,
$num
∂∂, -
)
∂∂- .
;
∂∂. /
try
∑∑ 
{
∏∏ 
newDate
ππ 
=
ππ 
thisDate
ππ "
.
ππ" #
	AddMonths
ππ# ,
(
ππ, -
$num
ππ- /
-
ππ0 1
ExtendDateTimes
ππ2 A
.
ππA B"
fiscalYearStartMonth
ππB V
)
ππV W
;
ππW X
}
∫∫ 
catch
ªª 
(
ªª 
	Exception
ªª 
)
ªª 
{
ºº 
}
ΩΩ 
return
ææ 
newDate
ææ 
;
ææ 
}
øø 	
public
¡¡ 
static
¡¡ 
DateTime
¡¡ 
FromFiscalDate
¡¡ -
(
¡¡- .
this
¡¡. 2
DateTime
¡¡3 ;
thisDate
¡¡< D
)
¡¡D E
{
¬¬ 	
DateTime
√√ 
newDate
√√ 
=
√√ 
new
√√ "
DateTime
√√# +
(
√√+ ,
$num
√√, -
)
√√- .
;
√√. /
try
ƒƒ 
{
≈≈ 
newDate
∆∆ 
=
∆∆ 
thisDate
∆∆ "
.
∆∆" #
	AddMonths
∆∆# ,
(
∆∆, -
-
∆∆- .
(
∆∆. /
$num
∆∆/ 1
-
∆∆2 3
ExtendDateTimes
∆∆4 C
.
∆∆C D"
fiscalYearStartMonth
∆∆D X
)
∆∆X Y
)
∆∆Y Z
;
∆∆Z [
}
«« 
catch
»» 
(
»» 
	Exception
»» 
)
»» 
{
…… 
}
   
return
ÀÀ 
newDate
ÀÀ 
;
ÀÀ 
}
ÃÃ 	
public
““ 
static
““ 
int
““ 
LastDayOfMonth
““ (
(
““( )
this
““) -
DateTime
““. 6
thisDate
““7 ?
)
““? @
{
”” 	
int
‘‘ 
lastDay
‘‘ 
=
‘‘ 
thisDate
‘‘ "
.
‘‘" #
	AddMonths
‘‘# ,
(
‘‘, -
$num
‘‘- .
)
‘‘. /
.
‘‘/ 0
AddDays
‘‘0 7
(
‘‘7 8
-
‘‘8 9
$num
‘‘9 :
)
‘‘: ;
.
‘‘; <
Day
‘‘< ?
;
‘‘? @
return
’’ 
lastDay
’’ 
;
’’ 
}
÷÷ 	
public
ÿÿ 
static
ÿÿ 
DateTime
ÿÿ 
SetDay
ÿÿ %
(
ÿÿ% &
this
ÿÿ& *
DateTime
ÿÿ+ 3
thisDate
ÿÿ4 <
,
ÿÿ< =
int
ÿÿ> A
year
ÿÿB F
,
ÿÿF G
int
ÿÿH K
month
ÿÿL Q
,
ÿÿQ R
int
ÿÿS V
day
ÿÿW Z
,
ÿÿZ [
bool
ÿÿ\ `
zeroTime
ÿÿa i
=
ÿÿj k
false
ÿÿl q
)
ÿÿq r
{
ŸŸ 	
if
⁄⁄ 
(
⁄⁄ 
year
⁄⁄ 
<
⁄⁄ 
$num
⁄⁄ 
||
⁄⁄ 
year
⁄⁄  
>
⁄⁄! "
DateTime
⁄⁄# +
.
⁄⁄+ ,
MaxValue
⁄⁄, 4
.
⁄⁄4 5
Year
⁄⁄5 9
)
⁄⁄9 :
{
€€ 
throw
‹‹ 
new
‹‹ '
InvalidOperationException
‹‹ 3
(
‹‹3 4
$str
‹‹4 F
)
‹‹F G
;
‹‹G H
}
›› 
if
ﬁﬁ 
(
ﬁﬁ 
month
ﬁﬁ 
<
ﬁﬁ 
$num
ﬁﬁ 
||
ﬁﬁ 
month
ﬁﬁ "
>
ﬁﬁ# $
$num
ﬁﬁ% '
)
ﬁﬁ' (
{
ﬂﬂ 
throw
‡‡ 
new
‡‡ '
InvalidOperationException
‡‡ 3
(
‡‡3 4
$str
‡‡4 Q
)
‡‡Q R
;
‡‡R S
}
·· 
int
‚‚ 
lastDay
‚‚ 
=
‚‚ 
new
‚‚ 
DateTime
‚‚ &
(
‚‚& '
year
‚‚' +
,
‚‚+ ,
month
‚‚- 2
,
‚‚2 3
$num
‚‚4 5
)
‚‚5 6
.
‚‚6 7
LastDayOfMonth
‚‚7 E
(
‚‚E F
)
‚‚F G
;
‚‚G H
if
„„ 
(
„„ 
day
„„ 
<
„„ 
$num
„„ 
||
„„ 
day
„„ 
>
„„  
lastDay
„„! (
)
„„( )
{
‰‰ 
throw
ÂÂ 
new
ÂÂ '
InvalidOperationException
ÂÂ 3
(
ÂÂ3 4
string
ÂÂ4 :
.
ÂÂ: ;
Format
ÂÂ; A
(
ÂÂA B
$str
ÂÂB ^
,
ÂÂ^ _
lastDay
ÂÂ` g
)
ÂÂg h
)
ÂÂh i
;
ÂÂi j
}
ÊÊ 
DateTime
ËË 
newDate
ËË 
=
ËË 
thisDate
ËË '
;
ËË' (
newDate
ÈÈ 
=
ÈÈ 
newDate
ÈÈ 
.
ÈÈ 
SetYear
ÈÈ %
(
ÈÈ% &
year
ÈÈ& *
)
ÈÈ* +
;
ÈÈ+ ,
newDate
ÍÍ 
=
ÍÍ 
newDate
ÍÍ 
.
ÍÍ 
SetMonth
ÍÍ &
(
ÍÍ& '
month
ÍÍ' ,
)
ÍÍ, -
;
ÍÍ- .
newDate
ÎÎ 
=
ÎÎ 
newDate
ÎÎ 
.
ÎÎ 
SetDay
ÎÎ $
(
ÎÎ$ %
day
ÎÎ% (
)
ÎÎ( )
;
ÎÎ) *
if
ÏÏ 
(
ÏÏ 
zeroTime
ÏÏ 
)
ÏÏ 
{
ÌÌ 
newDate
ÓÓ 
=
ÓÓ 
newDate
ÓÓ !
.
ÓÓ! "
Date
ÓÓ" &
;
ÓÓ& '
}
ÔÔ 
return
 
newDate
 
;
 
}
ÒÒ 	
public
ÛÛ 
static
ÛÛ 
DateTime
ÛÛ 
SetDay
ÛÛ %
(
ÛÛ% &
this
ÛÛ& *
DateTime
ÛÛ+ 3
thisDate
ÛÛ4 <
,
ÛÛ< =
int
ÛÛ> A
day
ÛÛB E
)
ÛÛE F
{
ÙÙ 	
int
ıı 
lastDay
ıı 
=
ıı 
thisDate
ıı "
.
ıı" #
DaysInMonth
ıı# .
(
ıı. /
)
ıı/ 0
;
ıı0 1
if
ˆˆ 
(
ˆˆ 
day
ˆˆ 
<
ˆˆ 
$num
ˆˆ 
||
ˆˆ 
day
ˆˆ 
>
ˆˆ  
lastDay
ˆˆ! (
)
ˆˆ( )
{
˜˜ 
throw
¯¯ 
new
¯¯ 
ArgumentException
¯¯ +
(
¯¯+ ,
string
¯¯, 2
.
¯¯2 3
Format
¯¯3 9
(
¯¯9 :
$str
¯¯: h
,
¯¯h i
day
¯¯j m
)
¯¯m n
)
¯¯n o
;
¯¯o p
}
˘˘ 
return
˙˙ 
(
˙˙ 
new
˙˙ 
DateTime
˙˙  
(
˙˙  !
thisDate
˙˙! )
.
˙˙) *
Year
˙˙* .
,
˙˙. /
thisDate
˙˙0 8
.
˙˙8 9
Month
˙˙9 >
,
˙˙> ?
day
˙˙@ C
,
˙˙C D
thisDate
˙˙E M
.
˙˙M N
Hour
˙˙N R
,
˙˙R S
thisDate
˙˙T \
.
˙˙\ ]
Minute
˙˙] c
,
˙˙c d
thisDate
˙˙e m
.
˙˙m n
Second
˙˙n t
,
˙˙t u
thisDate
˙˙v ~
.
˙˙~ 
Millisecond˙˙ ä
,˙˙ä ã
thisDate˙˙å î
.˙˙î ï
Kind˙˙ï ô
)˙˙ô ö
)˙˙ö õ
;˙˙õ ú
}
˚˚ 	
public
˝˝ 
static
˝˝ 
DateTime
˝˝ 
SetMonth
˝˝ '
(
˝˝' (
this
˝˝( ,
DateTime
˝˝- 5
thisDate
˝˝6 >
,
˝˝> ?
int
˝˝@ C
month
˝˝D I
)
˝˝I J
{
˛˛ 	
if
ˇˇ 
(
ˇˇ 
month
ˇˇ 
<
ˇˇ 
$num
ˇˇ 
||
ˇˇ 
month
ˇˇ "
>
ˇˇ# $
$num
ˇˇ% '
)
ˇˇ' (
{
ÄÄ 
throw
ÅÅ 
new
ÅÅ 
ArgumentException
ÅÅ +
(
ÅÅ+ ,
string
ÅÅ, 2
.
ÅÅ2 3
Format
ÅÅ3 9
(
ÅÅ9 :
$str
ÅÅ: j
,
ÅÅj k
month
ÅÅl q
)
ÅÅq r
)
ÅÅr s
;
ÅÅs t
}
ÇÇ 
return
ÉÉ 
(
ÉÉ 
new
ÉÉ 
DateTime
ÉÉ  
(
ÉÉ  !
thisDate
ÉÉ! )
.
ÉÉ) *
Year
ÉÉ* .
,
ÉÉ. /
month
ÉÉ0 5
,
ÉÉ5 6
thisDate
ÉÉ7 ?
.
ÉÉ? @
Day
ÉÉ@ C
,
ÉÉC D
thisDate
ÉÉE M
.
ÉÉM N
Hour
ÉÉN R
,
ÉÉR S
thisDate
ÉÉT \
.
ÉÉ\ ]
Minute
ÉÉ] c
,
ÉÉc d
thisDate
ÉÉe m
.
ÉÉm n
Second
ÉÉn t
,
ÉÉt u
thisDate
ÉÉv ~
.
ÉÉ~ 
MillisecondÉÉ ä
,ÉÉä ã
thisDateÉÉå î
.ÉÉî ï
KindÉÉï ô
)ÉÉô ö
)ÉÉö õ
;ÉÉõ ú
}
ÑÑ 	
public
ÜÜ 
static
ÜÜ 
DateTime
ÜÜ 
SetYear
ÜÜ &
(
ÜÜ& '
this
ÜÜ' +
DateTime
ÜÜ, 4
thisDate
ÜÜ5 =
,
ÜÜ= >
int
ÜÜ? B
year
ÜÜC G
)
ÜÜG H
{
áá 	
if
àà 
(
àà 
year
àà 
<
àà 
$num
àà 
||
àà 
year
àà  
>
àà! "
DateTime
àà# +
.
àà+ ,
MaxValue
àà, 4
.
àà4 5
Year
àà5 9
)
àà9 :
{
ââ 
throw
ää 
new
ää 
ArgumentException
ää +
(
ää+ ,
string
ää, 2
.
ää2 3
Format
ää3 9
(
ää9 :
$str
ää: i
,
ääi j
year
ääk o
)
ääo p
)
ääp q
;
ääq r
}
ãã 
return
åå 
(
åå 
new
åå 
DateTime
åå  
(
åå  !
year
åå! %
,
åå% &
thisDate
åå' /
.
åå/ 0
Month
åå0 5
,
åå5 6
thisDate
åå7 ?
.
åå? @
Day
åå@ C
,
ååC D
thisDate
ååE M
.
ååM N
Hour
ååN R
,
ååR S
thisDate
ååT \
.
åå\ ]
Minute
åå] c
,
ååc d
thisDate
ååe m
.
ååm n
Second
åån t
,
ååt u
thisDate
ååv ~
.
åå~ 
Millisecondåå ä
,ååä ã
thisDateååå î
.ååî ï
Kindååï ô
)ååô ö
)ååö õ
;ååõ ú
}
çç 	
public
èè 
static
èè 
DateTime
èè 
SetHour
èè &
(
èè& '
this
èè' +
DateTime
èè, 4
thisDate
èè5 =
,
èè= >
int
èè? B
hour
èèC G
)
èèG H
{
êê 	
if
ëë 
(
ëë 
hour
ëë 
<
ëë 
$num
ëë 
||
ëë 
hour
ëë  
>
ëë! "
$num
ëë# %
)
ëë% &
{
íí 
throw
ìì 
new
ìì 
ArgumentException
ìì +
(
ìì+ ,
string
ìì, 2
.
ìì2 3
Format
ìì3 9
(
ìì9 :
$str
ìì: i
,
ììi j
hour
ììk o
)
ììo p
)
ììp q
;
ììq r
}
îî 
return
ïï 
(
ïï 
new
ïï 
DateTime
ïï  
(
ïï  !
thisDate
ïï! )
.
ïï) *
Year
ïï* .
,
ïï. /
thisDate
ïï0 8
.
ïï8 9
Month
ïï9 >
,
ïï> ?
thisDate
ïï@ H
.
ïïH I
Day
ïïI L
,
ïïL M
hour
ïïN R
,
ïïR S
thisDate
ïïT \
.
ïï\ ]
Minute
ïï] c
,
ïïc d
thisDate
ïïe m
.
ïïm n
Second
ïïn t
,
ïït u
thisDate
ïïv ~
.
ïï~ 
Millisecondïï ä
,ïïä ã
thisDateïïå î
.ïïî ï
Kindïïï ô
)ïïô ö
)ïïö õ
;ïïõ ú
}
ññ 	
public
òò 
static
òò 
DateTime
òò 
	SetMinute
òò (
(
òò( )
this
òò) -
DateTime
òò. 6
thisDate
òò7 ?
,
òò? @
int
òòA D
minute
òòE K
)
òòK L
{
ôô 	
if
öö 
(
öö 
minute
öö 
<
öö 
$num
öö 
||
öö 
minute
öö $
>
öö% &
$num
öö' )
)
öö) *
{
õõ 
throw
úú 
new
úú 
ArgumentException
úú +
(
úú+ ,
string
úú, 2
.
úú2 3
Format
úú3 9
(
úú9 :
$str
úú: k
,
úúk l
minute
úúm s
)
úús t
)
úút u
;
úúu v
}
ùù 
return
ûû 
(
ûû 
new
ûû 
DateTime
ûû  
(
ûû  !
thisDate
ûû! )
.
ûû) *
Year
ûû* .
,
ûû. /
thisDate
ûû0 8
.
ûû8 9
Month
ûû9 >
,
ûû> ?
thisDate
ûû@ H
.
ûûH I
Day
ûûI L
,
ûûL M
thisDate
ûûN V
.
ûûV W
Hour
ûûW [
,
ûû[ \
minute
ûû] c
,
ûûc d
thisDate
ûûe m
.
ûûm n
Second
ûûn t
,
ûût u
thisDate
ûûv ~
.
ûû~ 
Millisecondûû ä
,ûûä ã
thisDateûûå î
.ûûî ï
Kindûûï ô
)ûûô ö
)ûûö õ
;ûûõ ú
}
üü 	
public
°° 
static
°° 
DateTime
°° 
	SetSecond
°° (
(
°°( )
this
°°) -
DateTime
°°. 6
thisDate
°°7 ?
,
°°? @
int
°°A D
second
°°E K
)
°°K L
{
¢¢ 	
if
££ 
(
££ 
second
££ 
<
££ 
$num
££ 
||
££ 
second
££ $
>
££% &
$num
££' )
)
££) *
{
§§ 
throw
•• 
new
•• 
ArgumentException
•• +
(
••+ ,
string
••, 2
.
••2 3
Format
••3 9
(
••9 :
$str
••: k
,
••k l
second
••m s
)
••s t
)
••t u
;
••u v
}
¶¶ 
return
ßß 
(
ßß 
new
ßß 
DateTime
ßß  
(
ßß  !
thisDate
ßß! )
.
ßß) *
Year
ßß* .
,
ßß. /
thisDate
ßß0 8
.
ßß8 9
Month
ßß9 >
,
ßß> ?
thisDate
ßß@ H
.
ßßH I
Day
ßßI L
,
ßßL M
thisDate
ßßN V
.
ßßV W
Hour
ßßW [
,
ßß[ \
thisDate
ßß] e
.
ßße f
Minute
ßßf l
,
ßßl m
second
ßßn t
,
ßßt u
thisDate
ßßv ~
.
ßß~ 
Millisecondßß ä
,ßßä ã
thisDateßßå î
.ßßî ï
Kindßßï ô
)ßßô ö
)ßßö õ
;ßßõ ú
}
®® 	
public
™™ 
static
™™ 
DateTime
™™ 
SetMillisecond
™™ -
(
™™- .
this
™™. 2
DateTime
™™3 ;
thisDate
™™< D
,
™™D E
int
™™F I
millisecond
™™J U
)
™™U V
{
´´ 	
if
¨¨ 
(
¨¨ 
millisecond
¨¨ 
<
¨¨ 
$num
¨¨ 
||
¨¨  "
millisecond
¨¨# .
>
¨¨/ 0
$num
¨¨1 4
)
¨¨4 5
{
≠≠ 
throw
ÆÆ 
new
ÆÆ 
ArgumentException
ÆÆ +
(
ÆÆ+ ,
string
ÆÆ, 2
.
ÆÆ2 3
Format
ÆÆ3 9
(
ÆÆ9 :
$str
ÆÆ: p
,
ÆÆp q
millisecond
ÆÆr }
)
ÆÆ} ~
)
ÆÆ~ 
;ÆÆ Ä
}
ØØ 
return
∞∞ 
(
∞∞ 
new
∞∞ 
DateTime
∞∞  
(
∞∞  !
thisDate
∞∞! )
.
∞∞) *
Year
∞∞* .
,
∞∞. /
thisDate
∞∞0 8
.
∞∞8 9
Month
∞∞9 >
,
∞∞> ?
thisDate
∞∞@ H
.
∞∞H I
Day
∞∞I L
,
∞∞L M
thisDate
∞∞N V
.
∞∞V W
Hour
∞∞W [
,
∞∞[ \
thisDate
∞∞] e
.
∞∞e f
Minute
∞∞f l
,
∞∞l m
thisDate
∞∞n v
.
∞∞v w
Second
∞∞w }
,
∞∞} ~
millisecond∞∞ ä
,∞∞ä ã
thisDate∞∞å î
.∞∞î ï
Kind∞∞ï ô
)∞∞ô ö
)∞∞ö õ
;∞∞õ ú
}
±± 	
public
≥≥ 
static
≥≥ 
DateTime
≥≥ 
ZeroSeconds
≥≥ *
(
≥≥* +
this
≥≥+ /
DateTime
≥≥0 8
thisDate
≥≥9 A
)
≥≥A B
{
¥¥ 	
return
µµ 
(
µµ 
new
µµ 
DateTime
µµ  
(
µµ  !
thisDate
µµ! )
.
µµ) *
Year
µµ* .
,
µµ. /
thisDate
µµ0 8
.
µµ8 9
Month
µµ9 >
,
µµ> ?
thisDate
µµ@ H
.
µµH I
Day
µµI L
,
µµL M
thisDate
µµN V
.
µµV W
Hour
µµW [
,
µµ[ \
thisDate
µµ] e
.
µµe f
Minute
µµf l
,
µµl m
$num
µµn o
,
µµo p
$num
µµq r
,
µµr s
thisDate
µµt |
.
µµ| }
Kindµµ} Å
)µµÅ Ç
)µµÇ É
;µµÉ Ñ
}
∂∂ 	
public
∏∏ 
static
∏∏ 
DateTime
∏∏ 
ZeroTime
∏∏ '
(
∏∏' (
this
∏∏( ,
DateTime
∏∏- 5
thisDate
∏∏6 >
)
∏∏> ?
{
ππ 	
return
ªª 
thisDate
ªª 
.
ªª 
Date
ªª  
;
ªª  !
}
ºº 	
public
ææ 
static
ææ 
DateTime
ææ 
SetTime
ææ &
(
ææ& '
this
ææ' +
DateTime
ææ, 4
thisDate
ææ5 =
,
ææ= >
TimeSpan
ææ? G
span
ææH L
)
ææL M
{
øø 	
if
¿¿ 
(
¿¿ 
span
¿¿ 
==
¿¿ 
null
¿¿ 
)
¿¿ 
{
¡¡ 
throw
¬¬ 
new
¬¬ #
ArgumentNullException
¬¬ /
(
¬¬/ 0
$str
¬¬0 >
)
¬¬> ?
;
¬¬? @
}
√√ 
return
ƒƒ 
(
ƒƒ 
new
ƒƒ 
DateTime
ƒƒ  
(
ƒƒ  !
thisDate
ƒƒ! )
.
ƒƒ) *
Year
ƒƒ* .
,
ƒƒ. /
thisDate
ƒƒ0 8
.
ƒƒ8 9
Month
ƒƒ9 >
,
ƒƒ> ?
thisDate
ƒƒ@ H
.
ƒƒH I
Day
ƒƒI L
,
ƒƒL M
span
ƒƒN R
.
ƒƒR S
Hours
ƒƒS X
,
ƒƒX Y
span
ƒƒZ ^
.
ƒƒ^ _
Minutes
ƒƒ_ f
,
ƒƒf g
span
ƒƒh l
.
ƒƒl m
Seconds
ƒƒm t
,
ƒƒt u
span
ƒƒv z
.
ƒƒz {
Millisecondsƒƒ{ á
,ƒƒá à
thisDateƒƒâ ë
.ƒƒë í
Kindƒƒí ñ
)ƒƒñ ó
)ƒƒó ò
;ƒƒò ô
}
≈≈ 	
public
«« 
static
«« 
DateTime
«« 
SetTime
«« &
(
««& '
this
««' +
DateTime
««, 4
thisDate
««5 =
,
««= >
int
««? B
hours
««C H
,
««H I
int
««J M
mins
««N R
,
««R S
int
««T W
secs
««X \
=
««] ^
$num
««_ `
,
««` a
int
««b e
	millisecs
««f o
=
««p q
$num
««r s
)
««s t
{
»» 	
if
…… 
(
…… 
hours
…… 
>
…… 
$num
…… 
)
…… 
{
   
throw
ÀÀ 
new
ÀÀ '
InvalidOperationException
ÀÀ 3
(
ÀÀ3 4
$str
ÀÀ4 I
)
ÀÀI J
;
ÀÀJ K
}
ÃÃ 
if
ÕÕ 
(
ÕÕ 
mins
ÕÕ 
>
ÕÕ 
$num
ÕÕ 
)
ÕÕ 
{
ŒŒ 
throw
œœ 
new
œœ '
InvalidOperationException
œœ 3
(
œœ3 4
$str
œœ4 K
)
œœK L
;
œœL M
}
–– 
if
—— 
(
—— 
secs
—— 
>
—— 
$num
—— 
)
—— 
{
““ 
throw
”” 
new
”” '
InvalidOperationException
”” 3
(
””3 4
$str
””4 K
)
””K L
;
””L M
}
‘‘ 
if
’’ 
(
’’ 
	millisecs
’’ 
>
’’ 
$num
’’ 
)
’’  
{
÷÷ 
throw
◊◊ 
new
◊◊ '
InvalidOperationException
◊◊ 3
(
◊◊3 4
$str
◊◊4 R
)
◊◊R S
;
◊◊S T
}
ÿÿ 
DateTime
ŸŸ 
newDate
ŸŸ 
=
ŸŸ 
thisDate
ŸŸ '
;
ŸŸ' (
newDate
⁄⁄ 
=
⁄⁄ 
(
⁄⁄ 
hours
⁄⁄ 
<
⁄⁄ 
$num
⁄⁄  
)
⁄⁄  !
?
⁄⁄" #
newDate
⁄⁄$ +
:
⁄⁄, -
newDate
⁄⁄. 5
.
⁄⁄5 6
SetHour
⁄⁄6 =
(
⁄⁄= >
hours
⁄⁄> C
)
⁄⁄C D
;
⁄⁄D E
newDate
€€ 
=
€€ 
(
€€ 
mins
€€ 
<
€€ 
$num
€€ 
)
€€  
?
€€! "
newDate
€€# *
:
€€+ ,
newDate
€€- 4
.
€€4 5
	SetMinute
€€5 >
(
€€> ?
mins
€€? C
)
€€C D
;
€€D E
newDate
‹‹ 
=
‹‹ 
(
‹‹ 
secs
‹‹ 
<
‹‹ 
$num
‹‹ 
)
‹‹  
?
‹‹! "
newDate
‹‹# *
:
‹‹+ ,
newDate
‹‹- 4
.
‹‹4 5
	SetSecond
‹‹5 >
(
‹‹> ?
secs
‹‹? C
)
‹‹C D
;
‹‹D E
newDate
›› 
=
›› 
(
›› 
	millisecs
››  
<
››! "
$num
››# $
)
››$ %
?
››& '
newDate
››( /
:
››0 1
newDate
››2 9
.
››9 :
SetMillisecond
››: H
(
››H I
	millisecs
››I R
)
››R S
;
››S T
return
ﬁﬁ 
newDate
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 	
public
·· 
static
·· 
DateTime
·· 
	Normalize
·· (
(
··( )
this
··) -
DateTime
··. 6
date
··7 ;
)
··; <
{
‚‚ 	
return
„„ 
(
„„ 
date
„„ 
.
„„ 
SetDay
„„ 
(
„„  
$num
„„  !
)
„„! "
.
„„" #
Date
„„# '
)
„„' (
;
„„( )
}
‰‰ 	
public
ÊÊ 
static
ÊÊ 
DateTime
ÊÊ 
GetNextDayOfWeek
ÊÊ /
(
ÊÊ/ 0
this
ÊÊ0 4
DateTime
ÊÊ5 =
thisDate
ÊÊ> F
,
ÊÊF G
	DayOfWeek
ÊÊH Q
	dayOfWeek
ÊÊR [
)
ÊÊ[ \
{
ÁÁ 	
DateTime
ËË 
newDate
ËË 
=
ËË 
thisDate
ËË '
;
ËË' (
do
ÈÈ 
{
ÍÍ 
newDate
ÎÎ 
=
ÎÎ 
newDate
ÎÎ !
.
ÎÎ! "
AddDays
ÎÎ" )
(
ÎÎ) *
$num
ÎÎ* +
)
ÎÎ+ ,
;
ÎÎ, -
}
ÏÏ 
while
ÏÏ 
(
ÏÏ 
newDate
ÏÏ 
.
ÏÏ 
	DayOfWeek
ÏÏ &
!=
ÏÏ' )
	dayOfWeek
ÏÏ* 3
)
ÏÏ3 4
;
ÏÏ4 5
return
ÌÌ 
newDate
ÌÌ 
;
ÌÌ 
}
ÓÓ 	
public
ÙÙ 
static
ÙÙ 
int
ÙÙ 
DaysInMonth
ÙÙ %
(
ÙÙ% &
this
ÙÙ& *
DateTime
ÙÙ+ 3
thisDate
ÙÙ4 <
)
ÙÙ< =
{
ıı 	
return
ˆˆ 
CultureInfo
ˆˆ 
.
ˆˆ 
InvariantCulture
ˆˆ /
.
ˆˆ/ 0
Calendar
ˆˆ0 8
.
ˆˆ8 9
GetDaysInMonth
ˆˆ9 G
(
ˆˆG H
thisDate
ˆˆH P
.
ˆˆP Q
Year
ˆˆQ U
,
ˆˆU V
thisDate
ˆˆW _
.
ˆˆ_ `
Month
ˆˆ` e
)
ˆˆe f
;
ˆˆf g
}
˜˜ 	
public
˘˘ 
static
˘˘ 
bool
˘˘ 
IsLastDayOfMonth
˘˘ +
(
˘˘+ ,
this
˘˘, 0
DateTime
˘˘1 9
thisDate
˘˘: B
)
˘˘B C
{
˙˙ 	
return
˚˚ 
(
˚˚ 
thisDate
˚˚ 
.
˚˚ 
Day
˚˚  
==
˚˚! #
thisDate
˚˚$ ,
.
˚˚, -
DaysInMonth
˚˚- 8
(
˚˚8 9
)
˚˚9 :
)
˚˚: ;
;
˚˚; <
}
¸¸ 	
public
˛˛ 
static
˛˛ 
bool
˛˛ 
	IsWeekend
˛˛ $
(
˛˛$ %
this
˛˛% )
DateTime
˛˛* 2
thisDate
˛˛3 ;
)
˛˛; <
{
ˇˇ 	
return
ÄÄ 
(
ÄÄ 
thisDate
ÄÄ 
.
ÄÄ 
	DayOfWeek
ÄÄ &
==
ÄÄ' )
	DayOfWeek
ÄÄ* 3
.
ÄÄ3 4
Saturday
ÄÄ4 <
||
ÄÄ= ?
thisDate
ÄÄ@ H
.
ÄÄH I
	DayOfWeek
ÄÄI R
==
ÄÄS U
	DayOfWeek
ÄÄV _
.
ÄÄ_ `
Sunday
ÄÄ` f
)
ÄÄf g
;
ÄÄg h
}
ÅÅ 	
public
ÉÉ 
static
ÉÉ 
bool
ÉÉ 

IsLeapYear
ÉÉ %
(
ÉÉ% &
this
ÉÉ& *
DateTime
ÉÉ+ 3
thisDate
ÉÉ4 <
)
ÉÉ< =
{
ÑÑ 	
return
ÖÖ 
CultureInfo
ÖÖ 
.
ÖÖ 
InvariantCulture
ÖÖ /
.
ÖÖ/ 0
Calendar
ÖÖ0 8
.
ÖÖ8 9

IsLeapYear
ÖÖ9 C
(
ÖÖC D
thisDate
ÖÖD L
.
ÖÖL M
Year
ÖÖM Q
)
ÖÖQ R
;
ÖÖR S
}
ÜÜ 	
public
àà 
static
àà 
DateTime
àà 
GetFutureDateTime
àà 0
(
àà0 1
this
àà1 5
DateTime
àà6 >
thisDate
àà? G
,
ààG H
TimeSpan
ààI Q
processTime
ààR ]
,
àà] ^
ScheduleMode
àà_ k
mode
ààl p
,
ààp q
	DayOfWeek
ààr {
	dayOfWeekàà| Ö
=ààÜ á
	DayOfWeekààà ë
.ààë í
Sundayààí ò
,ààò ô
intààö ù
ordinalààû •
=àà¶ ß
-àà® ©
$numàà© ™
)àà™ ´
{
ââ 	
DateTime
ää 
result
ää 
=
ää 
thisDate
ää &
;
ää& '
if
åå 
(
åå 
processTime
åå 
==
åå 
null
åå #
)
åå# $
{
çç 
throw
éé 
new
éé 
	Exception
éé #
(
éé# $
$str
éé$ N
)
ééN O
;
ééO P
}
èè 
switch
ëë 
(
ëë 
mode
ëë 
)
ëë 
{
íí 
case
ìì 
ScheduleMode
ìì !
.
ìì! "
Hourly
ìì" (
:
ìì( )
{
îî 
if
ïï 
(
ïï 
result
ïï "
.
ïï" #
Minute
ïï# )
<
ïï* +
processTime
ïï, 7
.
ïï7 8
Minutes
ïï8 ?
)
ïï? @
{
ññ 
result
óó "
=
óó# $
result
óó% +
.
óó+ ,

AddMinutes
óó, 6
(
óó6 7
processTime
óó7 B
.
óóB C
Minutes
óóC J
-
óóK L
result
óóM S
.
óóS T
Minute
óóT Z
)
óóZ [
;
óó[ \
}
òò 
else
ôô 
{
öö 
result
õõ "
=
õõ# $
result
õõ% +
.
õõ+ ,
Subtract
õõ, 4
(
õõ4 5
new
õõ5 8
TimeSpan
õõ9 A
(
õõA B
$num
õõB C
,
õõC D
$num
õõE F
,
õõF G
result
õõH N
.
õõN O
Minute
õõO U
,
õõU V
result
õõW ]
.
õõ] ^
Second
õõ^ d
,
õõd e
result
õõf l
.
õõl m
Millisecond
õõm x
)
õõx y
)
õõy z
;
õõz {
result
úú "
=
úú# $
result
úú% +
.
úú+ ,
Add
úú, /
(
úú/ 0
new
úú0 3
TimeSpan
úú4 <
(
úú< =
$num
úú= >
,
úú> ?
$num
úú@ A
,
úúA B
processTime
úúC N
.
úúN O
Minutes
úúO V
,
úúV W
$num
úúX Y
,
úúY Z
$num
úú[ \
)
úú\ ]
)
úú] ^
;
úú^ _
}
ùù 
}
ûû 
break
üü 
;
üü 
case
†† 
ScheduleMode
†† !
.
††! "
Daily
††" '
:
††' (
{
°° 
result
¢¢ 
=
¢¢  
result
¢¢! '
.
¢¢' (
Subtract
¢¢( 0
(
¢¢0 1
new
¢¢1 4
TimeSpan
¢¢5 =
(
¢¢= >
$num
¢¢> ?
,
¢¢? @
result
¢¢A G
.
¢¢G H
Hour
¢¢H L
,
¢¢L M
result
¢¢N T
.
¢¢T U
Minute
¢¢U [
,
¢¢[ \
result
¢¢] c
.
¢¢c d
Second
¢¢d j
,
¢¢j k
result
¢¢l r
.
¢¢r s
Millisecond
¢¢s ~
)
¢¢~ 
)¢¢ Ä
;¢¢Ä Å
result
££ 
=
££  
result
££! '
.
££' (
Add
££( +
(
££+ ,
new
££, /
TimeSpan
££0 8
(
££8 9
$num
££9 :
,
££: ;
processTime
££< G
.
££G H
Hours
££H M
,
££M N
processTime
££O Z
.
££Z [
Minutes
££[ b
,
££b c
$num
££d e
,
££e f
$num
££g h
)
££h i
)
££i j
;
££j k
}
§§ 
break
•• 
;
•• 
case
¶¶ 
ScheduleMode
¶¶ !
.
¶¶! "
Weekly
¶¶" (
:
¶¶( )
{
ßß 
int
®® 
	daysToAdd
®® %
=
®®& '
$num
®®( )
;
®®) *
if
©© 
(
©© 
result
©© "
.
©©" #
	DayOfWeek
©©# ,
!=
©©- /
	dayOfWeek
©©0 9
)
©©9 :
{
™™ 
int
´´ 
	dayNumber
´´  )
=
´´* +
(
´´, -
int
´´- 0
)
´´0 1
	dayOfWeek
´´1 :
;
´´: ;
	daysToAdd
¨¨ %
=
¨¨& '
(
¨¨( )
(
¨¨) *
int
¨¨* -
)
¨¨- .
(
¨¨. /
result
¨¨/ 5
.
¨¨5 6
	DayOfWeek
¨¨6 ?
)
¨¨? @
<
¨¨A B
	dayNumber
¨¨C L
)
¨¨L M
?
¨¨N O
(
¨¨P Q
int
¨¨Q T
)
¨¨T U
(
¨¨U V
result
¨¨V \
.
¨¨\ ]
	DayOfWeek
¨¨] f
)
¨¨f g
-
¨¨h i
	dayNumber
¨¨j s
:
¨¨t u
$num
¨¨v w
-
¨¨x y
	dayNumber¨¨z É
;¨¨É Ñ
}
≠≠ 
result
ÆÆ 
=
ÆÆ  
result
ÆÆ! '
.
ÆÆ' (
AddDays
ÆÆ( /
(
ÆÆ/ 0
	daysToAdd
ÆÆ0 9
)
ÆÆ9 :
;
ÆÆ: ;
result
ØØ 
=
ØØ  
result
ØØ! '
.
ØØ' (
Subtract
ØØ( 0
(
ØØ0 1
new
ØØ1 4
TimeSpan
ØØ5 =
(
ØØ= >
$num
ØØ> ?
,
ØØ? @
result
ØØA G
.
ØØG H
Hour
ØØH L
,
ØØL M
result
ØØN T
.
ØØT U
Minute
ØØU [
,
ØØ[ \
result
ØØ] c
.
ØØc d
Second
ØØd j
,
ØØj k
result
ØØl r
.
ØØr s
Millisecond
ØØs ~
)
ØØ~ 
)ØØ Ä
;ØØÄ Å
result
∞∞ 
=
∞∞  
result
∞∞! '
.
∞∞' (
Add
∞∞( +
(
∞∞+ ,
new
∞∞, /
TimeSpan
∞∞0 8
(
∞∞8 9
$num
∞∞9 :
,
∞∞: ;
processTime
∞∞< G
.
∞∞G H
Hours
∞∞H M
,
∞∞M N
processTime
∞∞O Z
.
∞∞Z [
Minutes
∞∞[ b
,
∞∞b c
$num
∞∞d e
,
∞∞e f
$num
∞∞g h
)
∞∞h i
)
∞∞i j
;
∞∞j k
}
±± 
break
≤≤ 
;
≤≤ 
case
≥≥ 
ScheduleMode
≥≥ !
.
≥≥! "

NthWeekday
≥≥" ,
:
≥≥, -
{
¥¥ 
ordinal
µµ 
=
µµ  !
Math
µµ" &
.
µµ& '
Max
µµ' *
(
µµ* +
ordinal
µµ+ 2
,
µµ2 3
$num
µµ4 5
)
µµ5 6
;
µµ6 7
result
∂∂ 
=
∂∂  
result
∂∂! '
.
∂∂' (!
GetDateByOrdinalDay
∂∂( ;
(
∂∂; <
	dayOfWeek
∂∂< E
,
∂∂E F
ordinal
∂∂G N
)
∂∂N O
;
∂∂O P
if
∑∑ 
(
∑∑ 
result
∑∑ "
<
∑∑# $
thisDate
∑∑% -
)
∑∑- .
{
∏∏ 
result
ππ "
=
ππ# $
result
ππ% +
.
ππ+ ,
	AddMonths
ππ, 5
(
ππ5 6
$num
ππ6 7
)
ππ7 8
.
ππ8 9!
GetDateByOrdinalDay
ππ9 L
(
ππL M
	dayOfWeek
ππM V
,
ππV W
ordinal
ππX _
)
ππ_ `
;
ππ` a
}
∫∫ 
result
ªª 
=
ªª  
result
ªª! '
.
ªª' (
Subtract
ªª( 0
(
ªª0 1
new
ªª1 4
TimeSpan
ªª5 =
(
ªª= >
$num
ªª> ?
,
ªª? @
result
ªªA G
.
ªªG H
Hour
ªªH L
,
ªªL M
result
ªªN T
.
ªªT U
Minute
ªªU [
,
ªª[ \
result
ªª] c
.
ªªc d
Second
ªªd j
,
ªªj k
result
ªªl r
.
ªªr s
Millisecond
ªªs ~
)
ªª~ 
)ªª Ä
;ªªÄ Å
result
ºº 
=
ºº  
result
ºº! '
.
ºº' (
Add
ºº( +
(
ºº+ ,
new
ºº, /
TimeSpan
ºº0 8
(
ºº8 9
$num
ºº9 :
,
ºº: ;
processTime
ºº< G
.
ººG H
Hours
ººH M
,
ººM N
processTime
ººO Z
.
ººZ [
Minutes
ºº[ b
,
ººb c
$num
ººd e
,
ººe f
$num
ººg h
)
ººh i
)
ººi j
;
ººj k
}
ΩΩ 
break
ææ 
;
ææ 
case
øø 
ScheduleMode
øø !
.
øø! "
FirstDayOfMonth
øø" 1
:
øø1 2
{
¿¿ 
int
¡¡ 
daysThisMonth
¡¡ )
=
¡¡* +
DaysInMonth
¡¡, 7
(
¡¡7 8
result
¡¡8 >
)
¡¡> ?
;
¡¡? @
int
¬¬ 
today
¬¬ !
=
¬¬" #
result
¬¬$ *
.
¬¬* +
Day
¬¬+ .
;
¬¬. /
if
√√ 
(
√√ 
today
√√ !
==
√√" $
$num
√√% &
)
√√& '
{
ƒƒ 
result
≈≈ "
=
≈≈# $
result
≈≈% +
.
≈≈+ ,
AddDays
≈≈, 3
(
≈≈3 4
daysThisMonth
≈≈4 A
)
≈≈A B
;
≈≈B C
}
∆∆ 
else
«« 
{
»» 
result
…… "
=
……# $
result
……% +
.
……+ ,
AddDays
……, 3
(
……3 4
(
……4 5
daysThisMonth
……5 B
-
……C D
today
……E J
)
……J K
+
……L M
$num
……N O
)
……O P
;
……P Q
}
   
result
ÀÀ 
=
ÀÀ  
result
ÀÀ! '
.
ÀÀ' (
Subtract
ÀÀ( 0
(
ÀÀ0 1
new
ÀÀ1 4
TimeSpan
ÀÀ5 =
(
ÀÀ= >
$num
ÀÀ> ?
,
ÀÀ? @
result
ÀÀA G
.
ÀÀG H
Hour
ÀÀH L
,
ÀÀL M
result
ÀÀN T
.
ÀÀT U
Minute
ÀÀU [
,
ÀÀ[ \
result
ÀÀ] c
.
ÀÀc d
Second
ÀÀd j
,
ÀÀj k
result
ÀÀl r
.
ÀÀr s
Millisecond
ÀÀs ~
)
ÀÀ~ 
)ÀÀ Ä
;ÀÀÄ Å
result
ÃÃ 
=
ÃÃ  
result
ÃÃ! '
.
ÃÃ' (
Add
ÃÃ( +
(
ÃÃ+ ,
new
ÃÃ, /
TimeSpan
ÃÃ0 8
(
ÃÃ8 9
$num
ÃÃ9 :
,
ÃÃ: ;
processTime
ÃÃ< G
.
ÃÃG H
Hours
ÃÃH M
,
ÃÃM N
processTime
ÃÃO Z
.
ÃÃZ [
Minutes
ÃÃ[ b
,
ÃÃb c
$num
ÃÃd e
,
ÃÃe f
$num
ÃÃg h
)
ÃÃh i
)
ÃÃi j
;
ÃÃj k
}
ÕÕ 
break
ŒŒ 
;
ŒŒ 
case
œœ 
ScheduleMode
œœ !
.
œœ! "
LastDayOfMonth
œœ" 0
:
œœ0 1
{
–– 
int
—— 
daysThisMonth
—— )
=
——* +
DaysInMonth
——, 7
(
——7 8
result
——8 >
)
——> ?
;
——? @
int
““ 
today
““ !
=
““" #
result
““$ *
.
““* +
Day
““+ .
;
““. /
if
”” 
(
”” 
today
”” !
==
””" $
daysThisMonth
””% 2
)
””2 3
{
‘‘ 
int
’’ 
daysNextMonth
’’  -
=
’’. /
DaysInMonth
’’0 ;
(
’’; <
result
’’< B
.
’’B C
AddDays
’’C J
(
’’J K
$num
’’K L
)
’’L M
)
’’M N
;
’’N O
result
÷÷ "
=
÷÷# $
result
÷÷% +
.
÷÷+ ,
AddDays
÷÷, 3
(
÷÷3 4
daysNextMonth
÷÷4 A
)
÷÷A B
;
÷÷B C
}
◊◊ 
else
ÿÿ 
{
ŸŸ 
result
⁄⁄ "
=
⁄⁄# $
result
⁄⁄% +
.
⁄⁄+ ,
AddDays
⁄⁄, 3
(
⁄⁄3 4
daysThisMonth
⁄⁄4 A
-
⁄⁄B C
today
⁄⁄D I
)
⁄⁄I J
;
⁄⁄J K
}
€€ 
result
‹‹ 
=
‹‹  
result
‹‹! '
.
‹‹' (
Subtract
‹‹( 0
(
‹‹0 1
new
‹‹1 4
TimeSpan
‹‹5 =
(
‹‹= >
$num
‹‹> ?
,
‹‹? @
result
‹‹A G
.
‹‹G H
Hour
‹‹H L
,
‹‹L M
result
‹‹N T
.
‹‹T U
Minute
‹‹U [
,
‹‹[ \
result
‹‹] c
.
‹‹c d
Second
‹‹d j
,
‹‹j k
result
‹‹l r
.
‹‹r s
Millisecond
‹‹s ~
)
‹‹~ 
)‹‹ Ä
;‹‹Ä Å
result
›› 
=
››  
result
››! '
.
››' (
Add
››( +
(
››+ ,
new
››, /
TimeSpan
››0 8
(
››8 9
$num
››9 :
,
››: ;
processTime
››< G
.
››G H
Hours
››H M
,
››M N
processTime
››O Z
.
››Z [
Minutes
››[ b
,
››b c
$num
››d e
,
››e f
$num
››g h
)
››h i
)
››i j
;
››j k
}
ﬁﬁ 
break
ﬂﬂ 
;
ﬂﬂ 
case
‡‡ 
ScheduleMode
‡‡ !
.
‡‡! "

DayOfMonth
‡‡" ,
:
‡‡, -
{
·· 
int
‚‚ 
leapDay
‚‚ #
=
‚‚$ %
$num
‚‚& '
;
‚‚' (
if
„„ 
(
„„ 
result
„„ "
.
„„" #
Month
„„# (
==
„„) +
$num
„„, -
&&
„„. 0
!
„„1 2

IsLeapYear
„„2 <
(
„„< =
result
„„= C
)
„„C D
&&
„„E G
processTime
„„H S
.
„„S T
Days
„„T X
==
„„Y [
$num
„„\ ^
)
„„^ _
{
‰‰ 
leapDay
ÂÂ #
=
ÂÂ$ %
$num
ÂÂ& '
;
ÂÂ' (
}
ÊÊ 
int
ËË 
	daysToAdd
ËË %
=
ËË& '
$num
ËË( )
;
ËË) *
if
ÈÈ 
(
ÈÈ 
result
ÈÈ "
.
ÈÈ" #
Day
ÈÈ# &
<
ÈÈ' (
processTime
ÈÈ) 4
.
ÈÈ4 5
Days
ÈÈ5 9
)
ÈÈ9 :
{
ÍÍ 
	daysToAdd
ÎÎ %
=
ÎÎ& '
processTime
ÎÎ( 3
.
ÎÎ3 4
Days
ÎÎ4 8
-
ÎÎ9 :
result
ÎÎ; A
.
ÎÎA B
Day
ÎÎB E
-
ÎÎF G
leapDay
ÎÎH O
;
ÎÎO P
}
ÏÏ 
else
ÌÌ 
{
ÓÓ 
	daysToAdd
ÔÔ %
=
ÔÔ& '
(
ÔÔ( )
DaysInMonth
ÔÔ) 4
(
ÔÔ4 5
result
ÔÔ5 ;
)
ÔÔ; <
-
ÔÔ= >
result
ÔÔ? E
.
ÔÔE F
Day
ÔÔF I
)
ÔÔI J
+
ÔÔK L
processTime
ÔÔM X
.
ÔÔX Y
Days
ÔÔY ]
-
ÔÔ^ _
leapDay
ÔÔ` g
;
ÔÔg h
}
 
result
ÒÒ 
=
ÒÒ  
result
ÒÒ! '
.
ÒÒ' (
AddDays
ÒÒ( /
(
ÒÒ/ 0
	daysToAdd
ÒÒ0 9
)
ÒÒ9 :
;
ÒÒ: ;
result
ÚÚ 
=
ÚÚ  
result
ÚÚ! '
.
ÚÚ' (
Subtract
ÚÚ( 0
(
ÚÚ0 1
new
ÚÚ1 4
TimeSpan
ÚÚ5 =
(
ÚÚ= >
$num
ÚÚ> ?
,
ÚÚ? @
result
ÚÚA G
.
ÚÚG H
Hour
ÚÚH L
,
ÚÚL M
result
ÚÚN T
.
ÚÚT U
Minute
ÚÚU [
,
ÚÚ[ \
result
ÚÚ] c
.
ÚÚc d
Second
ÚÚd j
,
ÚÚj k
result
ÚÚl r
.
ÚÚr s
Millisecond
ÚÚs ~
)
ÚÚ~ 
)ÚÚ Ä
;ÚÚÄ Å
result
ÛÛ 
=
ÛÛ  
result
ÛÛ! '
.
ÛÛ' (
Add
ÛÛ( +
(
ÛÛ+ ,
new
ÛÛ, /
TimeSpan
ÛÛ0 8
(
ÛÛ8 9
$num
ÛÛ9 :
,
ÛÛ: ;
processTime
ÛÛ< G
.
ÛÛG H
Hours
ÛÛH M
,
ÛÛM N
processTime
ÛÛO Z
.
ÛÛZ [
Minutes
ÛÛ[ b
,
ÛÛb c
$num
ÛÛd e
,
ÛÛe f
$num
ÛÛg h
)
ÛÛh i
)
ÛÛi j
;
ÛÛj k
}
ÙÙ 
break
ıı 
;
ıı 
case
ˆˆ 
ScheduleMode
ˆˆ !
.
ˆˆ! "
SpecificInterval
ˆˆ" 2
:
ˆˆ2 3
{
˜˜ 
if
¯¯ 
(
¯¯ 
result
¯¯ "
.
¯¯" #
Second
¯¯# )
>=
¯¯* ,
$num
¯¯- /
)
¯¯/ 0
{
˘˘ 
result
˙˙ "
=
˙˙# $
result
˙˙% +
.
˙˙+ ,

AddSeconds
˙˙, 6
(
˙˙6 7
$num
˙˙7 9
-
˙˙: ;
result
˙˙< B
.
˙˙B C
Second
˙˙C I
)
˙˙I J
;
˙˙J K
}
˚˚ 
result
˝˝ 
=
˝˝  
result
˝˝! '
.
˝˝' (
Subtract
˝˝( 0
(
˝˝0 1
new
˝˝1 4
TimeSpan
˝˝5 =
(
˝˝= >
$num
˝˝> ?
,
˝˝? @
$num
˝˝A B
,
˝˝B C
$num
˝˝D E
,
˝˝E F
result
˝˝G M
.
˝˝M N
Second
˝˝N T
,
˝˝T U
result
˝˝V \
.
˝˝\ ]
Millisecond
˝˝] h
)
˝˝h i
)
˝˝i j
;
˝˝j k
result
˛˛ 
=
˛˛  
result
˛˛! '
.
˛˛' (
Add
˛˛( +
(
˛˛+ ,
processTime
˛˛, 7
)
˛˛7 8
;
˛˛8 9
}
ˇˇ 
break
ÄÄ 
;
ÄÄ 
}
ÅÅ 
result
ÉÉ 
=
ÉÉ 
result
ÉÉ 
.
ÉÉ 
Subtract
ÉÉ $
(
ÉÉ$ %
new
ÉÉ% (
TimeSpan
ÉÉ) 1
(
ÉÉ1 2
$num
ÉÉ2 3
,
ÉÉ3 4
$num
ÉÉ5 6
,
ÉÉ6 7
$num
ÉÉ8 9
,
ÉÉ9 :
result
ÉÉ; A
.
ÉÉA B
Second
ÉÉB H
,
ÉÉH I
result
ÉÉJ P
.
ÉÉP Q
Millisecond
ÉÉQ \
)
ÉÉ\ ]
)
ÉÉ] ^
;
ÉÉ^ _
return
ÑÑ 
result
ÑÑ 
;
ÑÑ 
}
ÖÖ 	
public
áá 
static
áá 
long
áá 
ConvertToInt64
áá )
(
áá) *
this
áá* .
DateTime
áá/ 7
thisDate
áá8 @
)
áá@ A
{
àà 	
long
ââ 
	dateValue
ââ 
=
ââ 
Convert
ââ $
.
ââ$ %
ToInt64
ââ% ,
(
ââ, -
thisDate
ââ- 5
.
ââ5 6
ToString
ââ6 >
(
ââ> ?
$str
ââ? M
)
ââM N
)
ââN O
;
ââO P
return
ää 
	dateValue
ää 
;
ää 
}
ãã 	
public
çç 
static
çç 
long
çç 
ConvertToInt64
çç )
(
çç) *
this
çç* .
DateTime
çç/ 7
thisDate
çç8 @
,
çç@ A
string
ççB H
format
ççI O
)
ççO P
{
éé 	
long
èè 
	dateValue
èè 
=
èè 
Convert
èè $
.
èè$ %
ToInt64
èè% ,
(
èè, -
thisDate
èè- 5
.
èè5 6
ToString
èè6 >
(
èè> ?
format
èè? E
)
èèE F
)
èèF G
;
èèG H
return
êê 
	dateValue
êê 
;
êê 
}
ëë 	
private
ìì 
static
ìì 
int
ìì 
ThisCentury
ìì &
(
ìì& '
int
ìì' *
year
ìì+ /
)
ìì/ 0
{
îî 	
int
ïï 
result
ïï 
=
ïï 
(
ïï 
int
ïï 
)
ïï 
(
ïï 
(
ïï  
double
ïï  &
)
ïï& '
year
ïï' +
*
ïï, -
$num
ïï. 2
)
ïï2 3
;
ïï3 4
return
ññ 
result
ññ 
;
ññ 
}
óó 	
private
òò 
static
òò 
int
òò 
ThisCentury
òò &
(
òò& '
this
òò' +
DateTime
òò, 4
thisDate
òò5 =
)
òò= >
{
ôô 	
int
öö 
result
öö 
=
öö 
(
öö 
int
öö 
)
öö 
(
öö 
(
öö  
double
öö  &
)
öö& '
thisDate
öö' /
.
öö/ 0
Year
öö0 4
*
öö5 6
$num
öö7 ;
)
öö; <
;
öö< =
return
õõ 
result
õõ 
;
õõ 
}
úú 	
public
ûû 
static
ûû 
DateTime
ûû !
FromMonthYearString
ûû 2
(
ûû2 3
this
ûû3 7
DateTime
ûû8 @
date
ûûA E
,
ûûE F
string
ûûG M
data
ûûN R
)
ûûR S
{
üü 	
DateTime
†† 
newDate
†† 
=
†† 
new
†† "
DateTime
††# +
(
††+ ,
$num
††, -
)
††- .
;
††. /
string
°° 
[
°° 
]
°° 
parts
°° 
=
°° 
data
°° !
.
°°! "
Split
°°" '
(
°°' (
$char
°°( +
)
°°+ ,
;
°°, -
if
¢¢ 
(
¢¢ 
parts
¢¢ 
.
¢¢ 
Length
¢¢ 
==
¢¢ 
$num
¢¢  !
)
¢¢! "
{
££ 
if
§§ 
(
§§ 
parts
§§ 
[
§§ 
$num
§§ 
]
§§ 
.
§§ 
Length
§§ #
==
§§$ &
$num
§§' (
&&
§§) +
(
§§, -
parts
§§- 2
[
§§2 3
$num
§§3 4
]
§§4 5
.
§§5 6
Length
§§6 <
==
§§= ?
$num
§§@ A
||
§§B D
parts
§§E J
[
§§J K
$num
§§K L
]
§§L M
.
§§M N
Length
§§N T
==
§§U W
$num
§§X Y
)
§§Y Z
)
§§Z [
{
•• 
if
¶¶ 
(
¶¶ 
parts
¶¶ 
[
¶¶ 
$num
¶¶ 
]
¶¶  
.
¶¶  !
Length
¶¶! '
==
¶¶( *
$num
¶¶+ ,
)
¶¶, -
{
ßß 
int
®® 
value
®® !
=
®®" #
Convert
®®$ +
.
®®+ ,
ToInt32
®®, 3
(
®®3 4
parts
®®4 9
[
®®9 :
$num
®®: ;
]
®®; <
)
®®< =
;
®®= >
int
©© 
year
©©  
=
©©! "
(
©©# $
DateTime
©©$ ,
.
©©, -
Now
©©- 0
.
©©0 1
Year
©©1 5
-
©©6 7
value
©©8 =
)
©©= >
+
©©? @
value
©©A F
;
©©F G
parts
™™ 
[
™™ 
$num
™™ 
]
™™  
=
™™! "
string
™™# )
.
™™) *
Format
™™* 0
(
™™0 1
$str
™™1 6
,
™™6 7
year
™™8 <
)
™™< =
;
™™= >
}
´´ 
data
¨¨ 
=
¨¨ 
string
¨¨ !
.
¨¨! "
Format
¨¨" (
(
¨¨( )
$str
¨¨) 5
,
¨¨5 6
parts
¨¨7 <
[
¨¨< =
$num
¨¨= >
]
¨¨> ?
,
¨¨? @
parts
¨¨A F
[
¨¨F G
$num
¨¨G H
]
¨¨H I
)
¨¨I J
;
¨¨J K
try
≠≠ 
{
ÆÆ 
newDate
ØØ 
=
ØØ  !
DateTime
ØØ" *
.
ØØ* +

ParseExact
ØØ+ 5
(
ØØ5 6
data
ØØ6 :
,
ØØ: ;
$str
ØØ< I
,
ØØI J
CultureInfo
ØØK V
.
ØØV W
InvariantCulture
ØØW g
,
ØØg h
DateTimeStyles
ØØi w
.
ØØw x
None
ØØx |
)
ØØ| }
;
ØØ} ~
}
∞∞ 
catch
±± 
(
±± 
	Exception
±± $
)
±±$ %
{
≤≤ 
newDate
≥≥ 
=
≥≥  !
new
≥≥" %
DateTime
≥≥& .
(
≥≥. /
$num
≥≥/ 0
)
≥≥0 1
;
≥≥1 2
}
¥¥ 
}
µµ 
}
∂∂ 
return
∑∑ 
newDate
∑∑ 
;
∑∑ 
}
∏∏ 	
public
∫∫ 
static
∫∫ 
DateTime
∫∫ $
FromDayMonthYearString
∫∫ 5
(
∫∫5 6
this
∫∫6 :
DateTime
∫∫; C
date
∫∫D H
,
∫∫H I
string
∫∫J P
data
∫∫Q U
)
∫∫U V
{
ªª 	
DateTime
ºº 
newDate
ºº 
=
ºº 
new
ºº "
DateTime
ºº# +
(
ºº+ ,
$num
ºº, -
)
ºº- .
;
ºº. /
string
ΩΩ 
[
ΩΩ 
]
ΩΩ 
parts
ΩΩ 
=
ΩΩ 
data
ΩΩ !
.
ΩΩ! "
Split
ΩΩ" '
(
ΩΩ' (
$char
ΩΩ( +
)
ΩΩ+ ,
;
ΩΩ, -
if
ææ 
(
ææ 
parts
ææ 
.
ææ 
Length
ææ 
==
ææ 
$num
ææ  !
)
ææ! "
{
øø 
if
¿¿ 
(
¿¿ 
parts
¿¿ 
[
¿¿ 
$num
¿¿ 
]
¿¿ 
.
¿¿ 
Length
¿¿ #
==
¿¿$ &
$num
¿¿' (
&&
¿¿) +
(
¿¿, -
parts
¿¿- 2
[
¿¿2 3
$num
¿¿3 4
]
¿¿4 5
.
¿¿5 6
Length
¿¿6 <
==
¿¿= ?
$num
¿¿@ A
||
¿¿B D
parts
¿¿E J
[
¿¿J K
$num
¿¿K L
]
¿¿L M
.
¿¿M N
Length
¿¿N T
==
¿¿U W
$num
¿¿X Y
)
¿¿Y Z
)
¿¿Z [
{
¡¡ 
if
¬¬ 
(
¬¬ 
parts
¬¬ 
[
¬¬ 
$num
¬¬ 
]
¬¬  
.
¬¬  !
Length
¬¬! '
==
¬¬( *
$num
¬¬+ ,
)
¬¬, -
{
√√ 
int
ƒƒ 
value
ƒƒ !
=
ƒƒ" #
Convert
ƒƒ$ +
.
ƒƒ+ ,
ToInt32
ƒƒ, 3
(
ƒƒ3 4
parts
ƒƒ4 9
[
ƒƒ9 :
$num
ƒƒ: ;
]
ƒƒ; <
)
ƒƒ< =
;
ƒƒ= >
int
≈≈ 
year
≈≈  
=
≈≈! "
(
≈≈# $
DateTime
≈≈$ ,
.
≈≈, -
Now
≈≈- 0
.
≈≈0 1
Year
≈≈1 5
-
≈≈6 7
value
≈≈8 =
)
≈≈= >
+
≈≈? @
value
≈≈A F
;
≈≈F G
parts
∆∆ 
[
∆∆ 
$num
∆∆ 
]
∆∆  
=
∆∆! "
string
∆∆# )
.
∆∆) *
Format
∆∆* 0
(
∆∆0 1
$str
∆∆1 6
,
∆∆6 7
year
∆∆8 <
)
∆∆< =
;
∆∆= >
}
«« 
data
»» 
=
»» 
string
»» !
.
»»! "
Format
»»" (
(
»»( )
$str
»») 9
,
»»9 :
parts
»»; @
[
»»@ A
$num
»»A B
]
»»B C
,
»»C D
Convert
»»E L
.
»»L M
ToInt32
»»M T
(
»»T U
parts
»»U Z
[
»»Z [
$num
»»[ \
]
»»\ ]
)
»»] ^
,
»»^ _
Convert
»»` g
.
»»g h
ToInt32
»»h o
(
»»o p
parts
»»p u
[
»»u v
$num
»»v w
]
»»w x
)
»»x y
)
»»y z
;
»»z {
try
…… 
{
   
newDate
ÀÀ 
=
ÀÀ  !
DateTime
ÀÀ" *
.
ÀÀ* +

ParseExact
ÀÀ+ 5
(
ÀÀ5 6
data
ÀÀ6 :
,
ÀÀ: ;
$str
ÀÀ< I
,
ÀÀI J
CultureInfo
ÀÀK V
.
ÀÀV W
InvariantCulture
ÀÀW g
,
ÀÀg h
DateTimeStyles
ÀÀi w
.
ÀÀw x
None
ÀÀx |
)
ÀÀ| }
;
ÀÀ} ~
}
ÃÃ 
catch
ÕÕ 
(
ÕÕ 
	Exception
ÕÕ $
)
ÕÕ$ %
{
ŒŒ 
newDate
œœ 
=
œœ  !
new
œœ" %
DateTime
œœ& .
(
œœ. /
$num
œœ/ 0
)
œœ0 1
;
œœ1 2
}
–– 
}
—— 
}
““ 
return
”” 
newDate
”” 
;
”” 
}
‘‘ 	
public
÷÷ 
static
÷÷ 
DateTime
÷÷ 
FromMonthYear
÷÷ ,
(
÷÷, -
int
÷÷- 0
month
÷÷1 6
,
÷÷6 7
int
÷÷8 ;
year
÷÷< @
)
÷÷@ A
{
◊◊ 	
DateTime
ÿÿ 
result
ÿÿ 
=
ÿÿ 
new
ÿÿ !
DateTime
ÿÿ" *
(
ÿÿ* +
year
ÿÿ+ /
,
ÿÿ/ 0
month
ÿÿ1 6
,
ÿÿ6 7
$num
ÿÿ8 9
)
ÿÿ9 :
;
ÿÿ: ;
return
ŸŸ 
result
ŸŸ 
;
ŸŸ 
}
⁄⁄ 	
public
‹‹ 
static
‹‹ 
string
‹‹ 
ToAccessDateTime
‹‹ -
(
‹‹- .
this
‹‹. 2
DateTime
‹‹3 ;
date
‹‹< @
,
‹‹@ A
bool
‹‹B F
includeTime
‹‹G R
=
‹‹S T
false
‹‹U Z
)
‹‹Z [
{
›› 	
string
ﬁﬁ 
format
ﬁﬁ 
=
ﬁﬁ 
$str
ﬁﬁ &
;
ﬁﬁ& '
string
ﬂﬂ 
dateStr
ﬂﬂ 
=
ﬂﬂ 
date
ﬂﬂ !
.
ﬂﬂ! "
ToString
ﬂﬂ" *
(
ﬂﬂ* +
$str
ﬂﬂ+ 7
)
ﬂﬂ7 8
;
ﬂﬂ8 9
string
‡‡ 
timeStr
‡‡ 
=
‡‡ 
(
‡‡ 
includeTime
‡‡ )
)
‡‡) *
?
‡‡+ ,
date
‡‡- 1
.
‡‡1 2
ToString
‡‡2 :
(
‡‡: ;
$str
‡‡; F
)
‡‡F G
:
‡‡H I
$str
‡‡J L
;
‡‡L M
string
·· 
result
·· 
=
·· 
string
·· "
.
··" #
Format
··# )
(
··) *
format
··* 0
,
··0 1
dateStr
··2 9
,
··9 :
timeStr
··; B
)
··B C
;
··C D
return
‚‚ 
result
‚‚ 
;
‚‚ 
}
„„ 	
public
ÊÊ 
static
ÊÊ 
DateTime
ÊÊ !
GetDateByOrdinalDay
ÊÊ 2
(
ÊÊ2 3
this
ÊÊ3 7
DateTime
ÊÊ8 @
dt
ÊÊA C
,
ÊÊC D
	DayOfWeek
ÊÊE N
	dayOfWeek
ÊÊO X
,
ÊÊX Y
int
ÊÊZ ]
ordinal
ÊÊ^ e
)
ÊÊe f
{
ÁÁ 	
DateTime
ËË 
newDate
ËË 
;
ËË 
if
ÈÈ 
(
ÈÈ 
ordinal
ÈÈ 
==
ÈÈ 
$num
ÈÈ 
)
ÈÈ 
{
ÍÍ 
newDate
ÎÎ 
=
ÎÎ 
dt
ÎÎ 
.
ÎÎ 
LastDayOfWeek
ÎÎ *
(
ÎÎ* +
	dayOfWeek
ÎÎ+ 4
)
ÎÎ4 5
;
ÎÎ5 6
}
ÏÏ 
else
ÌÌ 
{
ÓÓ 
ordinal
ÔÔ 
=
ÔÔ 
Math
ÔÔ 
.
ÔÔ 
Min
ÔÔ "
(
ÔÔ" #
Math
ÔÔ# '
.
ÔÔ' (
Max
ÔÔ( +
(
ÔÔ+ ,
ordinal
ÔÔ, 3
,
ÔÔ3 4
$num
ÔÔ5 6
)
ÔÔ6 7
,
ÔÔ7 8
$num
ÔÔ9 :
)
ÔÔ: ;
;
ÔÔ; <
newDate
 
=
 
new
 
DateTime
 &
(
& '
dt
' )
.
) *
Year
* .
,
. /
dt
0 2
.
2 3
Month
3 8
,
8 9
$num
: ;
)
; <
.
< =
SetTime
= D
(
D E
dt
E G
.
G H
	TimeOfDay
H Q
)
Q R
;
R S
int
ÒÒ 
diff
ÒÒ 
=
ÒÒ 
$num
ÒÒ 
-
ÒÒ 
Math
ÒÒ #
.
ÒÒ# $
Abs
ÒÒ$ '
(
ÒÒ' (
(
ÒÒ( )
int
ÒÒ) ,
)
ÒÒ, -
	dayOfWeek
ÒÒ- 6
-
ÒÒ7 8
(
ÒÒ9 :
int
ÒÒ: =
)
ÒÒ= >
newDate
ÒÒ> E
.
ÒÒE F
	DayOfWeek
ÒÒF O
)
ÒÒO P
;
ÒÒP Q
newDate
ÚÚ 
=
ÚÚ 
(
ÚÚ 
diff
ÚÚ 
==
ÚÚ  "
$num
ÚÚ# $
)
ÚÚ$ %
?
ÚÚ& '
newDate
ÚÚ( /
:
ÚÚ0 1
newDate
ÚÚ2 9
.
ÚÚ9 :
AddDays
ÚÚ: A
(
ÚÚA B
diff
ÚÚB F
)
ÚÚF G
;
ÚÚG H
if
ÛÛ 
(
ÛÛ 
ordinal
ÛÛ 
>
ÛÛ 
$num
ÛÛ 
)
ÛÛ  
{
ÙÙ 
newDate
ıı 
=
ıı 
newDate
ıı %
.
ıı% &
AddDays
ıı& -
(
ıı- .
$num
ıı. /
*
ıı0 1
(
ıı2 3
ordinal
ıı3 :
-
ıı; <
$num
ıı= >
)
ıı> ?
)
ıı? @
;
ıı@ A
}
ˆˆ 
}
˜˜ 
return
¯¯ 
newDate
¯¯ 
;
¯¯ 
}
˘˘ 	
public
˚˚ 
static
˚˚ 
int
˚˚ 
CountWeekDays
˚˚ '
(
˚˚' (
this
˚˚( ,
DateTime
˚˚- 5
thisDate
˚˚6 >
,
˚˚> ?
DateTime
˚˚@ H
thatDate
˚˚I Q
)
˚˚Q R
{
¸¸ 	
int
˝˝ 
days
˝˝ 
=
˝˝ 
Math
˝˝ 
.
˝˝ 
Abs
˝˝ 
(
˝˝  
(
˝˝  !
thisDate
˝˝! )
-
˝˝* +
thatDate
˝˝, 4
)
˝˝4 5
.
˝˝5 6
Days
˝˝6 :
)
˝˝: ;
+
˝˝< =
$num
˝˝> ?
;
˝˝? @
return
˛˛ 
(
˛˛ 
(
˛˛ 
days
˛˛ 
/
˛˛ 
$num
˛˛ 
)
˛˛ 
*
˛˛  
$num
˛˛! "
)
˛˛" #
+
˛˛$ %
(
˛˛& '
days
˛˛' +
%
˛˛, -
$num
˛˛. /
)
˛˛/ 0
;
˛˛0 1
}
ˇˇ 	
public
ÅÅ 
static
ÅÅ 
int
ÅÅ 
CountDayOfWeek
ÅÅ (
(
ÅÅ( )
this
ÅÅ) -
DateTime
ÅÅ. 6
thisDate
ÅÅ7 ?
,
ÅÅ? @
	DayOfWeek
ÅÅA J
dow
ÅÅK N
)
ÅÅN O
{
ÇÇ 	
int
ÉÉ 
count
ÉÉ 
=
ÉÉ 
$num
ÉÉ 
;
ÉÉ 
DateTime
ÑÑ 
newDate
ÑÑ 
=
ÑÑ 
thisDate
ÑÑ '
.
ÑÑ' (!
GetDateByOrdinalDay
ÑÑ( ;
(
ÑÑ; <
dow
ÑÑ< ?
,
ÑÑ? @
$num
ÑÑA B
)
ÑÑB C
;
ÑÑC D
count
ÖÖ 
=
ÖÖ 
(
ÖÖ 
newDate
ÖÖ 
.
ÖÖ 
DaysInMonth
ÖÖ (
(
ÖÖ( )
)
ÖÖ) *
-
ÖÖ+ ,
newDate
ÖÖ- 4
.
ÖÖ4 5
Day
ÖÖ5 8
)
ÖÖ8 9
%
ÖÖ: ;
$num
ÖÖ< =
;
ÖÖ= >
return
ÜÜ 
count
ÜÜ 
;
ÜÜ 
}
áá 	
public
ââ 
static
ââ 
DateTime
ââ 
LastDayOfWeek
ââ ,
(
ââ, -
this
ââ- 1
DateTime
ââ2 :
thisDate
ââ; C
,
ââC D
	DayOfWeek
ââE N
dow
ââO R
)
ââR S
{
ää 	
DateTime
ãã 
newDate
ãã 
=
ãã 
thisDate
ãã '
.
ãã' (
SetDay
ãã( .
(
ãã. /
$num
ãã/ 0
)
ãã0 1
.
ãã1 2
	AddMonths
ãã2 ;
(
ãã; <
$num
ãã< =
)
ãã= >
;
ãã> ?
while
åå 
(
åå 
!
åå 
(
åå 
newDate
åå 
.
åå 
	DayOfWeek
åå &
==
åå' )
dow
åå* -
&&
åå. 0
newDate
åå1 8
.
åå8 9
Month
åå9 >
==
åå? A
thisDate
ååB J
.
ååJ K
Month
ååK P
)
ååP Q
)
ååQ R
{
çç 
newDate
éé 
=
éé 
newDate
éé !
.
éé! "
AddDays
éé" )
(
éé) *
-
éé* +
$num
éé+ ,
)
éé, -
;
éé- .
}
èè 
return
êê 
newDate
êê 
;
êê 
}
ëë 	
public
ìì 
static
ìì 
int
ìì 
CountWeekday
ìì &
(
ìì& '
this
ìì' +
DateTime
ìì, 4
thisDate
ìì5 =
,
ìì= >
DateTime
ìì? G
thatDate
ììH P
,
ììP Q
	DayOfWeek
ììR [
	dayOfWeek
ìì\ e
)
ììe f
{
îî 	
int
ïï 
result
ïï 
=
ïï 
$num
ïï 
;
ïï 
DateTime
ññ 
past
ññ 
=
ññ 
(
ññ 
thisDate
ññ %
>
ññ& '
thatDate
ññ( 0
)
ññ0 1
?
ññ2 3
thatDate
ññ4 <
:
ññ= >
thisDate
ññ? G
;
ññG H
DateTime
óó 
future
óó 
=
óó 
(
óó 
thisDate
óó '
>
óó( )
thatDate
óó* 2
)
óó2 3
?
óó4 5
thisDate
óó6 >
:
óó? @
thatDate
óóA I
;
óóI J
int
òò 
	totalDays
òò 
=
òò 
(
òò 
future
òò #
-
òò$ %
past
òò& *
)
òò* +
.
òò+ ,
Days
òò, 0
+
òò1 2
$num
òò3 4
;
òò4 5
int
ôô 
temp
ôô 
=
ôô 
(
ôô 
int
ôô 
)
ôô 
(
ôô 
(
ôô 
TimeSpan
ôô &
.
ôô& '
	FromTicks
ôô' 0
(
ôô0 1
Math
ôô1 5
.
ôô5 6
Abs
ôô6 9
(
ôô9 :
future
ôô: @
.
ôô@ A
Ticks
ôôA F
-
ôôG H
past
ôôI M
.
ôôM N
Ticks
ôôN S
)
ôôS T
)
ôôT U
)
ôôU V
.
ôôV W
	TotalDays
ôôW `
)
ôô` a
;
ôôa b
int
õõ 
	remainder
õõ 
=
õõ 
	totalDays
õõ %
%
õõ& '
$num
õõ( )
;
õõ) *
int
úú 
adj
úú 
=
úú 
future
úú 
.
úú 
	DayOfWeek
úú &
-
úú' (
	dayOfWeek
úú) 2
;
úú2 3
result
ûû 
=
ûû 
	totalDays
ûû 
/
ûû  
$num
ûû! "
;
ûû" #
adj
üü 
+=
üü 
(
üü 
adj
üü 
<
üü 
$num
üü 
)
üü 
?
üü 
$num
üü  
:
üü! "
$num
üü# $
;
üü$ %
result
†† 
+=
†† 
(
†† 
	remainder
††  
>=
††! #
adj
††$ '
)
††' (
?
††) *
$num
††+ ,
:
††- .
$num
††/ 0
;
††0 1
return
°° 
result
°° 
;
°° 
}
¢¢ 	
public
§§ 
static
§§ 
bool
§§ 
	IsBetween
§§ $
(
§§$ %
this
§§% )
DateTime
§§* 2
thisDate
§§3 ;
,
§§; <
DateTime
§§= E
date1
§§F K
,
§§K L
DateTime
§§M U
date2
§§V [
)
§§[ \
{
•• 	
bool
¶¶ 
result
¶¶ 
=
¶¶ 
false
¶¶ 
;
¶¶  
if
ßß 
(
ßß 
date1
ßß 
!=
ßß 
date2
ßß 
)
ßß 
{
®® 
result
©© 
=
©© 
(
©© 
thisDate
©© "
.
©©" #
Ticks
©©# (
>=
©©) +
Math
©©, 0
.
©©0 1
Min
©©1 4
(
©©4 5
date1
©©5 :
.
©©: ;
Ticks
©©; @
,
©©@ A
date2
©©B G
.
©©G H
Ticks
©©H M
)
©©M N
&&
©©O Q
thisDate
™™ "
.
™™" #
Ticks
™™# (
<=
™™) +
Math
™™, 0
.
™™0 1
Max
™™1 4
(
™™4 5
date1
™™5 :
.
™™: ;
Ticks
™™; @
,
™™@ A
date2
™™B G
.
™™G H
Ticks
™™H M
)
™™M N
)
™™N O
;
™™O P
}
´´ 
return
¨¨ 
result
¨¨ 
;
¨¨ 
}
≠≠ 	
public
ØØ 
static
ØØ 
bool
ØØ 
	IsBetween
ØØ $
(
ØØ$ %
this
ØØ% )
TimeSpan
ØØ* 2
thisTime
ØØ3 ;
,
ØØ; <
TimeSpan
ØØ= E
time1
ØØF K
,
ØØK L
TimeSpan
ØØM U
time2
ØØV [
)
ØØ[ \
{
∞∞ 	
bool
±± 
result
±± 
=
±± 
false
±± 
;
±±  
if
≤≤ 
(
≤≤ 
time1
≤≤ 
.
≤≤ 
TotalMilliseconds
≤≤ '
!=
≤≤( *
time2
≤≤+ 0
.
≤≤0 1
TotalMilliseconds
≤≤1 B
)
≤≤B C
{
≥≥ 
result
¥¥ 
=
¥¥ 
(
¥¥ 
thisTime
¥¥ "
.
¥¥" #
TotalMilliseconds
¥¥# 4
>=
¥¥5 7
Math
¥¥8 <
.
¥¥< =
Min
¥¥= @
(
¥¥@ A
time1
¥¥A F
.
¥¥F G
TotalMilliseconds
¥¥G X
,
¥¥X Y
time2
¥¥Z _
.
¥¥_ `
TotalMilliseconds
¥¥` q
)
¥¥q r
&&
¥¥s u
thisTime
µµ "
.
µµ" #
TotalMilliseconds
µµ# 4
<=
µµ5 7
Math
µµ8 <
.
µµ< =
Max
µµ= @
(
µµ@ A
time1
µµA F
.
µµF G
TotalMilliseconds
µµG X
,
µµX Y
time2
µµZ _
.
µµ_ `
TotalMilliseconds
µµ` q
)
µµq r
)
µµr s
;
µµs t
}
∂∂ 
return
∑∑ 
result
∑∑ 
;
∑∑ 
}
∏∏ 	
public
∫∫ 
static
∫∫ 
DateTime
∫∫ 
FirstDayOfWeek
∫∫ -
(
∫∫- .
this
∫∫. 2
DateTime
∫∫3 ;
thisDate
∫∫< D
)
∫∫D E
{
ªª 	
DateTime
ºº 
newDate
ºº 
=
ºº 
thisDate
ºº '
;
ºº' (
CultureInfo
ΩΩ 
cultureInfo
ΩΩ #
=
ΩΩ$ %
System
ΩΩ& ,
.
ΩΩ, -
	Threading
ΩΩ- 6
.
ΩΩ6 7
Thread
ΩΩ7 =
.
ΩΩ= >
CurrentThread
ΩΩ> K
.
ΩΩK L
CurrentCulture
ΩΩL Z
;
ΩΩZ [
newDate
ææ 
=
ææ 
newDate
ææ 
.
ææ 
AddDays
ææ %
(
ææ% &
-
ææ& '
(
ææ' (
newDate
ææ( /
.
ææ/ 0
	DayOfWeek
ææ0 9
-
ææ: ;
cultureInfo
ææ< G
.
ææG H
DateTimeFormat
ææH V
.
ææV W
FirstDayOfWeek
ææW e
)
ææe f
)
ææf g
;
ææg h
return
øø 
newDate
øø 
;
øø 
}
¿¿ 	
public
¬¬ 
static
¬¬ 
DateTime
¬¬ 
NormalizeToMinute
¬¬ 0
(
¬¬0 1
this
¬¬1 5
DateTime
¬¬6 >
thisDate
¬¬? G
,
¬¬G H
int
¬¬I L
delta
¬¬M R
=
¬¬S T
$num
¬¬U W
)
¬¬W X
{
√√ 	
DateTime
ƒƒ 
newDate
ƒƒ 
=
ƒƒ 
thisDate
ƒƒ '
;
ƒƒ' (
int
≈≈ 
minutesToAdd
≈≈ 
=
≈≈ 
(
≈≈  
newDate
≈≈  '
.
≈≈' (
Second
≈≈( .
<
≈≈/ 0
delta
≈≈1 6
)
≈≈6 7
?
≈≈8 9
$num
≈≈: ;
:
≈≈< =
$num
≈≈> ?
;
≈≈? @
newDate
∆∆ 
=
∆∆ 
newDate
∆∆ 
.
∆∆ 

AddMinutes
∆∆ (
(
∆∆( )
minutesToAdd
∆∆) 5
)
∆∆5 6
.
∆∆6 7
	SetSecond
∆∆7 @
(
∆∆@ A
$num
∆∆A B
)
∆∆B C
.
∆∆C D
SetMillisecond
∆∆D R
(
∆∆R S
$num
∆∆S T
)
∆∆T U
;
∆∆U V
return
«« 
newDate
«« 
;
«« 
}
»» 	
}
ÀÀ 
}ÃÃ ∞
jD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\ObjectExtensions\ExtendDictionary.cs
	namespace 	
ObjectExtensions
 
{ 
public		 
static		 
class		 
ExtendDictionary		 %
{

 
} 
} Ü
kD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\ObjectExtensions\ExtendEnumerators.cs
	namespace 	
ObjectExtensions
 
{ 
public		 
static		 
class		 
ExtendEnumerators		 &
{

 
public 
static	 
bool 
TryParse 
< 
T 
>  
(  !
this! %
Enum& *
theEnum+ 2
,2 3
string4 :
value; @
,@ A
outB E
TF G
returnValueH S
)S T
{ 
bool 
result 
= 
false 
; 
returnValue 
= 
default 
( 
T 
) 
; 
int 
ordinal 
; 
if 
( 
Int32 
. 
TryParse 
( 
value 
, 
out  
ordinal! (
)( )
)) *
{ 
result 

= 
theEnum 
. 
TryParse 
( 
ordinal %
,% &
out' *
returnValue+ 6
)6 7
;7 8
} 
return 	
result
 
; 
} 
public 
static	 
bool 
TryParse 
< 
T 
>  
(  !
this! %
Enum& *
theEnum+ 2
,2 3
int4 7
value8 =
,= >
out? B
TC D
returnValueE P
)P Q
{ 
bool 
result 
= 
false 
; 
returnValue 
= 
default 
( 
T 
) 
; 
if   
(   
Enum   
.   
	IsDefined   
(   
typeof   
(   
T   
)   
,    
value  ! &
)  & '
)  ' (
{!! 
returnValue"" 
="" 
("" 
T"" 
)"" 
("" 
object"" 
)"" 
value"" "
;""" #
result## 

=## 
true## 
;## 
}$$ 
return%% 	
result%%
 
;%% 
}&& 
}'' 
}(( 
jD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\ObjectExtensions\ExtendExceptions.cs
	namespace 	
ObjectExtensions
 
{ 
public		 
static		 
class		 
ExtendExceptions		 %
{

 
public 
static	 
T 
FindInnerException $
<$ %
T% &
>& '
(' (
this( ,
	Exception- 6
ex7 9
)9 :
where; @
TA B
:C D
	ExceptionE N
{ 
if 
( 
! 
ex 

.
 
GetType 
( 
) 
. 
Equals 
( 
typeof "
(" #
T# $
)$ %
)% &
)& '
{ 
	Exception 
inner 
= 
ex 
. 
InnerException '
;' (
if 
( 
inner 
== 
null 
) 
{ 
return 
null 
; 
} 
else 
{ 
if 
( 	
inner	 
. 
GetType 
( 
) 
. 
Equals 
(  
typeof  &
(& '
T' (
)( )
)) *
)* +
{ 
return 
( 
T 
) 
inner 
; 
} 
else 	
{ 
return 
inner 
. 
FindInnerException %
<% &
T& '
>' (
(( )
)) *
;* +
} 
} 
} 
else   
{!! 
return"" 

("" 
T"" 
)"" 
ex"" 
;"" 
}## 
}$$ 
public&& 
static&&	 
string&& 
GetNestedExceptions&& *
(&&* +
this&&+ /
	Exception&&0 9
ex&&: <
)&&< =
{'' 
StringBuilder(( 
str(( 
=(( 
new(( 
StringBuilder(( (
(((( )
)(() *
;((* +
str)) 
.)) 
AppendFormat)) 
()) 
$str)) 
,)) 
ex)) 
.)) 
Message)) %
)))% &
.))& '

AppendLine))' 1
())1 2
)))2 3
;))3 4
if** 
(** 
ex** 	
.**	 

InnerException**
 
!=** 
null**  
)**  !
{++ 
str,, 
.,, 
Append,, 
(,, 
ex,, 
.,, 
InnerException,,  
.,,  !
GetNestedExceptions,,! 4
(,,4 5
),,5 6
),,6 7
;,,7 8
}-- 
return.. 	
str..
 
... 
ToString.. 
(.. 
).. 
;.. 
}// 
}00 
}11 ƒ÷
kD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\ObjectExtensions\ExtendIEnumerable.cs
	namespace 	
ObjectExtensions
 
{		 
public

 

static

 
class

 
ExtendIEnumerable

 )
{ 
public 
static 
IEnumerable !
<! "
T" #
># $

DistinctBy% /
</ 0
T0 1
,1 2
TKey3 7
>7 8
(8 9
this9 =
IEnumerable> I
<I J
TJ K
>K L
itemsM R
,R S
FuncT X
<X Y
TY Z
,Z [
TKey\ `
>` a
propertyb j
)j k
{ 	
return 
items 
. 
GroupBy  
(  !
property! )
)) *
.* +
Select+ 1
(1 2
x2 3
=>4 6
x7 8
.8 9
First9 >
(> ?
)? @
)@ A
;A B
} 	
public 
static 
TSource 
MinBy #
<# $
TSource$ +
,+ ,
TKey- 1
>1 2
(2 3
this3 7
IEnumerable8 C
<C D
TSourceD K
>K L
sourceM S
,S T
FuncU Y
<Y Z
TSourceZ a
,a b
TKeyc g
>g h
selectori q
)q r
{ 	
return 
source 
. 
MinBy 
(  
selector  (
,( )
Comparer* 2
<2 3
TKey3 7
>7 8
.8 9
Default9 @
)@ A
;A B
} 	
public 
static 
TSource 
MinBy #
<# $
TSource$ +
,+ ,
TKey- 1
>1 2
(2 3
this3 7
IEnumerable8 C
<C D
TSourceD K
>K L
sourceM S
,S T
FuncU Y
<Y Z
TSourceZ a
,a b
TKeyc g
>g h
selectori q
,q r
	IComparers |
<| }
TKey	} Å
>
Å Ç
comparer
É ã
)
ã å
{ 	
if 
( 
source 
== 
null 
) 
throw  %
new& )!
ArgumentNullException* ?
(? @
$str@ H
)H I
;I J
if 
( 
selector 
== 
null  
)  !
throw" '
new( +!
ArgumentNullException, A
(A B
$strB L
)L M
;M N
if 
( 
comparer 
== 
null  
)  !
throw" '
new( +!
ArgumentNullException, A
(A B
$strB L
)L M
;M N
using 
( 
var 
sourceIterator %
=& '
source( .
.. /
GetEnumerator/ <
(< =
)= >
)> ?
{ 
if 
( 
! 
sourceIterator #
.# $
MoveNext$ ,
(, -
)- .
). /
{ 
throw 
new %
InvalidOperationException 7
(7 8
$str8 W
)W X
;X Y
}   
var!! 
min!! 
=!! 
sourceIterator!! (
.!!( )
Current!!) 0
;!!0 1
var"" 
minKey"" 
="" 
selector"" %
(""% &
min""& )
)"") *
;""* +
while## 
(## 
sourceIterator## %
.##% &
MoveNext##& .
(##. /
)##/ 0
)##0 1
{$$ 
var%% 
	candidate%% !
=%%" #
sourceIterator%%$ 2
.%%2 3
Current%%3 :
;%%: ;
var&& 
candidateProjected&& *
=&&+ ,
selector&&- 5
(&&5 6
	candidate&&6 ?
)&&? @
;&&@ A
if'' 
('' 
comparer''  
.''  !
Compare''! (
(''( )
candidateProjected'') ;
,''; <
minKey''= C
)''C D
<''E F
$num''G H
)''H I
{(( 
min)) 
=)) 
	candidate)) '
;))' (
minKey** 
=**  
candidateProjected**! 3
;**3 4
}++ 
},, 
return-- 
min-- 
;-- 
}.. 
}// 	
public11 
static11 
TSource11 
MaxBy11 #
<11# $
TSource11$ +
,11+ ,
TKey11- 1
>111 2
(112 3
this113 7
IEnumerable118 C
<11C D
TSource11D K
>11K L
source11M S
,11S T
Func11U Y
<11Y Z
TSource11Z a
,11a b
TKey11c g
>11g h
selector11i q
)11q r
{22 	
return33 
source33 
.33 
MaxBy33 
(33  
selector33  (
,33( )
Comparer33* 2
<332 3
TKey333 7
>337 8
.338 9
Default339 @
)33@ A
;33A B
}44 	
public66 
static66 
TSource66 
MaxBy66 #
<66# $
TSource66$ +
,66+ ,
TKey66- 1
>661 2
(662 3
this663 7
IEnumerable668 C
<66C D
TSource66D K
>66K L
source66M S
,66S T
Func66U Y
<66Y Z
TSource66Z a
,66a b
TKey66c g
>66g h
selector66i q
,66q r
	IComparer66s |
<66| }
TKey	66} Å
>
66Å Ç
comparer
66É ã
)
66ã å
{77 	
if88 
(88 
source88 
==88 
null88 
)88 
throw88  %
new88& )!
ArgumentNullException88* ?
(88? @
$str88@ H
)88H I
;88I J
if99 
(99 
selector99 
==99 
null99  
)99  !
throw99" '
new99( +!
ArgumentNullException99, A
(99A B
$str99B L
)99L M
;99M N
if:: 
(:: 
comparer:: 
==:: 
null::  
)::  !
throw::" '
new::( +!
ArgumentNullException::, A
(::A B
$str::B L
)::L M
;::M N
using;; 
(;; 
var;; 
sourceIterator;; %
=;;& '
source;;( .
.;;. /
GetEnumerator;;/ <
(;;< =
);;= >
);;> ?
{<< 
if== 
(== 
!== 
sourceIterator== #
.==# $
MoveNext==$ ,
(==, -
)==- .
)==. /
{>> 
throw?? 
new?? %
InvalidOperationException?? 7
(??7 8
$str??8 W
)??W X
;??X Y
}@@ 
varAA 
maxAA 
=AA 
sourceIteratorAA (
.AA( )
CurrentAA) 0
;AA0 1
varBB 
maxKeyBB 
=BB 
selectorBB %
(BB% &
maxBB& )
)BB) *
;BB* +
whileCC 
(CC 
sourceIteratorCC %
.CC% &
MoveNextCC& .
(CC. /
)CC/ 0
)CC0 1
{DD 
varEE 
	candidateEE !
=EE" #
sourceIteratorEE$ 2
.EE2 3
CurrentEE3 :
;EE: ;
varFF 
candidateProjectedFF *
=FF+ ,
selectorFF- 5
(FF5 6
	candidateFF6 ?
)FF? @
;FF@ A
ifGG 
(GG 
comparerGG  
.GG  !
CompareGG! (
(GG( )
candidateProjectedGG) ;
,GG; <
maxKeyGG= C
)GGC D
>GGE F
$numGGG H
)GGH I
{HH 
maxII 
=II 
	candidateII '
;II' (
maxKeyJJ 
=JJ  
candidateProjectedJJ! 3
;JJ3 4
}KK 
}LL 
returnMM 
maxMM 
;MM 
}NN 
}OO 	
publicQQ 
staticQQ 
TQQ 
MaxByQQ 
<QQ 
TQQ 
>QQ  
(QQ  !
thisQQ! %
IEnumerableQQ& 1
<QQ1 2
TQQ2 3
>QQ3 4
listQQ5 9
,QQ9 :
stringQQ; A
valuePropertyNameQQB S
)QQS T
{RR 	
TSS 
resultSS 
=SS 
defaultSS 
(SS 
TSS  
)SS  !
;SS! "
PropertyInfoTT 
infoTT 
=TT 
typeofTT  &
(TT& '
TTT' (
)TT( )
.TT) *
GetPropertyTT* 5
(TT5 6
valuePropertyNameTT6 G
)TTG H
;TTH I
ifUU 
(UU 
infoUU 
!=UU 
nullUU 
&&UU 
infoUU  $
.UU$ %
PropertyTypeUU% 1
.UU1 2
	IsNumericUU2 ;
(UU; <
)UU< =
)UU= >
{VV 
usingWW 
(WW 
varWW 
looperWW !
=WW" #
listWW$ (
.WW( )
GetEnumeratorWW) 6
(WW6 7
)WW7 8
)WW8 9
{XX 
ifYY 
(YY 
!YY 
looperYY 
.YY  
MoveNextYY  (
(YY( )
)YY) *
)YY* +
{ZZ 
throw[[ 
new[[ !%
InvalidOperationException[[" ;
([[; <
$str[[< [
)[[[ \
;[[\ ]
}\\ 
T]] 
max]] 
=]] 
default]] #
(]]# $
T]]$ %
)]]% &
;]]& '
while^^ 
(^^ 
looper^^ !
.^^! "
MoveNext^^" *
(^^* +
)^^+ ,
)^^, -
{__ 
double`` 
maxValue`` '
=``( )
(``* +
double``+ 1
)``1 2
Convert``2 9
.``9 :

ChangeType``: D
(``D E
info``E I
.``I J
GetValue``J R
(``R S
max``S V
,``V W
null``X \
)``\ ]
,``] ^
typeof``_ e
(``e f
double``f l
)``l m
)``m n
;``n o
Taa 
itemaa 
=aa  
looperaa! '
.aa' (
Currentaa( /
;aa/ 0
objectbb 
	propValuebb (
=bb) *
infobb+ /
.bb/ 0
GetValuebb0 8
(bb8 9
itembb9 =
,bb= >
nullbb? C
)bbC D
;bbD E
doublecc 
numbercc %
=cc& '
(cc( )
doublecc) /
)cc/ 0
Convertcc0 7
.cc7 8

ChangeTypecc8 B
(ccB C
	propValueccC L
,ccL M
typeofccN T
(ccT U
doubleccU [
)cc[ \
)cc\ ]
;cc] ^
ifdd 
(dd 
maxdd 
.dd  
Equalsdd  &
(dd& '
defaultdd' .
(dd. /
Tdd/ 0
)dd0 1
)dd1 2
||dd3 5
maxValuedd6 >
<dd? @
numberddA G
)ddG H
{ee 
maxff 
=ff  !
itemff" &
;ff& '
}gg 
}hh 
resultii 
=ii 
maxii  
;ii  !
}jj 
}kk 
returnll 
resultll 
;ll 
}mm 	
publicoo 
staticoo 
Typeoo 
GetEnumeratedTypeoo ,
<oo, -
Too- .
>oo. /
(oo/ 0
thisoo0 4
IEnumerableoo5 @
<oo@ A
TooA B
>ooB C
_ooD E
)ooE F
{pp 	
returnqq 
typeofqq 
(qq 
Tqq 
)qq 
;qq 
}rr 	
publicvv 
enumvv 
	TrendTypevv 
{vv 
Exponentialvv  +
,vv+ ,
Linearvv- 3
,vv3 4
Logarithmicvv5 @
,vv@ A
PointToPointvvB N
,vvN O

PolynomialvvP Z
,vvZ [
Powervv\ a
,vva b
MovingAveragevvc p
}vvq r
;vvr s
publicxx 
classxx 
PointDxx 
{yy 	
publiczz 
doublezz 
Xzz 
{zz 
getzz !
;zz! "
setzz# &
;zz& '
}zz( )
public{{ 
double{{ 
Y{{ 
{{{ 
get{{ !
;{{! "
set{{# &
;{{& '
}{{( )
public|| 
PointD|| 
(|| 
)|| 
{}} 
this~~ 
.~~ 
X~~ 
=~~ 
Double~~ 
.~~  
NegativeInfinity~~  0
;~~0 1
this 
. 
Y 
= 
Double 
.  
NegativeInfinity  0
;0 1
}
ÄÄ 
public
ÅÅ 
PointD
ÅÅ 
(
ÅÅ 
double
ÅÅ  
x
ÅÅ! "
,
ÅÅ" #
double
ÅÅ$ *
y
ÅÅ+ ,
)
ÅÅ, -
{
ÇÇ 
this
ÉÉ 
.
ÉÉ 
X
ÉÉ 
=
ÉÉ 
x
ÉÉ 
;
ÉÉ 
this
ÑÑ 
.
ÑÑ 
Y
ÑÑ 
=
ÑÑ 
y
ÑÑ 
;
ÑÑ 
}
ÖÖ 
}
ÜÜ 	
public
àà 
static
àà 
int
àà 
IndexOf
àà !
<
àà! "
T
àà" #
>
àà# $
(
àà$ %
this
àà% )
IEnumerable
àà* 5
<
àà5 6
T
àà6 7
>
àà7 8
list
àà9 =
,
àà= >
T
àà? @
item
ààA E
)
ààE F
{
ââ 	
int
ää 
index
ää 
=
ää 
-
ää 
$num
ää 
;
ää 
int
ãã 
counter
ãã 
=
ãã 
$num
ãã 
;
ãã 
using
åå 
(
åå 
var
åå 
indexer
åå 
=
åå  
list
åå! %
.
åå% &
GetEnumerator
åå& 3
(
åå3 4
)
åå4 5
)
åå5 6
{
çç 
while
éé 
(
éé 
indexer
éé 
.
éé 
MoveNext
éé '
(
éé' (
)
éé( )
)
éé) *
{
èè 
if
êê 
(
êê 
indexer
êê 
.
êê  
Current
êê  '
.
êê' (
Equals
êê( .
(
êê. /
item
êê/ 3
)
êê3 4
)
êê4 5
{
ëë 
index
íí 
=
íí 
counter
íí  '
;
íí' (
break
ìì 
;
ìì 
}
îî 
counter
ïï 
++
ïï 
;
ïï 
}
ññ 
}
óó 
return
òò 
index
òò 
;
òò 
}
ôô 	
public
õõ 
static
õõ 
IEnumerable
õõ !
<
õõ! "
T
õõ" #
>
õõ# $
SubsetByIndex
õõ% 2
<
õõ2 3
T
õõ3 4
>
õõ4 5
(
õõ5 6
this
õõ6 :
IEnumerable
õõ; F
<
õõF G
T
õõG H
>
õõH I
list
õõJ N
,
õõN O
int
õõP S

startIndex
õõT ^
,
õõ^ _
int
õõ` c
endIndex
õõd l
=
õõm n
-
õõo p
$num
õõp q
)
õõq r
{
úú 	
List
ùù 
<
ùù 
T
ùù 
>
ùù 
result
ùù 
=
ùù 
new
ùù  
List
ùù! %
<
ùù% &
T
ùù& '
>
ùù' (
(
ùù( )
)
ùù) *
;
ùù* +
if
ûû 
(
ûû 
list
ûû 
.
ûû 
Count
ûû 
(
ûû 
)
ûû 
>
ûû 
$num
ûû  
)
ûû  !
{
üü 
if
†† 
(
†† 

startIndex
†† 
<
††  
$num
††! "
||
††# %

startIndex
††& 0
>=
††1 3
list
††4 8
.
††8 9
Count
††9 >
(
††> ?
)
††? @
)
††@ A
{
°° 
if
¢¢ 
(
¢¢ 

ExtendList
¢¢ "
.
¢¢" #&
throwExtensionExceptions
¢¢# ;
)
¢¢; <
{
££ 
throw
§§ 
new
§§ !)
ArgumentOutOfRangeException
§§" =
(
§§= >
(
§§> ?

startIndex
§§? I
<
§§J K
$num
§§L M
)
§§M N
?
§§O P
$str
§§Q a
:
§§b c
$str
§§d 
)§§ Ä
;§§Ä Å
}
•• 
}
¶¶ 
if
ßß 
(
ßß 
endIndex
ßß 
>=
ßß 
$num
ßß  !
)
ßß! "
{
®® 
if
©© 
(
©© 
endIndex
©©  
<
©©! "

startIndex
©©# -
||
©©. 0
endIndex
©©1 9
>=
©©: <
list
©©= A
.
©©A B
Count
©©B G
(
©©G H
)
©©H I
)
©©I J
{
™™ 
throw
´´ 
new
´´ !)
ArgumentOutOfRangeException
´´" =
(
´´= >
(
´´> ?
endIndex
´´? G
<
´´H I

startIndex
´´J T
)
´´T U
?
´´V W
$str
´´X o
:
´´p q
$str´´r ã
)´´ã å
;´´å ç
}
¨¨ 
}
≠≠ 
else
ÆÆ 
{
ØØ 
endIndex
∞∞ 
=
∞∞ 
list
∞∞ #
.
∞∞# $
Count
∞∞$ )
(
∞∞) *
)
∞∞* +
-
∞∞, -
$num
∞∞. /
;
∞∞/ 0
}
±± 
result
≥≥ 
=
≥≥ 
list
≥≥ 
.
≥≥ 
Where
≥≥ #
(
≥≥# $
x
≥≥$ %
=>
≥≥& (
list
≥≥) -
.
≥≥- .
IndexOf
≥≥. 5
(
≥≥5 6
x
≥≥6 7
)
≥≥7 8
>=
≥≥9 ;

startIndex
≥≥< F
&&
≥≥G I
list
≥≥J N
.
≥≥N O
IndexOf
≥≥O V
(
≥≥V W
x
≥≥W X
)
≥≥X Y
<=
≥≥Z \
endIndex
≥≥] e
)
≥≥e f
.
≥≥f g
ToList
≥≥g m
(
≥≥m n
)
≥≥n o
;
≥≥o p
}
¥¥ 
return
µµ 
result
µµ 
;
µµ 
}
∂∂ 	
public
∏∏ 
static
∏∏ 
double
∏∏ 
CalcLeastSquares
∏∏ -
(
∏∏- .
IEnumerable
∏∏. 9
<
∏∏9 :
PointD
∏∏: @
>
∏∏@ A
points
∏∏B H
,
∏∏H I
double
∏∏J P
x
∏∏Q R
)
∏∏R S
{
ππ 	
double
∫∫ 
result
∫∫ 
=
∫∫ 
$num
∫∫ 
;
∫∫ 
if
ªª 
(
ªª 
points
ªª 
!=
ªª 
null
ªª 
&&
ªª !
points
ªª" (
.
ªª( )
Count
ªª) .
(
ªª. /
)
ªª/ 0
>=
ªª1 3
$num
ªª4 5
)
ªª5 6
{
ºº 
double
ΩΩ 
slope
ΩΩ 
=
ΩΩ 
ExtendIEnumerable
ΩΩ 0
.
ΩΩ0 1
	CalcSlope
ΩΩ1 :
(
ΩΩ: ;
points
ΩΩ; A
)
ΩΩA B
;
ΩΩB C
double
ææ 

yIntercept
ææ !
=
ææ" #
ExtendIEnumerable
ææ$ 5
.
ææ5 6
CalcYIntercept
ææ6 D
(
ææD E
points
ææE K
,
ææK L
slope
ææM R
)
ææR S
;
ææS T
result
øø 
=
øø 
(
øø 
slope
øø 
*
øø  !
x
øø" #
)
øø# $
+
øø% &

yIntercept
øø' 1
;
øø1 2
}
¿¿ 
return
¡¡ 
result
¡¡ 
;
¡¡ 
}
¬¬ 	
private
ƒƒ 
static
ƒƒ 
double
ƒƒ 
	CalcSlope
ƒƒ '
(
ƒƒ' (
IEnumerable
ƒƒ( 3
<
ƒƒ3 4
PointD
ƒƒ4 :
>
ƒƒ: ;
points
ƒƒ< B
)
ƒƒB C
{
≈≈ 	
double
∆∆ 
result
∆∆ 
=
∆∆ 
$num
∆∆ 
;
∆∆ 
if
«« 
(
«« 
points
«« 
!=
«« 
null
«« 
&&
«« !
points
««" (
.
««( )
Count
««) .
(
««. /
)
««/ 0
>=
««1 3
$num
««4 5
)
««5 6
{
»» 
double
…… 
xAvg
…… 
=
…… 
points
…… $
.
……$ %
Average
……% ,
(
……, -
p
……- .
=>
……/ 1
p
……2 3
.
……3 4
X
……4 5
)
……5 6
;
……6 7
double
   
yAvg
   
=
   
points
   $
.
  $ %
Average
  % ,
(
  , -
p
  - .
=>
  / 1
p
  2 3
.
  3 4
Y
  4 5
)
  5 6
;
  6 7
double
ÀÀ 
dividend
ÀÀ 
=
ÀÀ  !
points
ÀÀ" (
.
ÀÀ( )
Sum
ÀÀ) ,
(
ÀÀ, -
p
ÀÀ- .
=>
ÀÀ/ 1
(
ÀÀ2 3
p
ÀÀ3 4
.
ÀÀ4 5
X
ÀÀ5 6
-
ÀÀ7 8
xAvg
ÀÀ9 =
)
ÀÀ= >
*
ÀÀ? @
(
ÀÀA B
p
ÀÀB C
.
ÀÀC D
Y
ÀÀD E
-
ÀÀF G
yAvg
ÀÀH L
)
ÀÀL M
)
ÀÀM N
;
ÀÀN O
double
ÃÃ 
divisor
ÃÃ 
=
ÃÃ  
(
ÃÃ! "
double
ÃÃ" (
)
ÃÃ( )
points
ÃÃ) /
.
ÃÃ/ 0
Sum
ÃÃ0 3
(
ÃÃ3 4
p
ÃÃ4 5
=>
ÃÃ6 8
Math
ÃÃ9 =
.
ÃÃ= >
Pow
ÃÃ> A
(
ÃÃA B
p
ÃÃB C
.
ÃÃC D
X
ÃÃD E
-
ÃÃF G
xAvg
ÃÃH L
,
ÃÃL M
$num
ÃÃN O
)
ÃÃO P
)
ÃÃP Q
;
ÃÃQ R
result
ÕÕ 
=
ÕÕ 
dividend
ÕÕ !
/
ÕÕ" #
divisor
ÕÕ$ +
;
ÕÕ+ ,
}
ŒŒ 
return
œœ 
result
œœ 
;
œœ 
}
–– 	
private
““ 
static
““ 
double
““ 
CalcYIntercept
““ ,
(
““, -
IEnumerable
““- 8
<
““8 9
PointD
““9 ?
>
““? @
points
““A G
,
““G H
double
““I O
slope
““P U
)
““U V
{
”” 	
double
‘‘ 
result
‘‘ 
=
‘‘ 
$num
‘‘ 
;
‘‘ 
if
’’ 
(
’’ 
points
’’ 
!=
’’ 
null
’’ 
&&
’’ !
points
’’" (
.
’’( )
Count
’’) .
(
’’. /
)
’’/ 0
>=
’’1 3
$num
’’4 5
)
’’5 6
{
÷÷ 
double
◊◊ 
xAvg
◊◊ 
=
◊◊ 
points
◊◊ $
.
◊◊$ %
Average
◊◊% ,
(
◊◊, -
p
◊◊- .
=>
◊◊/ 1
p
◊◊2 3
.
◊◊3 4
X
◊◊4 5
)
◊◊5 6
;
◊◊6 7
double
ÿÿ 
yAvg
ÿÿ 
=
ÿÿ 
points
ÿÿ $
.
ÿÿ$ %
Average
ÿÿ% ,
(
ÿÿ, -
p
ÿÿ- .
=>
ÿÿ/ 1
p
ÿÿ2 3
.
ÿÿ3 4
Y
ÿÿ4 5
)
ÿÿ5 6
;
ÿÿ6 7
result
ŸŸ 
=
ŸŸ 
yAvg
ŸŸ 
-
ŸŸ 
(
ŸŸ  !
slope
ŸŸ! &
*
ŸŸ' (
xAvg
ŸŸ) -
)
ŸŸ- .
;
ŸŸ. /
}
⁄⁄ 
return
€€ 
result
€€ 
;
€€ 
}
‹‹ 	
public
ﬁﬁ 
static
ﬁﬁ 
double
ﬁﬁ 
[
ﬁﬁ 
]
ﬁﬁ 
CalcLinearTrend
ﬁﬁ .
<
ﬁﬁ. /
T
ﬁﬁ/ 0
>
ﬁﬁ0 1
(
ﬁﬁ1 2
this
ﬁﬁ2 6
IEnumerable
ﬁﬁ7 B
<
ﬁﬁB C
T
ﬁﬁC D
>
ﬁﬁD E
list
ﬁﬁF J
,
ﬁﬁJ K
PropertyInfo
ﬁﬁL X
info
ﬁﬁY ]
)
ﬁﬁ] ^
{
ﬂﬂ 	
double
‡‡ 
[
‡‡ 
]
‡‡ 
points
‡‡ 
=
‡‡ 
new
‡‡ !
double
‡‡" (
[
‡‡( )
]
‡‡) *
{
‡‡+ ,
$num
‡‡- /
,
‡‡/ 0
$num
‡‡1 3
}
‡‡4 5
;
‡‡5 6
if
·· 
(
·· 
list
·· 
!=
·· 
null
·· 
&&
·· 
list
··  $
.
··$ %
Count
··% *
(
··* +
)
··+ ,
>
··- .
$num
··/ 0
&&
··1 3
info
··4 8
!=
··9 ;
null
··< @
)
··@ A
{
‚‚ 
List
„„ 
<
„„ 
PointD
„„ 
>
„„ 
data
„„ !
=
„„" #
new
„„$ '
List
„„( ,
<
„„, -
PointD
„„- 3
>
„„3 4
(
„„4 5
)
„„5 6
;
„„6 7
foreach
‰‰ 
(
‰‰ 
T
‰‰ 
item
‰‰ 
in
‰‰  "
list
‰‰# '
)
‰‰' (
{
ÂÂ 
object
ÊÊ 
	propValue
ÊÊ $
=
ÊÊ% &
info
ÊÊ' +
.
ÊÊ+ ,
GetValue
ÊÊ, 4
(
ÊÊ4 5
item
ÊÊ5 9
,
ÊÊ9 :
null
ÊÊ; ?
)
ÊÊ? @
;
ÊÊ@ A
double
ÁÁ 
y
ÁÁ 
=
ÁÁ 
(
ÁÁ  
double
ÁÁ  &
)
ÁÁ& '
Convert
ÁÁ' .
.
ÁÁ. /

ChangeType
ÁÁ/ 9
(
ÁÁ9 :
	propValue
ÁÁ: C
,
ÁÁC D
typeof
ÁÁE K
(
ÁÁK L
double
ÁÁL R
)
ÁÁR S
)
ÁÁS T
;
ÁÁT U
if
ËË 
(
ËË 
y
ËË 
>
ËË 
$num
ËË  
)
ËË  !
{
ÈÈ 
double
ÍÍ 
x
ÍÍ  
=
ÍÍ! "
(
ÍÍ# $
double
ÍÍ$ *
)
ÍÍ* +
(
ÍÍ+ ,
list
ÍÍ, 0
.
ÍÍ0 1
IndexOf
ÍÍ1 8
(
ÍÍ8 9
item
ÍÍ9 =
)
ÍÍ= >
)
ÍÍ> ?
;
ÍÍ? @
data
ÎÎ 
.
ÎÎ 
Add
ÎÎ  
(
ÎÎ  !
new
ÎÎ! $
PointD
ÎÎ% +
(
ÎÎ+ ,
x
ÎÎ, -
,
ÎÎ- .
y
ÎÎ/ 0
)
ÎÎ0 1
)
ÎÎ1 2
;
ÎÎ2 3
}
ÏÏ 
}
ÌÌ 
points
ÓÓ 
[
ÓÓ 
$num
ÓÓ 
]
ÓÓ 
=
ÓÓ 
ExtendIEnumerable
ÓÓ -
.
ÓÓ- .
CalcLeastSquares
ÓÓ. >
(
ÓÓ> ?
data
ÓÓ? C
,
ÓÓC D
$num
ÓÓE F
)
ÓÓF G
;
ÓÓG H
points
ÔÔ 
[
ÔÔ 
$num
ÔÔ 
]
ÔÔ 
=
ÔÔ 
ExtendIEnumerable
ÔÔ -
.
ÔÔ- .
CalcLeastSquares
ÔÔ. >
(
ÔÔ> ?
data
ÔÔ? C
,
ÔÔC D
data
ÔÔE I
.
ÔÔI J
Count
ÔÔJ O
)
ÔÔO P
;
ÔÔP Q
}
 
return
ÒÒ 
points
ÒÒ 
;
ÒÒ 
}
ÚÚ 	
public
ÙÙ 
static
ÙÙ 
double
ÙÙ 
[
ÙÙ 
]
ÙÙ #
CalcPointToPointTrend
ÙÙ 4
<
ÙÙ4 5
T
ÙÙ5 6
>
ÙÙ6 7
(
ÙÙ7 8
this
ÙÙ8 <
IEnumerable
ÙÙ= H
<
ÙÙH I
T
ÙÙI J
>
ÙÙJ K
list
ÙÙL P
,
ÙÙP Q
PropertyInfo
ÙÙR ^
info
ÙÙ_ c
)
ÙÙc d
{
ıı 	
double
ˆˆ 
[
ˆˆ 
]
ˆˆ 
points
ˆˆ 
=
ˆˆ 
new
ˆˆ !
double
ˆˆ" (
[
ˆˆ( )
]
ˆˆ) *
{
ˆˆ+ ,
$num
ˆˆ- /
,
ˆˆ/ 0
$num
ˆˆ1 3
}
ˆˆ4 5
;
ˆˆ5 6
if
˜˜ 
(
˜˜ 
list
˜˜ 
!=
˜˜ 
null
˜˜ 
&&
˜˜ 
list
˜˜  $
.
˜˜$ %
Count
˜˜% *
(
˜˜* +
)
˜˜+ ,
>
˜˜- .
$num
˜˜/ 0
&&
˜˜1 3
info
˜˜4 8
!=
˜˜9 ;
null
˜˜< @
)
˜˜@ A
{
¯¯ 
int
˘˘ 
ptIndex
˘˘ 
=
˘˘ 
-
˘˘ 
$num
˘˘  
;
˘˘  !
for
˙˙ 
(
˙˙ 
int
˙˙ 
i
˙˙ 
=
˙˙ 
$num
˙˙ 
;
˙˙ 
i
˙˙  !
<
˙˙" #
list
˙˙$ (
.
˙˙( )
Count
˙˙) .
(
˙˙. /
)
˙˙/ 0
;
˙˙0 1
i
˙˙2 3
++
˙˙3 5
)
˙˙5 6
{
˚˚ 
T
¸¸ 
item
¸¸ 
=
¸¸ 
list
¸¸ !
.
¸¸! "
	ElementAt
¸¸" +
(
¸¸+ ,
i
¸¸, -
)
¸¸- .
;
¸¸. /
if
˝˝ 
(
˝˝ 
i
˝˝ 
==
˝˝ 
$num
˝˝ 
)
˝˝ 
{
˛˛ 
ptIndex
ˇˇ 
=
ˇˇ  !
i
ˇˇ" #
;
ˇˇ# $
}
ÄÄ 
else
ÅÅ 
if
ÅÅ 
(
ÅÅ 
i
ÅÅ 
==
ÅÅ !
list
ÅÅ" &
.
ÅÅ& '
Count
ÅÅ' ,
(
ÅÅ, -
)
ÅÅ- .
-
ÅÅ/ 0
$num
ÅÅ1 2
)
ÅÅ2 3
{
ÇÇ 
ptIndex
ÉÉ 
=
ÉÉ  !
$num
ÉÉ" #
;
ÉÉ# $
}
ÑÑ 
else
ÖÖ 
{
ÜÜ 
ptIndex
áá 
=
áá  !
-
áá" #
$num
áá# $
;
áá$ %
}
àà 
if
ââ 
(
ââ 
ptIndex
ââ 
!=
ââ  "
-
ââ# $
$num
ââ$ %
)
ââ% &
{
ää 
object
ãã 
	propValue
ãã (
=
ãã) *
info
ãã+ /
.
ãã/ 0
GetValue
ãã0 8
(
ãã8 9
item
ãã9 =
,
ãã= >
null
ãã? C
)
ããC D
;
ããD E
double
åå 
y
åå  
=
åå! "
(
åå# $
double
åå$ *
)
åå* +
Convert
åå+ 2
.
åå2 3

ChangeType
åå3 =
(
åå= >
	propValue
åå> G
,
ååG H
typeof
ååI O
(
ååO P
double
ååP V
)
ååV W
)
ååW X
;
ååX Y
points
çç 
[
çç 
ptIndex
çç &
]
çç& '
=
çç( )
y
çç* +
;
çç+ ,
}
éé 
}
èè 
}
êê 
return
ëë 
points
ëë 
;
ëë 
}
íí 	
public
îî 
static
îî 
double
îî 
[
îî 
]
îî 
CalcTrendPoints
îî .
<
îî. /
T
îî/ 0
>
îî0 1
(
îî1 2
this
îî2 6
IEnumerable
îî7 B
<
îîB C
T
îîC D
>
îîD E
list
îîF J
,
îîJ K
PropertyInfo
îîL X
info
îîY ]
,
îî] ^
	TrendType
îî_ h
	trendType
îîi r
)
îîr s
{
ïï 	
double
ññ 
[
ññ 
]
ññ 
points
ññ 
=
ññ 
new
ññ !
double
ññ" (
[
ññ( )
]
ññ) *
{
ññ+ ,
$num
ññ- /
,
ññ/ 0
$num
ññ1 3
}
ññ4 5
;
ññ5 6
switch
òò 
(
òò 
	trendType
òò 
)
òò 
{
ôô 
case
õõ 
	TrendType
õõ 
.
õõ 
Linear
õõ %
:
õõ% &
{
úú 
points
ùù 
=
ùù  
list
ùù! %
.
ùù% &
CalcLinearTrend
ùù& 5
(
ùù5 6
info
ùù6 :
)
ùù: ;
;
ùù; <
}
ûû 
break
üü 
;
üü 
case
££ 
	TrendType
££ 
.
££ 
PointToPoint
££ +
:
££+ ,
{
§§ 
points
•• 
=
••  
list
••! %
.
••% &#
CalcPointToPointTrend
••& ;
(
••; <
info
••< @
)
••@ A
;
••A B
}
¶¶ 
break
ßß 
;
ßß 
case
™™ 
	TrendType
™™ 
.
™™ 
Exponential
™™ *
:
™™* +
case
´´ 
	TrendType
´´ 
.
´´ 
Logarithmic
´´ *
:
´´* +
case
¨¨ 
	TrendType
¨¨ 
.
¨¨ 
MovingAverage
¨¨ ,
:
¨¨, -
case
≠≠ 
	TrendType
≠≠ 
.
≠≠ 

Polynomial
≠≠ )
:
≠≠) *
case
ÆÆ 
	TrendType
ÆÆ 
.
ÆÆ 
Power
ÆÆ $
:
ÆÆ$ %
default
ØØ 
:
ØØ 
throw
∞∞ 
new
∞∞ 
	Exception
∞∞ '
(
∞∞' (
string
∞∞( .
.
∞∞. /
Format
∞∞/ 5
(
∞∞5 6
$str
∞∞6 d
,
∞∞d e
	trendType
∞∞f o
.
∞∞o p
ToString
∞∞p x
(
∞∞x y
)
∞∞y z
)
∞∞z {
)
∞∞{ |
;
∞∞| }
}
±± 
return
≤≤ 
points
≤≤ 
;
≤≤ 
}
≥≥ 	
public
µµ 
static
µµ 
double
µµ 
[
µµ 
]
µµ 
CalcTrendValues
µµ .
<
µµ. /
T
µµ/ 0
>
µµ0 1
(
µµ1 2
this
µµ2 6
IEnumerable
µµ7 B
<
µµB C
T
µµC D
>
µµD E
list
µµF J
,
µµJ K
string
µµL R
valuePropertyName
µµS d
,
µµd e
	TrendType
µµf o
	trendType
µµp y
=
µµz {
	TrendTypeµµ| Ö
.µµÖ Ü
LinearµµÜ å
)µµå ç
{
∂∂ 	
double
∑∑ 
[
∑∑ 
]
∑∑ 
points
∑∑ 
=
∑∑ 
new
∑∑ !
double
∑∑" (
[
∑∑( )
]
∑∑) *
{
∑∑+ ,
$num
∑∑- /
,
∑∑/ 0
$num
∑∑1 3
}
∑∑4 5
;
∑∑5 6
try
∏∏ 
{
ππ 
if
∫∫ 
(
∫∫ 
list
∫∫ 
.
∫∫ 
Count
∫∫ 
(
∫∫ 
)
∫∫  
>
∫∫! "
$num
∫∫# $
)
∫∫$ %
{
ªª 
PropertyInfo
ºº  
info
ºº! %
=
ºº& '
typeof
ºº( .
(
ºº. /
T
ºº/ 0
)
ºº0 1
.
ºº1 2
GetProperty
ºº2 =
(
ºº= >
valuePropertyName
ºº> O
)
ººO P
;
ººP Q
if
ΩΩ 
(
ΩΩ 
info
ΩΩ 
!=
ΩΩ 
null
ΩΩ  $
&&
ΩΩ% '
info
ΩΩ( ,
.
ΩΩ, -
PropertyType
ΩΩ- 9
.
ΩΩ9 :
	IsNumeric
ΩΩ: C
(
ΩΩC D
)
ΩΩD E
)
ΩΩE F
{
ææ 
list
øø 
.
øø 
CalcTrendPoints
øø ,
(
øø, -
info
øø- 1
,
øø1 2
	trendType
øø3 <
)
øø< =
;
øø= >
}
¿¿ 
}
¡¡ 
}
¬¬ 
catch
√√ 
(
√√ 
	Exception
√√ 
ex
√√ 
)
√√  
{
ƒƒ 
if
≈≈ 
(
≈≈ 

ExtendList
≈≈ 
.
≈≈ &
throwExtensionExceptions
≈≈ 7
)
≈≈7 8
{
∆∆ 
throw
«« 
ex
«« 
;
«« 
}
»» 
}
…… 
return
   
points
   
;
   
}
ÀÀ 	
public
ÕÕ 
static
ÕÕ 
double
ÕÕ 
[
ÕÕ 
]
ÕÕ 
CalcTrendValues
ÕÕ .
<
ÕÕ. /
T
ÕÕ/ 0
>
ÕÕ0 1
(
ÕÕ1 2
this
ÕÕ2 6
IEnumerable
ÕÕ7 B
<
ÕÕB C
T
ÕÕC D
>
ÕÕD E
list
ÕÕF J
,
ÕÕJ K
string
ÕÕL R
valuePropertyName
ÕÕS d
,
ÕÕd e
string
ÕÕf l
datePropertyName
ÕÕm }
,
ÕÕ} ~
DateTimeÕÕ á
	startDateÕÕà ë
,ÕÕë í
DateTimeÕÕì õ
endDateÕÕú £
,ÕÕ£ §
	TrendTypeÕÕ• Æ
	trendTypeÕÕØ ∏
=ÕÕπ ∫
	TrendTypeÕÕª ƒ
.ÕÕƒ ≈
LinearÕÕ≈ À
)ÕÕÀ Ã
{
ŒŒ 	
double
œœ 
[
œœ 
]
œœ 
points
œœ 
=
œœ 
new
œœ !
double
œœ" (
[
œœ( )
]
œœ) *
{
œœ+ ,
$num
œœ- /
,
œœ/ 0
$num
œœ1 3
}
œœ4 5
;
œœ5 6
try
–– 
{
—— 
if
““ 
(
““ 
list
““ 
.
““ 
Count
““ 
(
““ 
)
““  
>
““! "
$num
““# $
)
““$ %
{
”” 
PropertyInfo
‘‘  
info
‘‘! %
=
‘‘& '
typeof
‘‘( .
(
‘‘. /
T
‘‘/ 0
)
‘‘0 1
.
‘‘1 2
GetProperty
‘‘2 =
(
‘‘= >
valuePropertyName
‘‘> O
)
‘‘O P
;
‘‘P Q
PropertyInfo
’’  
dateInfo
’’! )
=
’’* +
typeof
’’, 2
(
’’2 3
T
’’3 4
)
’’4 5
.
’’5 6
GetProperty
’’6 A
(
’’A B
datePropertyName
’’B R
)
’’R S
;
’’S T
if
◊◊ 
(
◊◊ 
info
◊◊ 
!=
◊◊ 
null
◊◊  $
&&
◊◊% '
info
◊◊( ,
.
◊◊, -
PropertyType
◊◊- 9
.
◊◊9 :
	IsNumeric
◊◊: C
(
◊◊C D
)
◊◊D E
&&
◊◊F H
dateInfo
ÿÿ  
!=
ÿÿ! #
null
ÿÿ$ (
&&
ÿÿ) +
dateInfo
ÿÿ, 4
.
ÿÿ4 5
PropertyType
ÿÿ5 A
.
ÿÿA B

IsDateTime
ÿÿB L
(
ÿÿL M
)
ÿÿM N
)
ÿÿN O
{
ŸŸ 
var
⁄⁄ 
newList
⁄⁄ #
=
⁄⁄$ %
list
⁄⁄& *
.
⁄⁄* +
Where
⁄⁄+ 0
(
⁄⁄0 1
x
⁄⁄1 2
=>
⁄⁄3 5
(
⁄⁄6 7
(
⁄⁄7 8
DateTime
⁄⁄8 @
)
⁄⁄@ A
(
⁄⁄A B
dateInfo
⁄⁄B J
.
⁄⁄J K
GetValue
⁄⁄K S
(
⁄⁄S T
x
⁄⁄T U
,
⁄⁄U V
null
⁄⁄W [
)
⁄⁄[ \
)
⁄⁄\ ]
)
⁄⁄] ^
.
⁄⁄^ _
	IsBetween
⁄⁄_ h
(
⁄⁄h i
	startDate
⁄⁄i r
,
⁄⁄r s
endDate
⁄⁄t {
,
⁄⁄{ |
true⁄⁄} Å
)⁄⁄Å Ç
)⁄⁄Ç É
;⁄⁄É Ñ
newList
€€ 
.
€€  
CalcTrendPoints
€€  /
(
€€/ 0
info
€€0 4
,
€€4 5
	trendType
€€6 ?
)
€€? @
;
€€@ A
}
‹‹ 
}
›› 
}
ﬁﬁ 
catch
ﬂﬂ 
(
ﬂﬂ 
	Exception
ﬂﬂ 
ex
ﬂﬂ 
)
ﬂﬂ  
{
‡‡ 
if
·· 
(
·· 

ExtendList
·· 
.
·· &
throwExtensionExceptions
·· 7
)
··7 8
{
‚‚ 
throw
„„ 
ex
„„ 
;
„„ 
}
‰‰ 
}
ÂÂ 
return
ÊÊ 
points
ÊÊ 
;
ÊÊ 
}
ÁÁ 	
public
ÈÈ 
static
ÈÈ 
double
ÈÈ 
[
ÈÈ 
]
ÈÈ 
CalcTrendValues
ÈÈ .
<
ÈÈ. /
T
ÈÈ/ 0
>
ÈÈ0 1
(
ÈÈ1 2
this
ÈÈ2 6
IEnumerable
ÈÈ7 B
<
ÈÈB C
T
ÈÈC D
>
ÈÈD E
list
ÈÈF J
,
ÈÈJ K
string
ÈÈL R
valuePropertyName
ÈÈS d
,
ÈÈd e
string
ÈÈf l
datePropertyName
ÈÈm }
,
ÈÈ} ~
DateTimeÈÈ á
endDateÈÈà è
,ÈÈè ê
intÈÈë î
rollingÈÈï ú
,ÈÈú ù
	TrendTypeÈÈû ß
	trendTypeÈÈ® ±
=ÈÈ≤ ≥
	TrendTypeÈÈ¥ Ω
.ÈÈΩ æ
LinearÈÈæ ƒ
)ÈÈƒ ≈
{
ÍÍ 	
DateTime
ÎÎ 
	startDate
ÎÎ 
=
ÎÎ  
endDate
ÎÎ! (
.
ÎÎ( )
	AddMonths
ÎÎ) 2
(
ÎÎ2 3
-
ÎÎ3 4
(
ÎÎ4 5
rolling
ÎÎ5 <
-
ÎÎ= >
$num
ÎÎ? @
)
ÎÎ@ A
)
ÎÎA B
;
ÎÎB C
return
ÏÏ 
list
ÏÏ 
.
ÏÏ 
CalcTrendValues
ÏÏ '
(
ÏÏ' (
valuePropertyName
ÏÏ( 9
,
ÏÏ9 :
datePropertyName
ÏÏ; K
,
ÏÏK L
	startDate
ÏÏM V
,
ÏÏV W
endDate
ÏÏX _
,
ÏÏ_ `
	trendType
ÏÏa j
)
ÏÏj k
;
ÏÏk l
}
ÌÌ 	
public
ÔÔ 
static
ÔÔ 
double
ÔÔ 
[
ÔÔ 
]
ÔÔ 
CalcTrendValues
ÔÔ .
<
ÔÔ. /
T
ÔÔ/ 0
>
ÔÔ0 1
(
ÔÔ1 2
this
ÔÔ2 6
IEnumerable
ÔÔ7 B
<
ÔÔB C
T
ÔÔC D
>
ÔÔD E
list
ÔÔF J
,
ÔÔJ K
string
ÔÔL R
valuePropertyName
ÔÔS d
,
ÔÔd e
int
ÔÔf i

startIndex
ÔÔj t
,
ÔÔt u
int
ÔÔv y
endIndexÔÔz Ç
=ÔÔÉ Ñ
-ÔÔÖ Ü
$numÔÔÜ á
,ÔÔá à
	TrendTypeÔÔâ í
	trendTypeÔÔì ú
=ÔÔù û
	TrendTypeÔÔü ®
.ÔÔ® ©
LinearÔÔ© Ø
)ÔÔØ ∞
{
 	
double
ÒÒ 
[
ÒÒ 
]
ÒÒ 
points
ÒÒ 
=
ÒÒ 
new
ÒÒ !
double
ÒÒ" (
[
ÒÒ( )
]
ÒÒ) *
{
ÒÒ+ ,
$num
ÒÒ- /
,
ÒÒ/ 0
$num
ÒÒ1 3
}
ÒÒ4 5
;
ÒÒ5 6
try
ÚÚ 
{
ÛÛ 
if
ÙÙ 
(
ÙÙ 
list
ÙÙ 
.
ÙÙ 
Count
ÙÙ 
(
ÙÙ 
)
ÙÙ  
>
ÙÙ! "
$num
ÙÙ# $
)
ÙÙ$ %
{
ıı 
PropertyInfo
ˆˆ  
info
ˆˆ! %
=
ˆˆ& '
typeof
ˆˆ( .
(
ˆˆ. /
T
ˆˆ/ 0
)
ˆˆ0 1
.
ˆˆ1 2
GetProperty
ˆˆ2 =
(
ˆˆ= >
valuePropertyName
ˆˆ> O
)
ˆˆO P
;
ˆˆP Q
if
¯¯ 
(
¯¯ 
info
¯¯ 
!=
¯¯ 
null
¯¯  $
&&
¯¯% '
info
¯¯( ,
.
¯¯, -
PropertyType
¯¯- 9
.
¯¯9 :
	IsNumeric
¯¯: C
(
¯¯C D
)
¯¯D E
)
¯¯E F
{
˘˘ 
var
˙˙ 
newList
˙˙ #
=
˙˙$ %
list
˙˙& *
.
˙˙* +
SubsetByIndex
˙˙+ 8
(
˙˙8 9

startIndex
˙˙9 C
,
˙˙C D
endIndex
˙˙E M
)
˙˙M N
;
˙˙N O
points
˚˚ 
=
˚˚  
newList
˚˚! (
.
˚˚( )
CalcTrendPoints
˚˚) 8
(
˚˚8 9
info
˚˚9 =
,
˚˚= >
	trendType
˚˚? H
)
˚˚H I
;
˚˚I J
}
¸¸ 
}
˝˝ 
}
˛˛ 
catch
ˇˇ 
(
ˇˇ 
	Exception
ˇˇ 
ex
ˇˇ 
)
ˇˇ  
{
ÄÄ 
if
ÅÅ 
(
ÅÅ 

ExtendList
ÅÅ 
.
ÅÅ &
throwExtensionExceptions
ÅÅ 7
)
ÅÅ7 8
{
ÇÇ 
throw
ÉÉ 
ex
ÉÉ 
;
ÉÉ 
}
ÑÑ 
}
ÖÖ 
return
ÜÜ 
points
ÜÜ 
;
ÜÜ 
}
áá 	
}
ää 
}ãã Õ;
gD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\ObjectExtensions\ExtendInteger.cs
	namespace 	
ObjectExtensions
 
{ 
public		 
static		 
class		 
ExtendInteger		 "
{

 
public 
static	 
bool 
IsIn 
( 
this 
int "
value# (
,( )
string* 0
	container1 :
): ;
{ 
return 	
value
 
. 
ToString 
( 
) 
. 
IsIn 
(  
	container  )
)) *
;* +
} 
public 
static	 
bool 
IsEven 
( 
this  
int! $
value% *
)* +
{ 
int 
	remainder 
= 
$num 
; 
if 
( 
value 
> 
$num 
) 
{ 
Math 
. 	
DivRem	 
( 
value 
, 
$num 
, 
out 
	remainder '
)' (
;( )
} 
return 	
(
 
	remainder 
== 
$num 
) 
; 
} 
public 
static	 
bool 
IsEven 
( 
this  
long! %
value& +
)+ ,
{ 
long 
	remainder 
= 
$num 
; 
if 
( 
value 
> 
$num 
) 
{ 
Math 
. 	
DivRem	 
( 
value 
, 
$num 
, 
out 
	remainder '
)' (
;( )
}   
return!! 	
(!!
 
	remainder!! 
==!! 
$num!! 
)!! 
;!! 
}"" 
public$$ 
static$$	 
double$$ 
RoundUpToNearest$$ '
($$' (
this$$( ,
double$$- 3
value$$4 9
,$$9 :
int$$; >
nearest$$? F
=$$F G
$num$$G I
)$$I J
{%% 
nearest&& 

=&& 
Math&& 
.&& 
Max&& 
(&& 
nearest&& 
,&& 
$num&&  
)&&  !
;&&! "
double'' 	
result''
 
='' 
('' 
nearest'' 
>'' 
$num'' 
)''  
?''! "
Math''# '
.''' (
Round''( -
(''- .
Math''. 2
.''2 3
Ceiling''3 :
('': ;
value''; @
/''A B
(''C D
double''D J
)''J K
nearest''K R
)''R S
*''T U
(''V W
double''W ]
)''] ^
nearest''^ e
,''e f
$num''g h
)''h i
:''j k
$num''l n
;''n o
return(( 	
result((
 
;(( 
})) 
public++ 
static++	 
int++ 
RoundUpToNearest++ $
(++$ %
this++% )
int++* -
value++. 3
,++3 4
int++5 8
nearest++9 @
=++@ A
$num++A C
)++C D
{,, 
nearest-- 

=-- 
Math-- 
.-- 
Max-- 
(-- 
nearest-- 
,-- 
$num--  
)--  !
;--! "
int.. 
result.. 
=.. 
(.. 
int.. 
).. 
(.. 
Math.. 
... 
Round..  
(..  !
Math..! %
...% &
Ceiling..& -
(..- .
(... /
double../ 5
)..5 6
value..6 ;
/..< =
(..> ?
double..? E
)..E F
nearest..F M
)..M N
*..O P
(..Q R
double..R X
)..X Y
nearest..Y `
,..` a
$num..b c
)..c d
)..d e
;..e f
return// 	
result//
 
;// 
}00 
public22 
static22	 
double22 
RoundDownToNearest22 )
(22) *
this22* .
double22/ 5
value226 ;
,22; <
int22= @
nearest22A H
=22H I
$num22I K
)22K L
{33 
nearest44 

=44 
Math44 
.44 
Max44 
(44 
nearest44 
,44 
$num44  
)44  !
;44! "
double55 	
result55
 
=55 
Math55 
.55 
Max55 
(55 
(55 
nearest55 $
>55% &
$num55' (
)55( )
?55* +
Math55, 0
.550 1
Round551 6
(556 7
Math557 ;
.55; <
Floor55< A
(55A B
value55B G
/55H I
(55J K
double55K Q
)55Q R
nearest55R Y
)55Y Z
*55[ \
(55] ^
double55^ d
)55d e
nearest55e l
,55l m
$num55n o
)55o p
:55q r
$num55s u
,55u v
$num55w y
)55y z
;55z {
return66 	
result66
 
;66 
}77 
public99 
static99	 
int99 
DivRemainder99  
(99  !
this99! %
int99& )
value99* /
,99/ 0
int991 4
divisor995 <
)99< =
{:: 
int;; 
result;; 
;;; 
Math<< 
.<< 
DivRem<< 
(<< 
value<< 
,<< 
divisor<< 
,<< 
out<< "
result<<# )
)<<) *
;<<* +
return== 	
result==
 
;== 
}>> 
public@@ 
static@@	 
bool@@ 
	IsBetween@@ 
(@@ 
this@@ #
int@@$ '
value@@( -
,@@- .
int@@/ 2
range1@@3 9
,@@9 :
int@@; >
range2@@? E
,@@E F
bool@@G K
isInclusive@@L W
=@@W X
true@@X \
)@@\ ]
{AA 
boolBB 
resultBB 
=BB 
(BB 
isInclusiveBB 
)BB 
?CC 
(CC	 

valueCC
 
>=CC 
MathCC 
.CC 
MinCC 
(CC 
range1CC "
,CC" #
range2CC$ *
)CC* +
&&CC, .
valueCC/ 4
<=CC5 7
MathCC8 <
.CC< =
MaxCC= @
(CC@ A
range1CCA G
,CCG H
range2CCI O
)CCO P
)CCP Q
:DD 
(DD	 

valueDD
 
>DD 
MathDD 
.DD 
MinDD 
(DD 
range1DD !
,DD! "
range2DD# )
)DD) *
&&DD+ -
valueDD. 3
<DD4 5
MathDD6 :
.DD: ;
MaxDD; >
(DD> ?
range1DD? E
,DDE F
range2DDG M
)DDM N
)DDN O
;DDO P
returnEE 	
resultEE
 
;EE 
}FF 
}GG 
}HH –9
iD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\ObjectExtensions\ExtendLinqToXml.cs
	namespace		 	
ObjectExtensions		
 
{

 
public 

static 
class 
ExtendLinqToXml '
{ 
public 
static	 
bool 
HasAttribute !
(! "
this" &
XElement' /
element0 7
,7 8
string9 ?
name@ D
)D E
{ 
bool 
result 
= 
false 
; 
IEnumerable 
< 

XAttribute 
> 

attributes %
=& '
element( /
./ 0

Attributes0 :
(: ;
name; ?
)? @
;@ A
result 	
=
 
( 

attributes 
. 
Count 
( 
) 
>  !
$num" #
)# $
;$ %
return 	
result
 
; 
} 
public 
static	 
bool 

HasElement 
(  
this  $
XElement% -
element. 5
,5 6
string7 =
name> B
)B C
{ 
bool 
result 
= 
false 
; 
IEnumerable 
< 
XElement 
> 
elements !
=" #
element$ +
.+ ,
Elements, 4
(4 5
name5 9
)9 :
;: ;
result 	
=
 
( 
elements 
. 
Count 
( 
) 
> 
$num  !
)! "
;" #
return 	
result
 
; 
} 
public 
static	 
T 
GetValue 
< 
T 
> 
( 
this "
XElement# +
root, 0
,0 1
string2 8
name9 =
,= >
T? @
defaultValueA M
)M N
{ 
T 
value 

= 
defaultValue 
; 
string   	
strValue  
 
=   
(   
string   
)   
root   !
.  ! "
Elements  " *
(  * +
name  + /
)  / 0
.  0 1
FirstOrDefault  1 ?
(  ? @
)  @ A
??  B D
defaultValue  E Q
.  Q R
ToString  R Z
(  Z [
)  [ \
;  \ ]
if"" 
("" 
value"" 
is"" 
string"" 
)"" 
{## 
return$$ 

($$ 
($$ 
T$$ 
)$$ 
($$ 
object$$ 
)$$ 
strValue$$ 
)$$  
;$$  !
}%% 
else&& 
{'' 
var(( 
tryParse(( 
=(( 
typeof(( 
((( 
T(( 
)(( 
.(( 
	GetMethod(( '
(((' (
$str((( 2
,((2 3
new((4 7
[((8 9
]((9 :
{((; <
typeof((< B
(((B C
string((C I
)((I J
,((J K
typeof((L R
(((R S
T((S T
)((T U
.((U V
MakeByRefType((V c
(((c d
)((d e
}((e f
)((f g
;((g h
if)) 
()) 
tryParse)) 
==)) 
null)) 
))) 
{** 
throw++ 

new++ %
InvalidOperationException++ (
(++( )
)++) *
;++* +
},, 
var-- 

parameters-- 
=-- 
new-- 
object-- 
[--  
]--  !
{--" #
strValue--# +
,--+ ,
value--- 2
}--2 3
;--3 4
if.. 
(.. 
(.. 	
bool..	 
).. 
tryParse.. 
... 
Invoke.. 
(.. 
null.. "
,.." #

parameters..$ .
)... /
)../ 0
{// 
value00 

=00 
(00 
T00 
)00 

parameters00 
[00 
$num00 
]00 
;00 
}11 
}22 
return33 	
value33
 
;33 
}44 
public66 
static66	 
T66 
GetAttribute66 
<66 
T66  
>66  !
(66! "
this66" &
XElement66' /
root660 4
,664 5
string666 <
name66= A
,66A B
T66C D
defaultValue66E Q
)66Q R
{77 
T88 
value88 

=88 
defaultValue88 
;88 
string99 	
strValue99
 
=99 
(99 
string99 
)99 
root99 !
.99! "

Attributes99" ,
(99, -
name99- 1
)991 2
.992 3
FirstOrDefault993 A
(99A B
)99B C
??99D F
defaultValue99G S
.99S T
ToString99T \
(99\ ]
)99] ^
;99^ _
if:: 
(:: 
value:: 
is:: 
string:: 
):: 
{;; 
value<< 	
=<<
 
(<< 
T<< 
)<< 
(<< 
object<< 
)<< 
strValue<< 
;<<  
}== 
else>> 
{?? 
var@@ 
tryParse@@ 
=@@ 
typeof@@ 
(@@ 
T@@ 
)@@ 
.@@ 
	GetMethod@@ '
(@@' (
$str@@( 2
,@@2 3
new@@4 7
[@@8 9
]@@9 :
{@@; <
typeof@@< B
(@@B C
string@@C I
)@@I J
,@@J K
typeof@@L R
(@@R S
T@@S T
)@@T U
.@@U V
MakeByRefType@@V c
(@@c d
)@@d e
}@@e f
)@@f g
;@@g h
ifAA 
(AA 
tryParseAA 
==AA 
nullAA 
)AA 
{BB 
throwCC 

newCC %
InvalidOperationExceptionCC (
(CC( )
)CC) *
;CC* +
}DD 
varEE 

parametersEE 
=EE 
newEE 
objectEE 
[EE  
]EE  !
{EE" #
strValueEE# +
,EE+ ,
valueEE- 2
}EE2 3
;EE3 4
ifFF 
(FF 
(FF 	
boolFF	 
)FF 
tryParseFF 
.FF 
InvokeFF 
(FF 
nullFF "
,FF" #

parametersFF$ .
)FF. /
)FF/ 0
{GG 
valueHH 

=HH 
(HH 
THH 
)HH 

parametersHH 
[HH 
$numHH 
]HH 
;HH 
}II 
}JJ 
returnKK 	
valueKK
 
;KK 
}LL 
}MM 
}NN ú¸
dD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\ObjectExtensions\ExtendList.cs
	namespace

 	
ObjectExtensions


 
{ 
public 

class 
PointD 
{ 
public 
double 
X 
{ 
get 
; 
set "
;" #
}$ %
public 
double 
Y 
{ 
get 
; 
set "
;" #
}$ %
public 
PointD 
( 
double 
x 
, 
double  &
y' (
)( )
{ 	
this 
. 
X 
= 
x 
; 
this 
. 
Y 
= 
y 
; 
} 	
} 
public 

static 
class 

ExtendList "
{ 
public 
static 
bool $
throwExtensionExceptions 3
=4 5
false6 ;
;; <
public 
static 
List 
< 
double !
>! "
Modes# (
(( )
this) -
List. 2
<2 3
double3 9
>9 :
list; ?
)? @
{ 	
var 
	modesList 
= 
list  
.  !
GroupBy! (
(( )
values) /
=>0 2
values3 9
)9 :
.: ;
Select; A
(A B
valueClusterB N
=>O Q
newR U
{ 
Value 
= 
valueCluster $
.$ %
Key% (
,( )

Occurrence   
=   
valueCluster   )
.  ) *
Count  * /
(  / 0
)  0 1
,  1 2
}!! 
)!! 
.!! 
ToList!! 
(!! 
)!! 
;!! 
int## 
maxOccurrence## 
=## 
	modesList##  )
.##) *
Max##* -
(##- .
g##. /
=>##0 2
g##3 4
.##4 5

Occurrence##5 ?
)##? @
;##@ A
return%% 
	modesList%% 
.%% 
Where%% "
(%%" #
x%%# $
=>%%% '
x%%( )
.%%) *

Occurrence%%* 4
==%%5 7
maxOccurrence%%8 E
&&%%F H
maxOccurrence%%I V
>%%W X
$num%%Y Z
)%%Z [
.%%[ \
Select%%\ b
(%%b c
x%%c d
=>%%e g
x%%h i
.%%i j
Value%%j o
)%%o p
.%%p q
ToList%%q w
(%%w x
)%%x y
;%%y z
}&& 	
public(( 
static(( 
double(( 
Median(( #
(((# $
this(($ (
List(() -
<((- .
double((. 4
>((4 5
list((6 :
,((: ;
int((< ?
roundPlaces((@ K
=((L M
$num((N O
)((O P
{)) 	
List** 
<** 
double** 
>** 
orderedList** $
=**% &
list**' +
.**+ ,
OrderBy**, 3
(**3 4
numbers**4 ;
=>**< >
numbers**? F
)**F G
.**G H
ToList**H N
(**N O
)**O P
;**P Q
int,, 
listSize,, 
=,, 
orderedList,, &
.,,& '
Count,,' ,
;,,, -
double-- 
result-- 
;-- 
if// 
(// 
listSize// 
%// 
$num// 
==// 
$num//  !
)//! "
{00 
int11 
midIndex11 
=11 
listSize11 '
/11( )
$num11* +
;11+ ,
double22 
v122 
=22 
orderedList22 '
.22' (
	ElementAt22( 1
(221 2
midIndex222 :
-22; <
$num22= >
)22> ?
;22? @
double33 
v233 
=33 
orderedList33 '
.33' (
	ElementAt33( 1
(331 2
midIndex332 :
)33: ;
;33; <
result44 
=44 
(44 
v144 
+44 
v244 !
)44! "
/44# $
$num44% '
;44' (
}55 
else66 
{77 
double88 
element88 
=88  
(88! "
double88" (
)88( )
listSize88) 1
/882 3
$num884 5
;885 6
element99 
=99 
Math99 
.99 
Round99 $
(99$ %
element99% ,
,99, -
MidpointRounding99. >
.99> ?
AwayFromZero99? K
)99K L
;99L M
result;; 
=;; 
orderedList;; $
.;;$ %
	ElementAt;;% .
(;;. /
(;;/ 0
int;;0 3
);;3 4
(;;4 5
element;;5 <
-;;= >
$num;;? @
);;@ A
);;A B
;;;B C
}<< 
return>> 
Math>> 
.>> 
Round>> 
(>> 
result>> $
,>>$ %
roundPlaces>>& 1
)>>1 2
;>>2 3
}?? 	
publicAA 
staticAA 
stringAA 
FindLikeAA %
(AA% &
thisAA& *
ListAA+ /
<AA/ 0
stringAA0 6
>AA6 7
listAA8 <
,AA< =
stringAA> D
textAAE I
)AAI J
{BB 	
stringCC 
foundCC 
=CC 
stringCC !
.CC! "
EmptyCC" '
;CC' (
foreachDD 
(DD 
stringDD 
itemDD  
inDD! #
listDD$ (
)DD( )
{EE 
ifFF 
(FF 
itemFF 
.FF 
IsLikeFF 
(FF  
textFF  $
)FF$ %
)FF% &
{GG 
foundHH 
=HH 
itemHH  
;HH  !
breakII 
;II 
}JJ 
}KK 
returnLL 
foundLL 
;LL 
}MM 	
publicOO 
staticOO 
intOO 
FindIndexLikeOO '
(OO' (
thisOO( ,
ListOO- 1
<OO1 2
stringOO2 8
>OO8 9
listOO: >
,OO> ?
stringOO@ F
textOOG K
)OOK L
{PP 	
intQQ 
foundQQ 
=QQ 
-QQ 
$numQQ 
;QQ 
forRR 
(RR 
intRR 
indexRR 
=RR 
$numRR 
;RR 
indexRR  %
<RR& '
listRR( ,
.RR, -
CountRR- 2
;RR2 3
indexRR4 9
++RR9 ;
)RR; <
{SS 
ifTT 
(TT 
listTT 
[TT 
indexTT 
]TT 
.TT  
IsLikeTT  &
(TT& '
textTT' +
)TT+ ,
)TT, -
{UU 
foundVV 
=VV 
indexVV !
;VV! "
breakWW 
;WW 
}XX 
}YY 
returnZZ 
foundZZ 
;ZZ 
}[[ 	
public]] 
static]] 
string]] 
CommaSeparated]] +
(]]+ ,
this]], 0
List]]1 5
<]]5 6
string]]6 <
>]]< =
list]]> B
)]]B C
{^^ 	
StringBuilder__ 
result__  
=__! "
new__# &
StringBuilder__' 4
(__4 5
)__5 6
;__6 7
foreach`` 
(`` 
string`` 
item``  
in``! #
list``$ (
)``( )
{aa 
resultbb 
.bb 
AppendFormatbb #
(bb# $
$strbb$ ,
,bb, -
(bb. /
resultbb/ 5
.bb5 6
Lengthbb6 <
==bb= ?
$numbb@ A
)bbA B
?bbC D
$strbbE G
:bbH I
$strbbJ M
,bbM N
itembbO S
)bbS T
;bbT U
}cc 
returndd 
resultdd 
.dd 
ToStringdd "
(dd" #
)dd# $
;dd$ %
}ee 	
publicgg 
staticgg 
stringgg 
ToDelimitedStringgg .
(gg. /
thisgg/ 3
Listgg4 8
<gg8 9
stringgg9 ?
>gg? @
listggA E
,ggE F
charggG K
	delimiterggL U
)ggU V
{hh 	
StringBuilderii 
resultii  
=ii! "
newii# &
StringBuilderii' 4
(ii4 5
)ii5 6
;ii6 7
foreachjj 
(jj 
stringjj 
itemjj  
injj! #
listjj$ (
)jj( )
{kk 
resultll 
.ll 
AppendFormatll #
(ll# $
$strll$ ,
,ll, -
(ll. /
resultll/ 5
.ll5 6
Lengthll6 <
==ll= ?
$numll@ A
)llA B
?llC D
$strllE G
:llH I
	delimiterllJ S
.llS T
ToStringllT \
(ll\ ]
)ll] ^
,ll^ _
itemll` d
)lld e
;lle f
}mm 
returnnn 
resultnn 
.nn 
ToStringnn "
(nn" #
)nn# $
;nn$ %
}oo 	
publicqq 
staticqq 
stringqq 
	FindExactqq &
(qq& '
thisqq' +
Listqq, 0
<qq0 1
stringqq1 7
>qq7 8
listqq9 =
,qq= >
stringqq? E
textqqF J
)qqJ K
{rr 	
stringss 
foundss 
=ss 
stringss !
.ss! "
Emptyss" '
;ss' (
iftt 
(tt 
listtt 
.tt 
Containstt 
(tt 
texttt "
)tt" #
)tt# $
{uu 
foundvv 
=vv 
textvv 
;vv 
}ww 
returnxx 
foundxx 
;xx 
}yy 	
public{{ 
static{{ 
IEnumerable{{ !
<{{! "
T{{" #
>{{# $
	FindExact{{% .
<{{. /
T{{/ 0
>{{0 1
({{1 2
this{{2 6
IEnumerable{{7 B
<{{B C
T{{C D
>{{D E
list{{F J
,{{J K
string{{L R
valuePropertyName{{S d
,{{d e
string{{f l
text{{m q
){{q r
{|| 	
IEnumerable}} 
<}} 
T}} 
>}} 
found}}  
=}}! "

Enumerable}}# -
.}}- .
Empty}}. 3
<}}3 4
T}}4 5
>}}5 6
(}}6 7
)}}7 8
;}}8 9
try~~ 
{ 
PropertyInfo
ÄÄ 
info
ÄÄ !
=
ÄÄ" #
typeof
ÄÄ$ *
(
ÄÄ* +
T
ÄÄ+ ,
)
ÄÄ, -
.
ÄÄ- .
GetProperty
ÄÄ. 9
(
ÄÄ9 :
valuePropertyName
ÄÄ: K
)
ÄÄK L
;
ÄÄL M
if
ÅÅ 
(
ÅÅ 
info
ÅÅ 
!=
ÅÅ 
null
ÅÅ  
&&
ÅÅ! #
info
ÅÅ$ (
.
ÅÅ( )
CanRead
ÅÅ) 0
&&
ÅÅ1 3
info
ÅÅ4 8
.
ÅÅ8 9
PropertyType
ÅÅ9 E
==
ÅÅF H
typeof
ÅÅI O
(
ÅÅO P
string
ÅÅP V
)
ÅÅV W
&&
ÅÅX Z
info
ÅÅ[ _
.
ÅÅ_ ` 
GetIndexParameters
ÅÅ` r
(
ÅÅr s
)
ÅÅs t
.
ÅÅt u
Length
ÅÅu {
==
ÅÅ| ~
$numÅÅ Ä
)ÅÅÄ Å
{
ÇÇ 
found
ÉÉ 
=
ÉÉ 
(
ÉÉ 
from
ÉÉ !
item
ÉÉ" &
in
ÉÉ' )
list
ÉÉ* .
let
ÑÑ  
value
ÑÑ! &
=
ÑÑ' (
(
ÑÑ) *
string
ÑÑ* 0
)
ÑÑ0 1
(
ÑÑ1 2
info
ÑÑ2 6
.
ÑÑ6 7
GetValue
ÑÑ7 ?
(
ÑÑ? @
item
ÑÑ@ D
,
ÑÑD E
null
ÑÑF J
)
ÑÑJ K
)
ÑÑK L
where
ÖÖ "
value
ÖÖ# (
==
ÖÖ) +
text
ÖÖ, 0
select
ÜÜ #
item
ÜÜ$ (
)
ÜÜ( )
.
ÜÜ) *
ToList
ÜÜ* 0
(
ÜÜ0 1
)
ÜÜ1 2
;
ÜÜ2 3
}
áá 
}
àà 
catch
ââ 
(
ââ 
	Exception
ââ 
)
ââ 
{
ää 
}
ãã 
return
åå 
found
åå 
;
åå 
}
çç 	
public
èè 
static
èè 
IEnumerable
èè !
<
èè! "
T
èè" #
>
èè# $
FindLike
èè% -
<
èè- .
T
èè. /
>
èè/ 0
(
èè0 1
this
èè1 5
IEnumerable
èè6 A
<
èèA B
T
èèB C
>
èèC D
list
èèE I
,
èèI J
string
èèK Q
valuePropertyName
èèR c
,
èèc d
string
èèe k
text
èèl p
)
èèp q
{
êê 	
IEnumerable
ëë 
<
ëë 
T
ëë 
>
ëë 
found
ëë  
=
ëë! "
default
ëë# *
(
ëë* +
IEnumerable
ëë+ 6
<
ëë6 7
T
ëë7 8
>
ëë8 9
)
ëë9 :
;
ëë: ;
try
íí 
{
ìì 
PropertyInfo
îî 
info
îî !
=
îî" #
typeof
îî$ *
(
îî* +
T
îî+ ,
)
îî, -
.
îî- .
GetProperty
îî. 9
(
îî9 :
valuePropertyName
îî: K
)
îîK L
;
îîL M
if
ïï 
(
ïï 
info
ïï 
!=
ïï 
null
ïï  
&&
ïï! #
info
ïï$ (
.
ïï( )
CanRead
ïï) 0
&&
ïï1 3
info
ïï4 8
.
ïï8 9
PropertyType
ïï9 E
==
ïïF H
typeof
ïïI O
(
ïïO P
string
ïïP V
)
ïïV W
&&
ïïX Z
info
ïï[ _
.
ïï_ ` 
GetIndexParameters
ïï` r
(
ïïr s
)
ïïs t
.
ïït u
Length
ïïu {
==
ïï| ~
$numïï Ä
)ïïÄ Å
{
ññ 
found
óó 
=
óó 
(
óó 
from
óó !
item
óó" &
in
óó' )
list
óó* .
let
òò  
value
òò! &
=
òò' (
(
òò) *
string
òò* 0
)
òò0 1
(
òò1 2
info
òò2 6
.
òò6 7
GetValue
òò7 ?
(
òò? @
item
òò@ D
,
òòD E
null
òòF J
)
òòJ K
)
òòK L
where
ôô "
value
ôô# (
.
ôô( )
IsLike
ôô) /
(
ôô/ 0
text
ôô0 4
)
ôô4 5
select
öö #
item
öö$ (
)
öö( )
.
öö) *
ToList
öö* 0
(
öö0 1
)
öö1 2
;
öö2 3
}
õõ 
}
úú 
catch
ùù 
(
ùù 
	Exception
ùù 
)
ùù 
{
ûû 
}
üü 
return
†† 
found
†† 
;
†† 
}
°° 	
public
££ 
static
££ 
T
££ 
FindFirstExact
££ &
<
££& '
T
££' (
>
££( )
(
££) *
this
££* .
IEnumerable
££/ :
<
££: ;
T
££; <
>
££< =
list
££> B
,
££B C
string
££D J
valuePropertyName
££K \
,
££\ ]
string
££^ d
text
££e i
)
££i j
{
§§ 	
T
•• 
found
•• 
=
•• 
default
•• 
(
•• 
T
•• 
)
••  
;
••  !
try
¶¶ 
{
ßß 
found
®® 
=
®® 
list
®® 
.
®® 
	FindExact
®® &
(
®®& '
valuePropertyName
®®' 8
,
®®8 9
text
®®: >
)
®®> ?
.
®®? @
FirstOrDefault
®®@ N
(
®®N O
)
®®O P
;
®®P Q
}
©© 
catch
™™ 
(
™™ 
	Exception
™™ 
)
™™ 
{
´´ 
}
¨¨ 
return
≠≠ 
found
≠≠ 
;
≠≠ 
}
ÆÆ 	
public
∞∞ 
static
∞∞ 
T
∞∞ 
FindLastExact
∞∞ %
<
∞∞% &
T
∞∞& '
>
∞∞' (
(
∞∞( )
this
∞∞) -
IEnumerable
∞∞. 9
<
∞∞9 :
T
∞∞: ;
>
∞∞; <
list
∞∞= A
,
∞∞A B
string
∞∞C I
valuePropertyName
∞∞J [
,
∞∞[ \
string
∞∞] c
text
∞∞d h
)
∞∞h i
{
±± 	
T
≤≤ 
found
≤≤ 
=
≤≤ 
default
≤≤ 
(
≤≤ 
T
≤≤ 
)
≤≤  
;
≤≤  !
try
≥≥ 
{
¥¥ 
found
µµ 
=
µµ 
list
µµ 
.
µµ 
	FindExact
µµ &
(
µµ& '
valuePropertyName
µµ' 8
,
µµ8 9
text
µµ: >
)
µµ> ?
.
µµ? @
LastOrDefault
µµ@ M
(
µµM N
)
µµN O
;
µµO P
}
∂∂ 
catch
∑∑ 
(
∑∑ 
	Exception
∑∑ 
)
∑∑ 
{
∏∏ 
}
ππ 
return
∫∫ 
found
∫∫ 
;
∫∫ 
}
ªª 	
public
ΩΩ 
static
ΩΩ 
T
ΩΩ 
FindFirstLike
ΩΩ %
<
ΩΩ% &
T
ΩΩ& '
>
ΩΩ' (
(
ΩΩ( )
this
ΩΩ) -
IEnumerable
ΩΩ. 9
<
ΩΩ9 :
T
ΩΩ: ;
>
ΩΩ; <
list
ΩΩ= A
,
ΩΩA B
string
ΩΩC I
valuePropertyName
ΩΩJ [
,
ΩΩ[ \
string
ΩΩ] c
text
ΩΩd h
)
ΩΩh i
{
ææ 	
T
øø 
found
øø 
=
øø 
default
øø 
(
øø 
T
øø 
)
øø  
;
øø  !
try
¿¿ 
{
¡¡ 
found
¬¬ 
=
¬¬ 
list
¬¬ 
.
¬¬ 
FindLike
¬¬ %
(
¬¬% &
valuePropertyName
¬¬& 7
,
¬¬7 8
text
¬¬9 =
)
¬¬= >
.
¬¬> ?
FirstOrDefault
¬¬? M
(
¬¬M N
)
¬¬N O
;
¬¬O P
}
√√ 
catch
ƒƒ 
(
ƒƒ 
	Exception
ƒƒ 
)
ƒƒ 
{
≈≈ 
}
∆∆ 
return
«« 
found
«« 
;
«« 
}
»» 	
public
   
static
   
T
   
FindLastLike
   $
<
  $ %
T
  % &
>
  & '
(
  ' (
this
  ( ,
IEnumerable
  - 8
<
  8 9
T
  9 :
>
  : ;
list
  < @
,
  @ A
string
  B H
valuePropertyName
  I Z
,
  Z [
string
  \ b
text
  c g
)
  g h
{
ÀÀ 	
T
ÃÃ 
found
ÃÃ 
=
ÃÃ 
default
ÃÃ 
(
ÃÃ 
T
ÃÃ 
)
ÃÃ  
;
ÃÃ  !
try
ÕÕ 
{
ŒŒ 
found
œœ 
=
œœ 
list
œœ 
.
œœ 
FindLike
œœ %
(
œœ% &
valuePropertyName
œœ& 7
,
œœ7 8
text
œœ9 =
)
œœ= >
.
œœ> ?
LastOrDefault
œœ? L
(
œœL M
)
œœM N
;
œœN O
}
–– 
catch
—— 
(
—— 
	Exception
—— 
)
—— 
{
““ 
}
”” 
return
‘‘ 
found
‘‘ 
;
‘‘ 
}
’’ 	
public
◊◊ 
static
◊◊ 
List
◊◊ 
<
◊◊ 
T
◊◊ 
>
◊◊ 
SubsetByIndex
◊◊ +
<
◊◊+ ,
T
◊◊, -
>
◊◊- .
(
◊◊. /
this
◊◊/ 3
List
◊◊4 8
<
◊◊8 9
T
◊◊9 :
>
◊◊: ;
list
◊◊< @
,
◊◊@ A
int
◊◊B E

startIndex
◊◊F P
,
◊◊P Q
int
◊◊R U
endIndex
◊◊V ^
=
◊◊_ `
-
◊◊a b
$num
◊◊b c
)
◊◊c d
{
ÿÿ 	
List
ŸŸ 
<
ŸŸ 
T
ŸŸ 
>
ŸŸ 
result
ŸŸ 
=
ŸŸ 
new
ŸŸ  
List
ŸŸ! %
<
ŸŸ% &
T
ŸŸ& '
>
ŸŸ' (
(
ŸŸ( )
)
ŸŸ) *
;
ŸŸ* +
if
€€ 
(
€€ 

startIndex
€€ 
<
€€ 
$num
€€ 
||
€€ !

startIndex
€€" ,
>=
€€- /
list
€€0 4
.
€€4 5
Count
€€5 :
)
€€: ;
{
‹‹ 
if
›› 
(
›› 

ExtendList
›› 
.
›› &
throwExtensionExceptions
›› 7
)
››7 8
{
ﬁﬁ 
throw
ﬂﬂ 
new
ﬂﬂ )
ArgumentOutOfRangeException
ﬂﬂ 9
(
ﬂﬂ9 :
$str
ﬂﬂ: F
)
ﬂﬂF G
;
ﬂﬂG H
}
‡‡ 
}
·· 
if
„„ 
(
„„ 
list
„„ 
.
„„ 
Count
„„ 
>
„„ 
$num
„„ 
)
„„ 
{
‰‰ 
endIndex
ÂÂ 
=
ÂÂ 
(
ÂÂ 
endIndex
ÂÂ $
<
ÂÂ% &
$num
ÂÂ' (
)
ÂÂ( )
?
ÂÂ* +
list
ÂÂ, 0
.
ÂÂ0 1
Count
ÂÂ1 6
-
ÂÂ7 8
$num
ÂÂ9 :
:
ÂÂ; <
Math
ÂÂ= A
.
ÂÂA B
Min
ÂÂB E
(
ÂÂE F
endIndex
ÂÂF N
,
ÂÂN O
list
ÂÂP T
.
ÂÂT U
Count
ÂÂU Z
-
ÂÂ[ \
$num
ÂÂ] ^
)
ÂÂ^ _
;
ÂÂ_ `

startIndex
ÊÊ 
=
ÊÊ 
Math
ÊÊ !
.
ÊÊ! "
Min
ÊÊ" %
(
ÊÊ% &
endIndex
ÊÊ& .
,
ÊÊ. /
Math
ÊÊ0 4
.
ÊÊ4 5
Max
ÊÊ5 8
(
ÊÊ8 9
$num
ÊÊ9 :
,
ÊÊ: ;

startIndex
ÊÊ< F
)
ÊÊF G
)
ÊÊG H
;
ÊÊH I
result
ÁÁ 
=
ÁÁ 
(
ÁÁ 
from
ÁÁ 
item
ÁÁ #
in
ÁÁ$ &
list
ÁÁ' +
where
ËË 
list
ËË  $
.
ËË$ %
IndexOf
ËË% ,
(
ËË, -
item
ËË- 1
)
ËË1 2
>=
ËË3 5

startIndex
ËË6 @
&&
ËËA C
list
ËËD H
.
ËËH I
IndexOf
ËËI P
(
ËËP Q
item
ËËQ U
)
ËËU V
<=
ËËW Y
endIndex
ËËZ b
select
ÈÈ  
item
ÈÈ! %
)
ÈÈ% &
.
ÈÈ& '
ToList
ÈÈ' -
(
ÈÈ- .
)
ÈÈ. /
;
ÈÈ/ 0
}
ÍÍ 
return
ÎÎ 
result
ÎÎ 
;
ÎÎ 
}
ÏÏ 	
public
ÓÓ 
static
ÓÓ 
T
ÓÓ 
FirstNonZeroItem
ÓÓ (
<
ÓÓ( )
T
ÓÓ) *
>
ÓÓ* +
(
ÓÓ+ ,
this
ÓÓ, 0
List
ÓÓ1 5
<
ÓÓ5 6
T
ÓÓ6 7
>
ÓÓ7 8
list
ÓÓ9 =
,
ÓÓ= >
string
ÓÓ? E
valuePropertyName
ÓÓF W
)
ÓÓW X
{
ÔÔ 	
T
 
result
 
=
 
default
 
(
 
T
  
)
  !
;
! "
try
ÒÒ 
{
ÚÚ 
PropertyInfo
ÛÛ 
info
ÛÛ !
=
ÛÛ" #
typeof
ÛÛ$ *
(
ÛÛ* +
T
ÛÛ+ ,
)
ÛÛ, -
.
ÛÛ- .
GetProperty
ÛÛ. 9
(
ÛÛ9 :
valuePropertyName
ÛÛ: K
)
ÛÛK L
;
ÛÛL M
var
ÙÙ 
found
ÙÙ 
=
ÙÙ 
(
ÙÙ 
from
ÙÙ !
item
ÙÙ" &
in
ÙÙ' )
list
ÙÙ* .
where
ıı "
(
ıı# $
double
ıı$ *
)
ıı* +
Convert
ıı+ 2
.
ıı2 3

ChangeType
ıı3 =
(
ıı= >
info
ıı> B
.
ııB C
GetValue
ııC K
(
ııK L
item
ııL P
,
ııP Q
null
ııR V
)
ııV W
,
ııW X
typeof
ııY _
(
ıı_ `
double
ıı` f
)
ııf g
)
ııg h
>
ııi j
$num
ıık o
select
ˆˆ #
item
ˆˆ$ (
)
ˆˆ( )
.
ˆˆ) *
FirstOrDefault
ˆˆ* 8
(
ˆˆ8 9
)
ˆˆ9 :
;
ˆˆ: ;
result
˜˜ 
=
˜˜ 
(
˜˜ 
T
˜˜ 
)
˜˜ 
found
˜˜ !
;
˜˜! "
}
¯¯ 
catch
˘˘ 
(
˘˘ 
	Exception
˘˘ 
ex
˘˘ 
)
˘˘  
{
˙˙ 
if
˚˚ 
(
˚˚ 

ExtendList
˚˚ 
.
˚˚ &
throwExtensionExceptions
˚˚ 7
)
˚˚7 8
{
¸¸ 
throw
˝˝ 
ex
˝˝ 
;
˝˝ 
}
˛˛ 
}
ˇˇ 
return
ÄÄ 
result
ÄÄ 
;
ÄÄ 
}
ÅÅ 	
public
ÉÉ 
static
ÉÉ 
double
ÉÉ 
HighestValue
ÉÉ )
<
ÉÉ) *
T
ÉÉ* +
>
ÉÉ+ ,
(
ÉÉ, -
this
ÉÉ- 1
List
ÉÉ2 6
<
ÉÉ6 7
T
ÉÉ7 8
>
ÉÉ8 9
list
ÉÉ: >
,
ÉÉ> ?
string
ÉÉ@ F
valuePropertyName
ÉÉG X
,
ÉÉX Y
double
ÉÉZ `
minValue
ÉÉa i
,
ÉÉi j
int
ÉÉk n
	roundUpBy
ÉÉo x
,
ÉÉx y
doubleÉÉz Ä

multiplyByÉÉÅ ã
=ÉÉå ç
$numÉÉé ê
)ÉÉê ë
{
ÑÑ 	
double
ÖÖ 
result
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
PropertyInfo
ÜÜ 
info
ÜÜ 
=
ÜÜ 
typeof
ÜÜ  &
(
ÜÜ& '
T
ÜÜ' (
)
ÜÜ( )
.
ÜÜ) *
GetProperty
ÜÜ* 5
(
ÜÜ5 6
valuePropertyName
ÜÜ6 G
)
ÜÜG H
;
ÜÜH I
if
áá 
(
áá 
info
áá 
!=
áá 
null
áá 
&&
áá 
info
áá  $
.
áá$ %
PropertyType
áá% 1
.
áá1 2
	IsNumeric
áá2 ;
(
áá; <
)
áá< =
)
áá= >
{
àà 
double
ââ 
max
ââ 
=
ââ 
minValue
ââ %
;
ââ% &
foreach
ää 
(
ää 
T
ää 
item
ää 
in
ää  "
list
ää# '
)
ää' (
{
ãã 
object
åå 
	propValue
åå $
=
åå% &
info
åå' +
.
åå+ ,
GetValue
åå, 4
(
åå4 5
item
åå5 9
,
åå9 :
null
åå; ?
)
åå? @
;
åå@ A
double
çç 
value
çç  
=
çç! "
(
çç# $
double
çç$ *
)
çç* +
Convert
çç+ 2
.
çç2 3

ChangeType
çç3 =
(
çç= >
	propValue
çç> G
,
ççG H
typeof
ççI O
(
ççO P
double
ççP V
)
ççV W
)
ççW X
;
ççX Y
max
éé 
=
éé 
Math
éé 
.
éé 
Max
éé "
(
éé" #
max
éé# &
,
éé& '
value
éé( -
*
éé. /

multiplyBy
éé0 :
)
éé: ;
;
éé; <
}
èè 
long
ëë 
	remainder
ëë 
;
ëë 
long
íí 
quotient
íí 
=
íí 
Math
íí  $
.
íí$ %
DivRem
íí% +
(
íí+ ,
Convert
íí, 3
.
íí3 4
ToInt64
íí4 ;
(
íí; <
Math
íí< @
.
íí@ A
Round
ííA F
(
ííF G
max
ííG J
,
ííJ K
$num
ííL M
)
ííM N
)
ííN O
,
ííO P
Convert
ííQ X
.
ííX Y
ToInt64
ííY `
(
íí` a
	roundUpBy
íía j
)
ííj k
,
íík l
out
íím p
	remainder
ííq z
)
ííz {
;
íí{ |
result
ìì 
=
ìì 
(
ìì 
quotient
ìì "
+
ìì# $
$num
ìì% &
)
ìì& '
*
ìì( )
	roundUpBy
ìì* 3
;
ìì3 4
if
ïï 
(
ïï 
result
ïï 
-
ïï 
Math
ïï !
.
ïï! "
Round
ïï" '
(
ïï' (
max
ïï( +
,
ïï+ ,
$num
ïï- .
)
ïï. /
<=
ïï0 2
$num
ïï3 5
)
ïï5 6
{
ññ 
result
óó 
+=
óó 
Math
óó "
.
óó" #
Round
óó# (
(
óó( )
	roundUpBy
óó) 2
*
óó3 4
$num
óó5 8
,
óó8 9
$num
óó: ;
)
óó; <
;
óó< =
}
òò 
}
ôô 
return
öö 
result
öö 
;
öö 
}
õõ 	
public
üü 
static
üü 
double
üü "
LeastSquaresValueAtX
üü 1
(
üü1 2
List
üü2 6
<
üü6 7
PointD
üü7 =
>
üü= >
points
üü? E
,
üüE F
double
üüG M
x
üüN O
)
üüO P
{
†† 	
double
°° 
slope
°° 
=
°° 

ExtendList
°° %
.
°°% &
SlopeOfPoints
°°& 3
(
°°3 4
points
°°4 :
)
°°: ;
;
°°; <
double
¢¢ 

yIntercept
¢¢ 
=
¢¢ 

ExtendList
¢¢  *
.
¢¢* + 
YInterceptOfPoints
¢¢+ =
(
¢¢= >
points
¢¢> D
,
¢¢D E
slope
¢¢F K
)
¢¢K L
;
¢¢L M
return
££ 
(
££ 
(
££ 
slope
££ 
*
££ 
x
££ 
)
££ 
+
££  !

yIntercept
££" ,
)
££, -
;
££- .
}
§§ 	
private
¶¶ 
static
¶¶ 
double
¶¶ 
SlopeOfPoints
¶¶ +
(
¶¶+ ,
List
¶¶, 0
<
¶¶0 1
PointD
¶¶1 7
>
¶¶7 8
points
¶¶9 ?
)
¶¶? @
{
ßß 	
double
®® 
xBar
®® 
=
®® 
points
®®  
.
®®  !
Average
®®! (
(
®®( )
p
®®) *
=>
®®+ -
p
®®. /
.
®®/ 0
X
®®0 1
)
®®1 2
;
®®2 3
double
©© 
yBar
©© 
=
©© 
points
©©  
.
©©  !
Average
©©! (
(
©©( )
p
©©) *
=>
©©+ -
p
©©. /
.
©©/ 0
Y
©©0 1
)
©©1 2
;
©©2 3
double
™™ 
dividend
™™ 
=
™™ 
points
™™ $
.
™™$ %
Sum
™™% (
(
™™( )
p
™™) *
=>
™™+ -
(
™™. /
p
™™/ 0
.
™™0 1
X
™™1 2
-
™™3 4
xBar
™™5 9
)
™™9 :
*
™™; <
(
™™= >
p
™™> ?
.
™™? @
Y
™™@ A
-
™™B C
yBar
™™D H
)
™™H I
)
™™I J
;
™™J K
double
´´ 
divisor
´´ 
=
´´ 
(
´´ 
float
´´ #
)
´´# $
points
´´$ *
.
´´* +
Sum
´´+ .
(
´´. /
p
´´/ 0
=>
´´1 3
Math
´´4 8
.
´´8 9
Pow
´´9 <
(
´´< =
p
´´= >
.
´´> ?
X
´´? @
-
´´A B
xBar
´´C G
,
´´G H
$num
´´I J
)
´´J K
)
´´K L
;
´´L M
return
¨¨ 
(
¨¨ 
dividend
¨¨ 
/
¨¨ 
divisor
¨¨ &
)
¨¨& '
;
¨¨' (
}
≠≠ 	
private
ØØ 
static
ØØ 
double
ØØ  
YInterceptOfPoints
ØØ 0
(
ØØ0 1
List
ØØ1 5
<
ØØ5 6
PointD
ØØ6 <
>
ØØ< =
points
ØØ> D
,
ØØD E
double
ØØF L
slope
ØØM R
)
ØØR S
{
∞∞ 	
double
±± 
xBar
±± 
=
±± 
points
±±  
.
±±  !
Average
±±! (
(
±±( )
p
±±) *
=>
±±+ -
p
±±. /
.
±±/ 0
X
±±0 1
)
±±1 2
;
±±2 3
double
≤≤ 
yBar
≤≤ 
=
≤≤ 
points
≤≤  
.
≤≤  !
Average
≤≤! (
(
≤≤( )
p
≤≤) *
=>
≤≤+ -
p
≤≤. /
.
≤≤/ 0
Y
≤≤0 1
)
≤≤1 2
;
≤≤2 3
return
≥≥ 
(
≥≥ 
yBar
≥≥ 
-
≥≥ 
(
≥≥ 
slope
≥≥ !
*
≥≥" #
xBar
≥≥$ (
)
≥≥( )
)
≥≥) *
;
≥≥* +
}
¥¥ 	
public
∂∂ 
static
∂∂ 
double
∂∂ 
[
∂∂ 
]
∂∂ 
CalcTrendBase
∂∂ ,
<
∂∂, -
T
∂∂- .
>
∂∂. /
(
∂∂/ 0
this
∂∂0 4
List
∂∂5 9
<
∂∂9 :
T
∂∂: ;
>
∂∂; <
list
∂∂= A
,
∂∂A B
PropertyInfo
∂∂C O
info
∂∂P T
)
∂∂T U
{
∑∑ 	
double
∏∏ 
[
∏∏ 
]
∏∏ 
points
∏∏ 
=
∏∏ 
new
∏∏ !
double
∏∏" (
[
∏∏( )
]
∏∏) *
{
∏∏+ ,
$num
∏∏- /
,
∏∏/ 0
$num
∏∏1 3
}
∏∏4 5
;
∏∏5 6
if
ππ 
(
ππ 
list
ππ 
!=
ππ 
null
ππ 
&&
ππ 
list
ππ  $
.
ππ$ %
Count
ππ% *
>
ππ+ ,
$num
ππ- .
&&
ππ/ 1
info
ππ2 6
!=
ππ7 9
null
ππ: >
)
ππ> ?
{
∫∫ 
List
ªª 
<
ªª 
PointD
ªª 
>
ªª 
data
ªª !
=
ªª" #
new
ªª$ '
List
ªª( ,
<
ªª, -
PointD
ªª- 3
>
ªª3 4
(
ªª4 5
)
ªª5 6
;
ªª6 7
foreach
ºº 
(
ºº 
T
ºº 
item
ºº 
in
ºº  "
list
ºº# '
)
ºº' (
{
ΩΩ 
object
ææ 
	propValue
ææ $
=
ææ% &
info
ææ' +
.
ææ+ ,
GetValue
ææ, 4
(
ææ4 5
item
ææ5 9
,
ææ9 :
null
ææ; ?
)
ææ? @
;
ææ@ A
double
øø 
y
øø 
=
øø 
(
øø  
double
øø  &
)
øø& '
Convert
øø' .
.
øø. /

ChangeType
øø/ 9
(
øø9 :
	propValue
øø: C
,
øøC D
typeof
øøE K
(
øøK L
double
øøL R
)
øøR S
)
øøS T
;
øøT U
if
¿¿ 
(
¿¿ 
y
¿¿ 
>
¿¿ 
$num
¿¿  
)
¿¿  !
{
¡¡ 
double
¬¬ 
x
¬¬  
=
¬¬! "
(
¬¬# $
double
¬¬$ *
)
¬¬* +
(
¬¬+ ,
list
¬¬, 0
.
¬¬0 1
IndexOf
¬¬1 8
(
¬¬8 9
item
¬¬9 =
)
¬¬= >
)
¬¬> ?
;
¬¬? @
data
√√ 
.
√√ 
Add
√√  
(
√√  !
new
√√! $
PointD
√√% +
(
√√+ ,
x
√√, -
,
√√- .
y
√√/ 0
)
√√0 1
)
√√1 2
;
√√2 3
}
ƒƒ 
}
≈≈ 
points
∆∆ 
[
∆∆ 
$num
∆∆ 
]
∆∆ 
=
∆∆ 

ExtendList
∆∆ &
.
∆∆& '"
LeastSquaresValueAtX
∆∆' ;
(
∆∆; <
data
∆∆< @
,
∆∆@ A
$num
∆∆B C
)
∆∆C D
;
∆∆D E
points
«« 
[
«« 
$num
«« 
]
«« 
=
«« 

ExtendList
«« &
.
««& '"
LeastSquaresValueAtX
««' ;
(
««; <
data
««< @
,
««@ A
data
««B F
.
««F G
Count
««G L
-
««M N
$num
««O P
)
««P Q
;
««Q R
}
»» 
return
…… 
points
…… 
;
…… 
}
   	
public
ÃÃ 
static
ÃÃ 
double
ÃÃ 
[
ÃÃ 
]
ÃÃ 
CalcTrendValues
ÃÃ .
<
ÃÃ. /
T
ÃÃ/ 0
>
ÃÃ0 1
(
ÃÃ1 2
this
ÃÃ2 6
List
ÃÃ7 ;
<
ÃÃ; <
T
ÃÃ< =
>
ÃÃ= >
list
ÃÃ? C
,
ÃÃC D
string
ÃÃE K
propertyName
ÃÃL X
)
ÃÃX Y
{
ÕÕ 	
double
ŒŒ 
[
ŒŒ 
]
ŒŒ 
points
ŒŒ 
=
ŒŒ 
new
ŒŒ !
double
ŒŒ" (
[
ŒŒ( )
]
ŒŒ) *
{
ŒŒ+ ,
$num
ŒŒ- /
,
ŒŒ/ 0
$num
ŒŒ1 3
}
ŒŒ4 5
;
ŒŒ5 6
try
œœ 
{
–– 
if
—— 
(
—— 
list
—— 
.
—— 
Count
—— 
>
——  
$num
——! "
)
——" #
{
““ 
PropertyInfo
””  
info
””! %
=
””& '
typeof
””( .
(
””. /
T
””/ 0
)
””0 1
.
””1 2
GetProperty
””2 =
(
””= >
propertyName
””> J
)
””J K
;
””K L
if
‘‘ 
(
‘‘ 
info
‘‘ 
!=
‘‘ 
null
‘‘  $
&&
‘‘% '
info
‘‘( ,
.
‘‘, -
PropertyType
‘‘- 9
.
‘‘9 :
	IsNumeric
‘‘: C
(
‘‘C D
)
‘‘D E
)
‘‘E F
{
’’ 
points
÷÷ 
=
÷÷  
list
÷÷! %
.
÷÷% &
CalcTrendBase
÷÷& 3
(
÷÷3 4
info
÷÷4 8
)
÷÷8 9
;
÷÷9 :
}
◊◊ 
}
ÿÿ 
}
ŸŸ 
catch
⁄⁄ 
(
⁄⁄ 
	Exception
⁄⁄ 
ex
⁄⁄ 
)
⁄⁄  
{
€€ 
if
‹‹ 
(
‹‹ 

ExtendList
‹‹ 
.
‹‹ &
throwExtensionExceptions
‹‹ 7
)
‹‹7 8
{
›› 
throw
ﬁﬁ 
ex
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 
}
‡‡ 
return
·· 
points
·· 
;
·· 
}
‚‚ 	
public
‰‰ 
static
‰‰ 
double
‰‰ 
[
‰‰ 
]
‰‰ 
CalcTrendValues
‰‰ .
<
‰‰. /
T
‰‰/ 0
>
‰‰0 1
(
‰‰1 2
this
‰‰2 6
List
‰‰7 ;
<
‰‰; <
T
‰‰< =
>
‰‰= >
list
‰‰? C
,
‰‰C D
string
‰‰E K
valuePropertyName
‰‰L ]
,
‰‰] ^
string
‰‰_ e
datePropertyName
‰‰f v
,
‰‰v w
DateTime‰‰x Ä
	startDate‰‰Å ä
,‰‰ä ã
DateTime‰‰å î
endDate‰‰ï ú
)‰‰ú ù
{
ÂÂ 	
double
ÊÊ 
[
ÊÊ 
]
ÊÊ 
points
ÊÊ 
=
ÊÊ 
new
ÊÊ !
double
ÊÊ" (
[
ÊÊ( )
]
ÊÊ) *
{
ÊÊ+ ,
$num
ÊÊ- /
,
ÊÊ/ 0
$num
ÊÊ1 3
}
ÊÊ4 5
;
ÊÊ5 6
try
ÁÁ 
{
ËË 
if
ÈÈ 
(
ÈÈ 
list
ÈÈ 
.
ÈÈ 
Count
ÈÈ 
>
ÈÈ  
$num
ÈÈ! "
)
ÈÈ" #
{
ÍÍ 
PropertyInfo
ÎÎ  
info
ÎÎ! %
=
ÎÎ& '
typeof
ÎÎ( .
(
ÎÎ. /
T
ÎÎ/ 0
)
ÎÎ0 1
.
ÎÎ1 2
GetProperty
ÎÎ2 =
(
ÎÎ= >
valuePropertyName
ÎÎ> O
)
ÎÎO P
;
ÎÎP Q
PropertyInfo
ÏÏ  
dateInfo
ÏÏ! )
=
ÏÏ* +
typeof
ÏÏ, 2
(
ÏÏ2 3
T
ÏÏ3 4
)
ÏÏ4 5
.
ÏÏ5 6
GetProperty
ÏÏ6 A
(
ÏÏA B
datePropertyName
ÏÏB R
)
ÏÏR S
;
ÏÏS T
if
ÓÓ 
(
ÓÓ 
info
ÓÓ 
!=
ÓÓ 
null
ÓÓ  $
&&
ÓÓ% '
info
ÓÓ( ,
.
ÓÓ, -
PropertyType
ÓÓ- 9
.
ÓÓ9 :
	IsNumeric
ÓÓ: C
(
ÓÓC D
)
ÓÓD E
&&
ÓÓF H
dateInfo
ÔÔ  
!=
ÔÔ! #
null
ÔÔ$ (
&&
ÔÔ) +
dateInfo
ÔÔ, 4
.
ÔÔ4 5
PropertyType
ÔÔ5 A
.
ÔÔA B

IsDateTime
ÔÔB L
(
ÔÔL M
)
ÔÔM N
)
ÔÔN O
{
 
var
ÒÒ 
newList
ÒÒ #
=
ÒÒ$ %
(
ÒÒ& '
from
ÒÒ' +
item
ÒÒ, 0
in
ÒÒ1 3
list
ÒÒ4 8
where
ÚÚ' ,
(
ÚÚ- .
(
ÚÚ. /
DateTime
ÚÚ/ 7
)
ÚÚ7 8
(
ÚÚ8 9
dateInfo
ÚÚ9 A
.
ÚÚA B
GetValue
ÚÚB J
(
ÚÚJ K
item
ÚÚK O
,
ÚÚO P
null
ÚÚQ U
)
ÚÚU V
)
ÚÚV W
)
ÚÚW X
.
ÚÚX Y
	IsBetween
ÚÚY b
(
ÚÚb c
	startDate
ÚÚc l
,
ÚÚl m
endDate
ÚÚn u
,
ÚÚu v
true
ÚÚw {
)
ÚÚ{ |
select
ÛÛ' -
item
ÛÛ. 2
)
ÛÛ2 3
.
ÛÛ3 4
ToList
ÛÛ4 :
(
ÛÛ: ;
)
ÛÛ; <
;
ÛÛ< =
points
ÙÙ 
=
ÙÙ  
newList
ÙÙ! (
.
ÙÙ( )
CalcTrendBase
ÙÙ) 6
(
ÙÙ6 7
info
ÙÙ7 ;
)
ÙÙ; <
;
ÙÙ< =
}
ıı 
}
ˆˆ 
}
˜˜ 
catch
¯¯ 
(
¯¯ 
	Exception
¯¯ 
ex
¯¯ 
)
¯¯  
{
˘˘ 
if
˙˙ 
(
˙˙ 

ExtendList
˙˙ 
.
˙˙ &
throwExtensionExceptions
˙˙ 7
)
˙˙7 8
{
˚˚ 
throw
¸¸ 
ex
¸¸ 
;
¸¸ 
}
˝˝ 
}
˛˛ 
return
ˇˇ 
points
ˇˇ 
;
ˇˇ 
}
ÄÄ 	
public
ÇÇ 
static
ÇÇ 
double
ÇÇ 
[
ÇÇ 
]
ÇÇ 
CalcTrendValues
ÇÇ .
<
ÇÇ. /
T
ÇÇ/ 0
>
ÇÇ0 1
(
ÇÇ1 2
this
ÇÇ2 6
List
ÇÇ7 ;
<
ÇÇ; <
T
ÇÇ< =
>
ÇÇ= >
list
ÇÇ? C
,
ÇÇC D
string
ÇÇE K
propertyName
ÇÇL X
,
ÇÇX Y
string
ÇÇZ `
datePropName
ÇÇa m
,
ÇÇm n
DateTime
ÇÇo w
endDate
ÇÇx 
,ÇÇ Ä
intÇÇÅ Ñ
rollingÇÇÖ å
)ÇÇå ç
{
ÉÉ 	
double
ÑÑ 
[
ÑÑ 
]
ÑÑ 
points
ÑÑ 
=
ÑÑ 
new
ÑÑ !
double
ÑÑ" (
[
ÑÑ( )
]
ÑÑ) *
{
ÑÑ+ ,
$num
ÑÑ- /
,
ÑÑ/ 0
$num
ÑÑ1 3
}
ÑÑ4 5
;
ÑÑ5 6
try
ÖÖ 
{
ÜÜ 
if
áá 
(
áá 
list
áá 
.
áá 
Count
áá 
>
áá  
$num
áá! "
)
áá" #
{
àà 
PropertyInfo
ââ  
info
ââ! %
=
ââ& '
typeof
ââ( .
(
ââ. /
T
ââ/ 0
)
ââ0 1
.
ââ1 2
GetProperty
ââ2 =
(
ââ= >
propertyName
ââ> J
)
ââJ K
;
ââK L
PropertyInfo
ää  
dateInfo
ää! )
=
ää* +
typeof
ää, 2
(
ää2 3
T
ää3 4
)
ää4 5
.
ää5 6
GetProperty
ää6 A
(
ääA B
datePropName
ääB N
)
ääN O
;
ääO P
if
åå 
(
åå 
info
åå 
!=
åå 
null
åå  $
&&
åå% '
info
åå( ,
.
åå, -
PropertyType
åå- 9
.
åå9 :
	IsNumeric
åå: C
(
ååC D
)
ååD E
&&
ååF H
dateInfo
çç  
!=
çç! #
null
çç$ (
&&
çç) +
dateInfo
çç, 4
.
çç4 5
PropertyType
çç5 A
.
ççA B

IsDateTime
ççB L
(
ççL M
)
ççM N
)
ççN O
{
éé 
DateTime
èè  
	startDate
èè! *
=
èè+ ,
endDate
èè- 4
.
èè4 5
	AddMonths
èè5 >
(
èè> ?
-
èè? @
(
èè@ A
rolling
èèA H
-
èèI J
$num
èèK L
)
èèL M
)
èèM N
;
èèN O
var
êê 
newList
êê #
=
êê$ %
(
êê& '
from
êê' +
item
êê, 0
in
êê1 3
list
êê4 8
where
ëë' ,
(
ëë- .
(
ëë. /
DateTime
ëë/ 7
)
ëë7 8
(
ëë8 9
dateInfo
ëë9 A
.
ëëA B
GetValue
ëëB J
(
ëëJ K
item
ëëK O
,
ëëO P
null
ëëQ U
)
ëëU V
)
ëëV W
)
ëëW X
.
ëëX Y
	IsBetween
ëëY b
(
ëëb c
	startDate
ëëc l
,
ëël m
endDate
ëën u
,
ëëu v
true
ëëw {
)
ëë{ |
select
íí' -
item
íí. 2
)
íí2 3
.
íí3 4
ToList
íí4 :
(
íí: ;
)
íí; <
;
íí< =
points
ìì 
=
ìì  
newList
ìì! (
.
ìì( )
CalcTrendBase
ìì) 6
(
ìì6 7
info
ìì7 ;
)
ìì; <
;
ìì< =
}
îî 
}
ïï 
}
ññ 
catch
óó 
(
óó 
	Exception
óó 
ex
óó 
)
óó  
{
òò 
if
ôô 
(
ôô 

ExtendList
ôô 
.
ôô &
throwExtensionExceptions
ôô 7
)
ôô7 8
{
öö 
throw
õõ 
ex
õõ 
;
õõ 
}
úú 
}
ùù 
return
ûû 
points
ûû 
;
ûû 
}
üü 	
public
°° 
static
°° 
double
°° 
[
°° 
]
°° ,
CalcTrendValuesStartingAtIndex
°° =
<
°°= >
T
°°> ?
>
°°? @
(
°°@ A
this
°°A E
List
°°F J
<
°°J K
T
°°K L
>
°°L M
list
°°N R
,
°°R S
string
°°T Z
propertyName
°°[ g
,
°°g h
int
°°i l

startIndex
°°m w
,
°°w x
int
°°y |
endIndex°°} Ö
=°°Ü á
-°°à â
$num°°â ä
)°°ä ã
{
¢¢ 	
double
££ 
[
££ 
]
££ 
points
££ 
=
££ 
new
££ !
double
££" (
[
££( )
]
££) *
{
££+ ,
$num
££- /
,
££/ 0
$num
££1 3
}
££4 5
;
££5 6
try
§§ 
{
•• 
if
¶¶ 
(
¶¶ 
list
¶¶ 
.
¶¶ 
Count
¶¶ 
>
¶¶  
$num
¶¶! "
)
¶¶" #
{
ßß 
PropertyInfo
®®  
info
®®! %
=
®®& '
typeof
®®( .
(
®®. /
T
®®/ 0
)
®®0 1
.
®®1 2
GetProperty
®®2 =
(
®®= >
propertyName
®®> J
)
®®J K
;
®®K L
if
™™ 
(
™™ 
info
™™ 
!=
™™ 
null
™™  $
&&
™™% '
info
™™( ,
.
™™, -
PropertyType
™™- 9
.
™™9 :
	IsNumeric
™™: C
(
™™C D
)
™™D E
)
™™E F
{
´´ 
var
¨¨ 
newList
¨¨ #
=
¨¨$ %
list
¨¨& *
.
¨¨* +
SubsetByIndex
¨¨+ 8
(
¨¨8 9

startIndex
¨¨9 C
,
¨¨C D
endIndex
¨¨E M
)
¨¨M N
;
¨¨N O
points
≠≠ 
=
≠≠  
newList
≠≠! (
.
≠≠( )
CalcTrendBase
≠≠) 6
(
≠≠6 7
info
≠≠7 ;
)
≠≠; <
;
≠≠< =
}
ÆÆ 
}
ØØ 
}
∞∞ 
catch
±± 
(
±± 
	Exception
±± 
ex
±± 
)
±±  
{
≤≤ 
if
≥≥ 
(
≥≥ 

ExtendList
≥≥ 
.
≥≥ &
throwExtensionExceptions
≥≥ 7
)
≥≥7 8
{
¥¥ 
throw
µµ 
ex
µµ 
;
µµ 
}
∂∂ 
}
∑∑ 
return
∏∏ 
points
∏∏ 
;
∏∏ 
}
ππ 	
}
ºº 
}ΩΩ Ö
hD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\ObjectExtensions\ExtendNumerics.cs
	namespace 	
ObjectExtensions
 
{ 
public		 
static		 
class		 
ExtendNumerics		 #
{

 
public 
static	 
double 
Truncate 
(  
this  $
double% +
value, 1
,1 2
int3 6
places7 =
)= >
{ 
double 	
result
 
= 
Math 
. 
Round 
( 
( 
(  
value  %
>=& (
$num) +
)+ ,
?- .
Math/ 3
.3 4
Floor4 9
(9 :
value: ?
*@ A
$numB F
)F G
:H I
MathJ N
.N O
CeilingO V
(V W
valueW \
*] ^
$num_ c
)c d
)d e
/f g
$numh l
,l m
placesn t
)t u
;u v
return 	
result
 
; 
} 
public 
static	 
decimal 
Truncate  
(  !
this! %
decimal& -
value. 3
,3 4
int5 8
places9 ?
)? @
{ 
decimal 

result 
= 
Math 
. 
Round 
( 
(  
(  !
value! &
>=' )
$num* ,
), -
?. /
Math0 4
.4 5
Floor5 :
(: ;
value; @
*A B
$numC G
)G H
:I J
MathK O
.O P
CeilingP W
(W X
valueX ]
*^ _
$num` d
)d e
)e f
/g h
$numi m
,m n
placeso u
)u v
;v w
return 	
result
 
; 
} 
} 
} Í
uD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\ObjectExtensions\ExtendObservableCollections.cs
	namespace 	
ObjectExtensions
 
{		 
public

 
static

 
class

 '
ExtendObservableCollections

 0
{ 
public 
static	 
void 
AddRange 
< 
T 
>  
(  !
this! % 
ObservableCollection& :
<: ;
T; <
>< =

collection> H
,H I
IEnumerableJ U
<U V
TV W
>W X
listY ]
)] ^
{ 
foreach 

(
 
T 
item 
in 
list 
) 
{ 

collection 
. 
Add 
( 
item 
) 
; 
} 
} 
} 
} üK
nD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\ObjectExtensions\ExtendSqlDataReaders.cs
	namespace		 	
ObjectExtensions		
 
{

 
public 

static 
class  
ExtendSqlDataReaders ,
{ 
public 
static 
string 
GetStringOrDefault /
(/ 0
this0 4
MySqlDataReader5 D
readerE K
,K L
intM P
ordinalQ X
,X Y
stringZ `
defaultValuea m
)m n
{ 	
string 
value 
= 
defaultValue '
;' (
if 
( 
! 
reader 
. 
IsDBNull  
(  !
ordinal! (
)( )
)) *
{ 
value 
= 
reader 
. 
	GetString (
(( )
ordinal) 0
)0 1
;1 2
} 
return 
value 
; 
} 	
public 
static 
Int32 
GetInt32OrDefault -
(- .
this. 2
MySqlDataReader3 B
readerC I
,I J
intK N
ordinalO V
,V W
Int32X ]
defaultValue^ j
)j k
{ 	
Int32 
value 
= 
defaultValue &
;& '
if 
( 
! 
reader 
. 
IsDBNull  
(  !
ordinal! (
)( )
)) *
{ 
value 
= 
reader 
. 
GetInt32 '
(' (
ordinal( /
)/ 0
;0 1
} 
return 
value 
; 
} 	
public!! 
static!! 
Int64!! 
GetInt64OrDefault!! -
(!!- .
this!!. 2
MySqlDataReader!!3 B
reader!!C I
,!!I J
int!!K N
ordinal!!O V
,!!V W
Int64!!X ]
defaultValue!!^ j
)!!j k
{"" 	
Int64## 
value## 
=## 
defaultValue## &
;##& '
if$$ 
($$ 
!$$ 
reader$$ 
.$$ 
IsDBNull$$  
($$  !
ordinal$$! (
)$$( )
)$$) *
{%% 
value&& 
=&& 
reader&& 
.&& 
GetInt64&& '
(&&' (
ordinal&&( /
)&&/ 0
;&&0 1
}'' 
return(( 
value(( 
;(( 
})) 	
public++ 
static++ 
DateTime++  
GetDateTimeOrDefault++ 3
(++3 4
this++4 8
MySqlDataReader++9 H
reader++I O
,++O P
int++Q T
ordinal++U \
,++\ ]
DateTime++^ f
defaultValue++g s
)++s t
{,, 	
DateTime-- 
value-- 
=-- 
defaultValue-- )
;--) *
if.. 
(.. 
!.. 
reader.. 
... 
IsDBNull..  
(..  !
ordinal..! (
)..( )
)..) *
{// 
value00 
=00 
reader00 
.00 
GetDateTime00 *
(00* +
ordinal00+ 2
)002 3
;003 4
}11 
return22 
value22 
;22 
}33 	
public55 
static55 
double55 
GetDoubleOrDefault55 /
(55/ 0
this550 4
MySqlDataReader555 D
reader55E K
,55K L
int55M P
ordinal55Q X
,55X Y
double55Z `
defaultValue55a m
)55m n
{66 	
double77 
value77 
=77 
defaultValue77 '
;77' (
if88 
(88 
!88 
reader88 
.88 
IsDBNull88  
(88  !
ordinal88! (
)88( )
)88) *
{99 
value:: 
=:: 
reader:: 
.:: 
	GetDouble:: (
(::( )
ordinal::) 0
)::0 1
;::1 2
};; 
return<< 
value<< 
;<< 
}== 	
public?? 
static?? 
decimal?? 
GetDecimalOrDefault?? 1
(??1 2
this??2 6
MySqlDataReader??7 F
reader??G M
,??M N
int??O R
ordinal??S Z
,??Z [
decimal??\ c
defaultValue??d p
)??p q
{@@ 	
decimalAA 
valueAA 
=AA 
defaultValueAA (
;AA( )
ifBB 
(BB 
!BB 
readerBB 
.BB 
IsDBNullBB  
(BB  !
ordinalBB! (
)BB( )
)BB) *
{CC 
valueDD 
=DD 
readerDD 
.DD 

GetDecimalDD )
(DD) *
ordinalDD* 1
)DD1 2
;DD2 3
}EE 
returnFF 
valueFF 
;FF 
}GG 	
publicII 
staticII 
boolII 
GetBoolOrDefaultII +
(II+ ,
thisII, 0
MySqlDataReaderII1 @
readerIIA G
,IIG H
intIII L
ordinalIIM T
,IIT U
boolIIV Z
defaultValueII[ g
)IIg h
{JJ 	
boolKK 
valueKK 
=KK 
defaultValueKK %
;KK% &
ifLL 
(LL 
!LL 
readerLL 
.LL 
IsDBNullLL  
(LL  !
ordinalLL! (
)LL( )
)LL) *
{MM 
valueNN 
=NN 
readerNN 
.NN 

GetBooleanNN )
(NN) *
ordinalNN* 1
)NN1 2
;NN2 3
}OO 
returnPP 
valuePP 
;PP 
}QQ 	
publicSS 
staticSS 
voidSS 
ClearSS  
(SS  !
thisSS! %
DataRowSS& -
rowSS. 1
)SS1 2
{TT 	
forUU 
(UU 
intUU 
iUU 
=UU 
$numUU 
;UU 
iUU 
<UU 
rowUU  #
.UU# $
TableUU$ )
.UU) *
ColumnsUU* 1
.UU1 2
CountUU2 7
;UU7 8
iUU9 :
++UU: <
)UU< =
{VV 

DataColumnWW 
columnWW !
=WW" #
rowWW$ '
.WW' (
TableWW( -
.WW- .
ColumnsWW. 5
[WW5 6
iWW6 7
]WW7 8
;WW8 9
ifXX 
(XX 
columnXX 
.XX 
DefaultValueXX '
!=XX( *
nullXX+ /
)XX/ 0
{YY 
ifZZ 
(ZZ 
!ZZ 
columnZZ 
.ZZ  
ReadOnlyZZ  (
)ZZ( )
{[[ 
switch\\ 
(\\  
column\\  &
.\\& '
DataType\\' /
.\\/ 0
Name\\0 4
.\\4 5
ToLower\\5 <
(\\< =
)\\= >
.\\> ?
	Substring\\? H
(\\H I
$num\\I J
,\\J K
$num\\L M
)\\M N
)\\N O
{]] 
case^^  
$str^^! &
:^^& '
case__  
$str__! &
:__& '
row``  #
[``# $
i``$ %
]``% &
=``' (
$str``) +
;``+ ,
breakaa  %
;aa% &
casebb  
$strbb! &
:bb& '
casecc  
$strcc! &
:cc& '
casedd  
$strdd! &
:dd& '
caseee  
$stree! &
:ee& '
caseff  
$strff! &
:ff& '
casegg  
$strgg! &
:gg& '
casehh  
$strhh! &
:hh& '
caseii  
$strii! &
:ii& '
rowjj  #
[jj# $
ijj$ %
]jj% &
=jj' (
$numjj) *
;jj* +
breakkk  %
;kk% &
casell  
$strll! &
:ll& '
rowmm  #
[mm# $
imm$ %
]mm% &
=mm' (
falsemm) .
;mm. /
breaknn  %
;nn% &
caseoo  
$stroo! &
:oo& '
rowpp  #
[pp# $
ipp$ %
]pp% &
=pp' (
newpp) ,
DateTimepp- 5
(pp5 6
$numpp6 7
)pp7 8
;pp8 9
breakqq  %
;qq% &
caserr  
$strrr! &
:rr& '
defaultss #
:ss# $
rowtt  #
[tt# $
itt$ %
]tt% &
=tt' (
DBNulltt) /
.tt/ 0
Valuett0 5
;tt5 6
breakuu  %
;uu% &
}vv 
}ww 
elsexx 
{yy 
throwzz 
newzz !
	Exceptionzz" +
(zz+ ,
stringzz, 2
.zz2 3
Formatzz3 9
(zz9 :
$strzz: T
,zzT U
izzV W
)zzW X
)zzX Y
;zzY Z
}{{ 
}|| 
else}} 
{~~ 
row 
[ 
i 
] 
= 
column #
.# $
DefaultValue$ 0
;0 1
}
ÄÄ 
}
ÅÅ 
}
ÇÇ 	
}
ÉÉ 
}ÑÑ ’¯
gD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\ObjectExtensions\ExtendStrings.cs
	namespace

 	
ObjectExtensions


 
{ 
public 

static 
class 
ExtendStrings %
{ 
public 
static 
bool 
IsPhone "
(" #
this# '
string( .
text/ 3
)3 4
{ 	
bool 
result 
= 
true 
; 
text 
= 
text 
. 
Replace 
(  
$str  #
,# $
$str% '
)' (
.( )
Replace) 0
(0 1
$str1 4
,4 5
$str6 8
)8 9
.9 :
Replace: A
(A B
$strB E
,E F
$strG I
)I J
;J K
long 
value 
; 
result 
= 
( 
( 
text 
. 
Length "
==# %
$num& '
||( *
text+ /
./ 0
Length0 6
==7 9
$num: <
)< =
&&> @
longA E
.E F
TryParseF N
(N O
textO S
,S T
outU X
valueY ^
)^ _
)_ `
;` a
return 
result 
; 
} 	
public 
static 
bool 
IsIn 
(  
this  $
string% +
str, /
,/ 0
string1 7
	container8 A
,A B
boolC G
caseSensitiveH U
=V W
trueX \
)\ ]
{ 	
bool 
result 
= 
! 
string !
.! "
IsNullOrEmpty" /
(/ 0
str0 3
)3 4
;4 5
if 
( 
result 
) 
{ 
result 
= 
( 
caseSensitive '
)' (
?) *
(+ ,
str, /
==0 2
	container3 <
)< =
||> @
	containerA J
.J K
IndexOfK R
(R S
strS V
)V W
>=X Z
$num[ \
:) *
str+ .
.. /
ToUpper/ 6
(6 7
)7 8
==9 ;
	container< E
.E F
ToUpperF M
(M N
)N O
||P R
	containerS \
.\ ]
ToUpper] d
(d e
)e f
.f g
IndexOfg n
(n o
stro r
.r s
ToUppers z
(z {
){ |
)| }
>=	~ Ä
$num
Å Ç
;
Ç É
} 
return 
result 
; 
}   	
public"" 
static"" 
bool"" 
	IsInExact"" $
(""$ %
this""% )
string""* 0
str""1 4
,""4 5
string""6 <
	container""= F
)""F G
{## 	
string$$ 
[$$ 
]$$ 
parts$$ 
=$$ 
	container$$ &
.$$& '
Split$$' ,
($$, -
$char$$- 0
)$$0 1
;$$1 2
var%% 
result%% 
=%% 
parts%% 
.%% 
Where%% $
(%%$ %
x%%% &
=>%%' )
x%%* +
==%%, .
str%%/ 2
)%%2 3
.%%3 4
FirstOrDefault%%4 B
(%%B C
)%%C D
;%%D E
return&& 
(&& 
result&& 
!=&& 
null&& "
)&&" #
;&&# $
}'' 	
public)) 
static)) 
bool)) 
IsIn)) 
())  
this))  $
string))% +
str)), /
,))/ 0
IEnumerable))1 <
<))< =
string))= C
>))C D
list))E I
,))I J
bool))K O
caseSensitive))P ]
=))^ _
true))` d
)))d e
{** 	
return++ 
(++ 
caseSensitive++ !
)++! "
?++# $
(++% &
list++& *
.++* +
Where+++ 0
(++0 1
x++1 2
=>++3 5
x++6 7
==++8 :
str++; >
)++> ?
.++? @
FirstOrDefault++@ N
(++N O
)++O P
!=++Q S
null++T X
)++X Y
:,,$ %
(,,& '
list,,' +
.,,+ ,
Where,,, 1
(,,1 2
x,,2 3
=>,,4 6
x,,7 8
.,,8 9
ToUpper,,9 @
(,,@ A
),,A B
==,,C E
str,,F I
.,,I J
ToUpper,,J Q
(,,Q R
),,R S
),,S T
.,,T U
FirstOrDefault,,U c
(,,c d
),,d e
!=,,f h
null,,i m
),,m n
;,,n o
}-- 	
public// 
static// 
bool// 
IsIn// 
<//  
T//  !
>//! "
(//" #
this//# '
string//( .
str/// 2
,//2 3
IEnumerable//4 ?
<//? @
T//@ A
>//A B
list//C G
,//G H
string//I O
propertyName//P \
,//\ ]
bool//^ b
caseSensitive//c p
=//q r
true//s w
)//w x
{00 	
Type11 
itemType11 
=11 
typeof11 "
(11" #
T11# $
)11$ %
;11% &
PropertyInfo22 
info22 
=22 
itemType22  (
.22( )
GetPropertyInfo22) 8
(228 9
propertyName229 E
,22E F
TypeChecker22G R
.22R S
String22S Y
)22Y Z
;22Z [
if33 
(33 
info33 
==33 
null33 
)33 
{44 
throw55 
new55 %
InvalidOperationException55 3
(553 4
string554 :
.55: ;
Format55; A
(55A B
$str55B i
,55i j
propertyName55k w
)55w x
)55x y
;55y z
}66 
return77 
(77 
caseSensitive77 !
)77! "
?77# $
(77% &
list77& *
.77* +
Where77+ 0
(770 1
x771 2
=>773 5
info776 :
.77: ;
GetValue77; C
(77C D
x77D E
)77E F
.77F G
ToString77G O
(77O P
)77P Q
==77R T
str77U X
)77X Y
.77Y Z
FirstOrDefault77Z h
(77h i
)77i j
!=77k m
null77n r
)77r s
:88$ %
(88& '
list88' +
.88+ ,
Where88, 1
(881 2
x882 3
=>884 6
info887 ;
.88; <
GetValue88< D
(88D E
x88E F
)88F G
.88G H
ToString88H P
(88P Q
)88Q R
.88R S
ToUpper88S Z
(88Z [
)88[ \
==88] _
str88` c
.88c d
ToUpper88d k
(88k l
)88l m
)88m n
.88n o
FirstOrDefault88o }
(88} ~
)88~ 
!=
88Ä Ç
null
88É á
)
88á à
;
88à â
}99 	
public;; 
static;; 
string;; 
FromByteArray;; *
(;;* +
this;;+ /
byte;;0 4
[;;4 5
];;5 6
bytes;;7 <
);;< =
{<< 	
return== 
Encoding== 
.== 
UTF8==  
.==  !
	GetString==! *
(==* +
bytes==+ 0
,==0 1
$num==2 3
,==3 4
bytes==5 :
.==: ;
Length==; A
)==A B
;==B C
}>> 	
public@@ 
static@@ 
byte@@ 
[@@ 
]@@ 
ToByteArray@@ (
(@@( )
this@@) -
string@@. 4
str@@5 8
)@@8 9
{AA 	
byteBB 
[BB 
]BB 
resultBB 
=BB 
EncodingBB $
.BB$ %
ASCIIBB% *
.BB* +
GetBytesBB+ 3
(BB3 4
strBB4 7
)BB7 8
;BB8 9
returnCC 
resultCC 
;CC 
}DD 	
publicFF 
staticFF 
stringFF 
Base64EncodeFF )
(FF) *
thisFF* .
stringFF/ 5
textFF6 :
,FF: ;
EncodingFF< D
encodingFFE M
=FFN O
nullFFP T
)FFT U
{GG 	
stringHH 
valueHH 
=HH 
stringHH !
.HH! "
EmptyHH" '
;HH' (
ifII 
(II 
!II 
stringII 
.II 
IsNullOrEmptyII %
(II% &
textII& *
)II* +
)II+ ,
{JJ 
encodingKK 
=KK 
(KK 
encodingKK $
==KK% '
nullKK( ,
)KK, -
?KK. /
EncodingKK0 8
.KK8 9
UTF8KK9 =
:KK> ?
encodingKK@ H
;KKH I
byteLL 
[LL 
]LL 
bytesLL 
=LL 
encodingLL '
.LL' (
GetBytesLL( 0
(LL0 1
textLL1 5
)LL5 6
;LL6 7
valueMM 
=MM 
ConvertMM 
.MM  
ToBase64StringMM  .
(MM. /
bytesMM/ 4
)MM4 5
;MM5 6
}NN 
returnOO 
valueOO 
;OO 
}PP 	
publicRR 
staticRR 
stringRR 
Base64DecodeRR )
(RR) *
thisRR* .
stringRR/ 5
textRR6 :
,RR: ;
EncodingRR< D
encodingRRE M
=RRN O
nullRRP T
)RRT U
{SS 	
stringTT 
valueTT 
=TT 
stringTT !
.TT! "
EmptyTT" '
;TT' (
byteUU 
[UU 
]UU 
bytesUU 
;UU 
ifVV 
(VV 
!VV 
stringVV 
.VV 
IsNullOrEmptyVV %
(VV% &
textVV& *
)VV* +
)VV+ ,
{WW 
encodingXX 
=XX 
(XX 
encodingXX $
==XX% '
nullXX( ,
)XX, -
?XX. /
EncodingXX0 8
.XX8 9
UTF8XX9 =
:XX> ?
encodingXX@ H
;XXH I
tryYY 
{ZZ 
bytes[[ 
=[[ 
Convert[[ #
.[[# $
FromBase64String[[$ 4
([[4 5
text[[5 9
)[[9 :
;[[: ;
value\\ 
=\\ 
encoding\\ $
.\\$ %
	GetString\\% .
(\\. /
bytes\\/ 4
)\\4 5
;\\5 6
}]] 
catch^^ 
(^^ 
	Exception^^  
)^^  !
{__ 
value`` 
=`` 
text``  
;``  !
}aa 
}bb 
returncc 
valuecc 
;cc 
}dd 	
publicff 
staticff 
boolff 
IsLikeff !
(ff! "
thisff" &
stringff' -
strff. 1
,ff1 2
stringff3 9
patternff: A
)ffA B
{gg 	
boolhh 
isMatchhh 
=hh 
truehh 
;hh  
boolii 
isWildCardOnii 
=ii 
falseii  %
;ii% &
booljj 
isCharWildCardOnjj !
=jj" #
falsejj$ )
;jj) *
boolkk 
isCharSetOnkk 
=kk 
falsekk $
;kk$ %
boolll 
isNotCharSetOnll 
=ll  !
falsell" '
;ll' (
boolmm 
endOfPatternmm 
=mm 
falsemm  %
;mm% &
intnn 
lastWildCardnn 
=nn 
-nn  
$numnn  !
;nn! "
intoo 
patternIndexoo 
=oo 
$numoo  
;oo  !
charpp 
ppp 
=pp 
$charpp 
;pp 
Listqq 
<qq 
charqq 
>qq 
setqq 
=qq 
newqq  
Listqq! %
<qq% &
charqq& *
>qq* +
(qq+ ,
)qq, -
;qq- .
forss 
(ss 
intss 
iss 
=ss 
$numss 
;ss 
iss 
<ss 
strss  #
.ss# $
Lengthss$ *
;ss* +
iss, -
++ss- /
)ss/ 0
{tt 
charuu 
cuu 
=uu 
struu 
[uu 
iuu 
]uu 
;uu  
endOfPatternvv 
=vv 
(vv  
patternIndexvv  ,
>=vv- /
patternvv0 7
.vv7 8
Lengthvv8 >
)vv> ?
;vv? @
ifww 
(ww 
!ww 
endOfPatternww !
)ww! "
{xx 
pyy 
=yy 
patternyy 
[yy  
patternIndexyy  ,
]yy, -
;yy- .
ifzz 
(zz 
!zz 
isWildCardOnzz %
&&zz& (
pzz) *
==zz+ -
$charzz. 1
)zz1 2
{{{ 
lastWildCard|| $
=||% &
patternIndex||' 3
;||3 4
isWildCardOn}} $
=}}% &
true}}' +
;}}+ ,
while~~ 
(~~ 
patternIndex~~ +
<~~, -
pattern~~. 5
.~~5 6
Length~~6 <
&&~~= ?
pattern~~@ G
[~~G H
patternIndex~~H T
]~~T U
==~~V X
$char~~Y \
)~~\ ]
{ 
patternIndex
ÄÄ (
++
ÄÄ( *
;
ÄÄ* +
}
ÅÅ 
p
ÇÇ 
=
ÇÇ 
(
ÇÇ 
patternIndex
ÇÇ )
>=
ÇÇ* ,
pattern
ÇÇ- 4
.
ÇÇ4 5
Length
ÇÇ5 ;
)
ÇÇ; <
?
ÇÇ= >
$char
ÇÇ? C
:
ÇÇD E
p
ÇÇF G
=
ÇÇH I
pattern
ÇÇJ Q
[
ÇÇQ R
patternIndex
ÇÇR ^
]
ÇÇ^ _
;
ÇÇ_ `
}
ÉÉ 
else
ÑÑ 
if
ÑÑ 
(
ÑÑ 
p
ÑÑ 
==
ÑÑ !
$char
ÑÑ" %
)
ÑÑ% &
{
ÖÖ 
isCharWildCardOn
ÜÜ (
=
ÜÜ) *
true
ÜÜ+ /
;
ÜÜ/ 0
patternIndex
áá $
++
áá$ &
;
áá& '
}
àà 
else
ââ 
if
ââ 
(
ââ 
p
ââ 
==
ââ !
$char
ââ" %
)
ââ% &
{
ää 
if
ãã 
(
ãã 
pattern
ãã #
[
ãã# $
++
ãã$ &
patternIndex
ãã& 2
]
ãã2 3
==
ãã4 6
$char
ãã7 :
)
ãã: ;
{
åå 
isNotCharSetOn
çç *
=
çç+ ,
true
çç- 1
;
çç1 2
patternIndex
éé (
++
éé( *
;
éé* +
}
èè 
else
êê 
{
ëë 
isCharSetOn
íí '
=
íí( )
true
íí* .
;
íí. /
}
ìì 
set
ïï 
.
ïï 
Clear
ïï !
(
ïï! "
)
ïï" #
;
ïï# $
if
ññ 
(
ññ 
pattern
ññ #
[
ññ# $
patternIndex
ññ$ 0
+
ññ1 2
$num
ññ3 4
]
ññ4 5
==
ññ6 8
$char
ññ9 <
&&
ññ= ?
pattern
ññ@ G
[
ññG H
patternIndex
ññH T
+
ññU V
$num
ññW X
]
ññX Y
==
ññZ \
$char
ññ] `
)
ññ` a
{
óó 
char
òò  
start
òò! &
=
òò' (
char
òò) -
.
òò- .
ToUpper
òò. 5
(
òò5 6
pattern
òò6 =
[
òò= >
patternIndex
òò> J
]
òòJ K
)
òòK L
;
òòL M
patternIndex
ôô (
+=
ôô) +
$num
ôô, -
;
ôô- .
char
öö  
end
öö! $
=
öö% &
char
öö' +
.
öö+ ,
ToUpper
öö, 3
(
öö3 4
pattern
öö4 ;
[
öö; <
patternIndex
öö< H
]
ööH I
)
ööI J
;
ööJ K
if
õõ 
(
õõ  
start
õõ  %
<=
õõ& (
end
õõ) ,
)
õõ, -
{
úú 
for
ùù  #
(
ùù$ %
char
ùù% )
ci
ùù* ,
=
ùù- .
start
ùù/ 4
;
ùù4 5
ci
ùù6 8
<=
ùù9 ;
end
ùù< ?
;
ùù? @
ci
ùùA C
++
ùùC E
)
ùùE F
{
ûû  !
set
üü$ '
.
üü' (
Add
üü( +
(
üü+ ,
ci
üü, .
)
üü. /
;
üü/ 0
}
††  !
}
°° 
patternIndex
¢¢ (
++
¢¢( *
;
¢¢* +
}
££ 
while
•• 
(
•• 
patternIndex
•• +
<
••, -
pattern
••. 5
.
••5 6
Length
••6 <
&&
••= ?
pattern
••@ G
[
••G H
patternIndex
••H T
]
••T U
!=
••V X
$char
••Y \
)
••\ ]
{
¶¶ 
set
ßß 
.
ßß  
Add
ßß  #
(
ßß# $
pattern
ßß$ +
[
ßß+ ,
patternIndex
ßß, 8
]
ßß8 9
)
ßß9 :
;
ßß: ;
patternIndex
®® (
++
®®( *
;
®®* +
}
©© 
patternIndex
™™ $
++
™™$ &
;
™™& '
}
´´ 
}
¨¨ 
if
ÆÆ 
(
ÆÆ 
isWildCardOn
ÆÆ  
)
ÆÆ  !
{
ØØ 
if
∞∞ 
(
∞∞ 
char
∞∞ 
.
∞∞ 
ToUpper
∞∞ $
(
∞∞$ %
c
∞∞% &
)
∞∞& '
==
∞∞( *
char
∞∞+ /
.
∞∞/ 0
ToUpper
∞∞0 7
(
∞∞7 8
p
∞∞8 9
)
∞∞9 :
)
∞∞: ;
{
±± 
isWildCardOn
≤≤ $
=
≤≤% &
false
≤≤' ,
;
≤≤, -
patternIndex
≥≥ $
++
≥≥$ &
;
≥≥& '
}
¥¥ 
}
µµ 
else
∂∂ 
if
∂∂ 
(
∂∂ 
isCharWildCardOn
∂∂ )
)
∂∂) *
{
∑∑ 
isCharWildCardOn
∏∏ $
=
∏∏% &
false
∏∏' ,
;
∏∏, -
}
ππ 
else
∫∫ 
if
∫∫ 
(
∫∫ 
isCharSetOn
∫∫ $
||
∫∫% '
isNotCharSetOn
∫∫( 6
)
∫∫6 7
{
ªª 
bool
ºº 
	charMatch
ºº "
=
ºº# $
(
ºº% &
set
ºº& )
.
ºº) *
Contains
ºº* 2
(
ºº2 3
char
ºº3 7
.
ºº7 8
ToUpper
ºº8 ?
(
ºº? @
c
ºº@ A
)
ººA B
)
ººB C
)
ººC D
;
ººD E
if
ΩΩ 
(
ΩΩ 
(
ΩΩ 
isNotCharSetOn
ΩΩ '
&&
ΩΩ( *
	charMatch
ΩΩ+ 4
)
ΩΩ4 5
||
ΩΩ6 8
(
ΩΩ9 :
isCharSetOn
ΩΩ: E
&&
ΩΩF H
!
ΩΩI J
	charMatch
ΩΩJ S
)
ΩΩS T
)
ΩΩT U
{
ææ 
if
øø 
(
øø 
lastWildCard
øø (
>=
øø) +
$num
øø, -
)
øø- .
{
¿¿ 
patternIndex
¡¡ (
=
¡¡) *
lastWildCard
¡¡+ 7
;
¡¡7 8
}
¬¬ 
else
√√ 
{
ƒƒ 
isMatch
≈≈ #
=
≈≈$ %
false
≈≈& +
;
≈≈+ ,
break
∆∆ !
;
∆∆! "
}
«« 
}
»» 
isNotCharSetOn
…… "
=
……# $
isCharSetOn
……% 0
=
……1 2
false
……3 8
;
……8 9
}
   
else
ÀÀ 
{
ÃÃ 
if
ÕÕ 
(
ÕÕ 
char
ÕÕ 
.
ÕÕ 
ToUpper
ÕÕ $
(
ÕÕ$ %
c
ÕÕ% &
)
ÕÕ& '
==
ÕÕ( *
char
ÕÕ+ /
.
ÕÕ/ 0
ToUpper
ÕÕ0 7
(
ÕÕ7 8
p
ÕÕ8 9
)
ÕÕ9 :
)
ÕÕ: ;
{
ŒŒ 
patternIndex
œœ $
++
œœ$ &
;
œœ& '
}
–– 
else
—— 
{
““ 
if
”” 
(
”” 
lastWildCard
”” (
>=
””) +
$num
””, -
)
””- .
{
‘‘ 
patternIndex
’’ (
=
’’) *
lastWildCard
’’+ 7
;
’’7 8
}
÷÷ 
else
◊◊ 
{
ÿÿ 
isMatch
ŸŸ #
=
ŸŸ$ %
false
ŸŸ& +
;
ŸŸ+ ,
break
⁄⁄ !
;
⁄⁄! "
}
€€ 
}
‹‹ 
}
›› 
}
ﬁﬁ 
endOfPattern
ﬂﬂ 
=
ﬂﬂ 
(
ﬂﬂ 
patternIndex
ﬂﬂ (
>=
ﬂﬂ) +
pattern
ﬂﬂ, 3
.
ﬂﬂ3 4
Length
ﬂﬂ4 :
)
ﬂﬂ: ;
;
ﬂﬂ; <
if
·· 
(
·· 
isMatch
·· 
&&
·· 
!
·· 
endOfPattern
·· (
)
··( )
{
‚‚ 
bool
„„ 
isOnlyWildCards
„„ $
=
„„% &
true
„„' +
;
„„+ ,
for
‰‰ 
(
‰‰ 
int
‰‰ 
i
‰‰ 
=
‰‰ 
patternIndex
‰‰ )
;
‰‰) *
i
‰‰+ ,
<
‰‰- .
pattern
‰‰/ 6
.
‰‰6 7
Length
‰‰7 =
;
‰‰= >
i
‰‰? @
++
‰‰@ B
)
‰‰B C
{
ÂÂ 
if
ÊÊ 
(
ÊÊ 
pattern
ÊÊ 
[
ÊÊ  
i
ÊÊ  !
]
ÊÊ! "
!=
ÊÊ# %
$char
ÊÊ& )
)
ÊÊ) *
{
ÁÁ 
isOnlyWildCards
ËË '
=
ËË( )
false
ËË* /
;
ËË/ 0
break
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}
ÎÎ 
if
ÏÏ 
(
ÏÏ 
isOnlyWildCards
ÏÏ #
)
ÏÏ# $
{
ÌÌ 
endOfPattern
ÓÓ  
=
ÓÓ! "
true
ÓÓ# '
;
ÓÓ' (
}
ÔÔ 
}
 
return
ÒÒ 
(
ÒÒ 
isMatch
ÒÒ 
&&
ÒÒ 
endOfPattern
ÒÒ +
)
ÒÒ+ ,
;
ÒÒ, -
}
ÚÚ 	
public
ÙÙ 
static
ÙÙ 
int
ÙÙ  
IndexOfFirstNumber
ÙÙ ,
(
ÙÙ, -
this
ÙÙ- 1
string
ÙÙ2 8
str
ÙÙ9 <
)
ÙÙ< =
{
ıı 	
string
ˇˇ 
numbers
ˇˇ 
=
ˇˇ 
$str
ˇˇ )
;
ˇˇ) *
int
ÄÄ 
index
ÄÄ 
=
ÄÄ 
str
ÄÄ 
.
ÄÄ 

IndexOfAny
ÄÄ &
(
ÄÄ& '
numbers
ÄÄ' .
.
ÄÄ. /
ToArray
ÄÄ/ 6
(
ÄÄ6 7
)
ÄÄ7 8
)
ÄÄ8 9
;
ÄÄ9 :
return
ÅÅ 
index
ÅÅ 
;
ÅÅ 
}
ÇÇ 	
public
ÑÑ 
static
ÑÑ 
int
ÑÑ 
IndexOfLastNumber
ÑÑ +
(
ÑÑ+ ,
this
ÑÑ, 0
string
ÑÑ1 7
str
ÑÑ8 ;
)
ÑÑ; <
{
ÖÖ 	
string
èè 
numbers
èè 
=
èè 
$str
èè )
;
èè) *
int
êê 
index
êê 
=
êê 
str
êê 
.
êê 
LastIndexOfAny
êê *
(
êê* +
numbers
êê+ 2
.
êê2 3
ToArray
êê3 :
(
êê: ;
)
êê; <
)
êê< =
;
êê= >
return
ëë 
index
ëë 
;
ëë 
}
íí 	
public
îî 
static
îî 
int
îî 
IndexOfFirstAlpha
îî +
(
îî+ ,
this
îî, 0
string
îî1 7
str
îî8 ;
,
îî; <
bool
îî= A
caseSensitive
îîB O
=
îîP Q
false
îîR W
)
îîW X
{
ïï 	
string
üü 
alphas
üü 
=
üü 
$str
üü 8
;
üü8 9
int
†† 
index
†† 
=
†† 
str
†† 
.
†† 

IndexOfAny
†† &
(
††& '
alphas
††' -
.
††- .
ToArray
††. 5
(
††5 6
)
††6 7
)
††7 8
;
††8 9
return
°° 
index
°° 
;
°° 
}
¢¢ 	
public
££ 
static
££ 
int
££ 
IndexOfLastAlpha
££ *
(
££* +
this
££+ /
string
££0 6
str
££7 :
,
££: ;
bool
££< @
caseSensitive
££A N
=
££O P
false
££Q V
)
££V W
{
§§ 	
string
•• 
alphas
•• 
=
•• 
$str
•• 8
;
••8 9
int
¶¶ 
index
¶¶ 
=
¶¶ 
str
¶¶ 
.
¶¶ 
LastIndexOfAny
¶¶ *
(
¶¶* +
alphas
¶¶+ 1
.
¶¶1 2
ToArray
¶¶2 9
(
¶¶9 :
)
¶¶: ;
)
¶¶; <
;
¶¶< =
return
ßß 
index
ßß 
;
ßß 
}
®® 	
public
™™ 
static
™™ 
int
™™ !
IndexOfFirstSpecial
™™ -
(
™™- .
this
™™. 2
string
™™3 9
str
™™: =
)
™™= >
{
´´ 	
string
¨¨ 
alphas
¨¨ 
=
¨¨ 
$str
¨¨ @
;
¨¨@ A
int
≠≠ 
index
≠≠ 
=
≠≠ 
str
≠≠ 
.
≠≠ 

IndexOfAny
≠≠ &
(
≠≠& '
alphas
≠≠' -
.
≠≠- .
ToArray
≠≠. 5
(
≠≠5 6
)
≠≠6 7
)
≠≠7 8
;
≠≠8 9
return
ÆÆ 
index
ÆÆ 
;
ÆÆ 
}
ØØ 	
public
∞∞ 
static
∞∞ 
int
∞∞  
IndexOfLastSpecial
∞∞ ,
(
∞∞, -
this
∞∞- 1
string
∞∞2 8
str
∞∞9 <
)
∞∞< =
{
±± 	
string
≤≤ 
specials
≤≤ 
=
≤≤ 
$str
≤≤ B
;
≤≤B C
int
≥≥ 
index
≥≥ 
=
≥≥ 
str
≥≥ 
.
≥≥ 
LastIndexOfAny
≥≥ *
(
≥≥* +
specials
≥≥+ 3
.
≥≥3 4
ToArray
≥≥4 ;
(
≥≥; <
)
≥≥< =
)
≥≥= >
;
≥≥> ?
return
¥¥ 
index
¥¥ 
;
¥¥ 
}
µµ 	
public
∑∑ 
static
∑∑ 
bool
∑∑ 
	IsInteger
∑∑ $
(
∑∑$ %
this
∑∑% )
string
∑∑* 0
str
∑∑1 4
)
∑∑4 5
{
∏∏ 	
bool
ππ 
result
ππ 
=
ππ 
false
ππ 
;
ππ  
int
∫∫ 
value
∫∫ 
;
∫∫ 
result
ªª 
=
ªª 
int
ªª 
.
ªª 
TryParse
ªª !
(
ªª! "
str
ªª" %
,
ªª% &
out
ªª' *
value
ªª+ 0
)
ªª0 1
;
ªª1 2
return
ºº 
result
ºº 
;
ºº 
}
ΩΩ 	
public
øø 
static
øø 
bool
øø 
IsDouble
øø #
(
øø# $
this
øø$ (
string
øø) /
str
øø0 3
)
øø3 4
{
¿¿ 	
bool
¡¡ 
result
¡¡ 
=
¡¡ 
false
¡¡ 
;
¡¡  
double
¬¬ 
value
¬¬ 
;
¬¬ 
result
√√ 
=
√√ 
double
√√ 
.
√√ 
TryParse
√√ $
(
√√$ %
str
√√% (
,
√√( )
out
√√* -
value
√√. 3
)
√√3 4
;
√√4 5
return
ƒƒ 
result
ƒƒ 
;
ƒƒ 
}
≈≈ 	
public
«« 
static
«« 
bool
«« 
	IsDecimal
«« $
(
««$ %
this
««% )
string
««* 0
str
««1 4
)
««4 5
{
»» 	
bool
…… 
result
…… 
=
…… 
false
…… 
;
……  
decimal
   
value
   
;
   
result
ÀÀ 
=
ÀÀ 
decimal
ÀÀ 
.
ÀÀ 
TryParse
ÀÀ %
(
ÀÀ% &
str
ÀÀ& )
,
ÀÀ) *
out
ÀÀ+ .
value
ÀÀ/ 4
)
ÀÀ4 5
;
ÀÀ5 6
return
ÃÃ 
result
ÃÃ 
;
ÃÃ 
}
ÕÕ 	
public
œœ 
static
œœ 
bool
œœ 
	IsNumeric
œœ $
(
œœ$ %
this
œœ% )
string
œœ* 0
str
œœ1 4
)
œœ4 5
{
–– 	
bool
—— 
result
—— 
=
—— 
false
—— 
;
——  
result
““ 
=
““ 
str
““ 
.
““ 
	IsInteger
““ "
(
““" #
)
““# $
||
““% '
str
““( +
.
““+ ,
IsDouble
““, 4
(
““4 5
)
““5 6
||
““7 9
str
““: =
.
““= >
	IsDecimal
““> G
(
““G H
)
““H I
;
““I J
return
”” 
result
”” 
;
”” 
}
‘‘ 	
public
÷÷ 
static
÷÷ 
List
÷÷ 
<
÷÷ 
string
÷÷ !
>
÷÷! "
SplitQuotedString
÷÷# 4
(
÷÷4 5
this
÷÷5 9
string
÷÷: @
text
÷÷A E
,
÷÷E F
char
÷÷G K
splitter
÷÷L T
,
÷÷T U
int
÷÷V Y
lineno
÷÷Z `
=
÷÷a b
$num
÷÷c d
)
÷÷d e
{
◊◊ 	
List
ÿÿ 
<
ÿÿ 
string
ÿÿ 
>
ÿÿ 
result
ÿÿ 
=
ÿÿ  !
new
ÿÿ" %
List
ÿÿ& *
<
ÿÿ* +
string
ÿÿ+ 1
>
ÿÿ1 2
(
ÿÿ2 3
)
ÿÿ3 4
;
ÿÿ4 5
bool
ŸŸ 
inQuotedString
ŸŸ 
=
ŸŸ  !
false
ŸŸ" '
;
ŸŸ' (
string
⁄⁄ 
[
⁄⁄ 
]
⁄⁄ 
parts
⁄⁄ 
=
⁄⁄ 
text
⁄⁄ !
.
⁄⁄! "
Split
⁄⁄" '
(
⁄⁄' (
splitter
⁄⁄( 0
)
⁄⁄0 1
;
⁄⁄1 2
StringBuilder
€€ 
field
€€ 
=
€€  !
new
€€" %
StringBuilder
€€& 3
(
€€3 4
)
€€4 5
;
€€5 6
foreach
‹‹ 
(
‹‹ 
string
‹‹ 
part
‹‹  
in
‹‹! #
parts
‹‹$ )
)
‹‹) *
{
›› 
if
ﬁﬁ 
(
ﬁﬁ 
part
ﬁﬁ 
.
ﬁﬁ 

StartsWith
ﬁﬁ #
(
ﬁﬁ# $
$str
ﬁﬁ$ (
)
ﬁﬁ( )
)
ﬁﬁ) *
{
ﬂﬂ 
inQuotedString
‡‡ "
=
‡‡# $
true
‡‡% )
;
‡‡) *
field
·· 
.
·· 
AppendFormat
·· &
(
··& '
$str
··' .
,
··. /
part
··0 4
)
··4 5
;
··5 6
if
‚‚ 
(
‚‚ 
part
‚‚ 
.
‚‚ 
EndsWith
‚‚ %
(
‚‚% &
$str
‚‚& *
)
‚‚* +
)
‚‚+ ,
{
„„ 
inQuotedString
‰‰ &
=
‰‰' (
false
‰‰) .
;
‰‰. /
result
ÂÂ 
.
ÂÂ 
Add
ÂÂ "
(
ÂÂ" #
field
ÂÂ# (
.
ÂÂ( )
ToString
ÂÂ) 1
(
ÂÂ1 2
)
ÂÂ2 3
)
ÂÂ3 4
;
ÂÂ4 5
field
ÊÊ 
.
ÊÊ 
Clear
ÊÊ #
(
ÊÊ# $
)
ÊÊ$ %
;
ÊÊ% &
}
ÁÁ 
}
ËË 
else
ÈÈ 
if
ÈÈ 
(
ÈÈ 
part
ÈÈ 
.
ÈÈ 
EndsWith
ÈÈ &
(
ÈÈ& '
$str
ÈÈ' +
)
ÈÈ+ ,
)
ÈÈ, -
{
ÍÍ 
field
ÎÎ 
.
ÎÎ 
Append
ÎÎ  
(
ÎÎ  !
part
ÎÎ! %
)
ÎÎ% &
;
ÎÎ& '
inQuotedString
ÏÏ "
=
ÏÏ# $
false
ÏÏ% *
;
ÏÏ* +
result
ÌÌ 
.
ÌÌ 
Add
ÌÌ 
(
ÌÌ 
field
ÌÌ $
.
ÌÌ$ %
ToString
ÌÌ% -
(
ÌÌ- .
)
ÌÌ. /
)
ÌÌ/ 0
;
ÌÌ0 1
field
ÓÓ 
.
ÓÓ 
Clear
ÓÓ 
(
ÓÓ  
)
ÓÓ  !
;
ÓÓ! "
}
ÔÔ 
else
 
{
ÒÒ 
field
ÚÚ 
.
ÚÚ 
Append
ÚÚ  
(
ÚÚ  !
part
ÚÚ! %
)
ÚÚ% &
;
ÚÚ& '
if
ÛÛ 
(
ÛÛ 
!
ÛÛ 
inQuotedString
ÛÛ '
)
ÛÛ' (
{
ÙÙ 
result
ıı 
.
ıı 
Add
ıı "
(
ıı" #
field
ıı# (
.
ıı( )
ToString
ıı) 1
(
ıı1 2
)
ıı2 3
)
ıı3 4
;
ıı4 5
field
ˆˆ 
.
ˆˆ 
Clear
ˆˆ #
(
ˆˆ# $
)
ˆˆ$ %
;
ˆˆ% &
}
˜˜ 
else
¯¯ 
{
˘˘ 
field
˙˙ 
.
˙˙ 
Append
˙˙ $
(
˙˙$ %
$str
˙˙% )
)
˙˙) *
;
˙˙* +
}
˚˚ 
}
¸¸ 
}
˝˝ 
return
˛˛ 
result
˛˛ 
;
˛˛ 
}
ˇˇ 	
public
ÅÅ 
static
ÅÅ 
string
ÅÅ 
Compress
ÅÅ %
(
ÅÅ% &
this
ÅÅ& *
string
ÅÅ+ 1
text
ÅÅ2 6
)
ÅÅ6 7
{
ÇÇ 	
string
ÉÉ 
result
ÉÉ 
=
ÉÉ 
text
ÉÉ  
;
ÉÉ  !
for
ÑÑ 
(
ÑÑ 
int
ÑÑ 
i
ÑÑ 
=
ÑÑ 
$num
ÑÑ 
;
ÑÑ 
i
ÑÑ 
<=
ÑÑ  
$num
ÑÑ! #
;
ÑÑ# $
i
ÑÑ% &
++
ÑÑ& (
)
ÑÑ( )
{
ÖÖ 
result
ÜÜ 
=
ÜÜ 
result
ÜÜ 
.
ÜÜ  
Replace
ÜÜ  '
(
ÜÜ' (
(
ÜÜ( )
(
ÜÜ) *
char
ÜÜ* .
)
ÜÜ. /
i
ÜÜ/ 0
)
ÜÜ0 1
.
ÜÜ1 2
ToString
ÜÜ2 :
(
ÜÜ: ;
)
ÜÜ; <
,
ÜÜ< =
$str
ÜÜ> @
)
ÜÜ@ A
;
ÜÜA B
}
áá 
return
àà 
result
àà 
;
àà 
}
ââ 	
public
ãã 
static
ãã 
string
ãã 
CamelCaseWord
ãã *
(
ãã* +
this
ãã+ /
string
ãã0 6
text
ãã7 ;
)
ãã; <
{
åå 	
string
çç 
result
çç 
=
çç 
text
çç  
;
çç  !
if
éé 
(
éé 
!
éé 
string
éé 
.
éé 
IsNullOrEmpty
éé %
(
éé% &
result
éé& ,
)
éé, -
)
éé- .
{
èè 
result
êê 
=
êê 
result
êê 
.
êê  
ToLower
êê  '
(
êê' (
)
êê( )
;
êê) *
result
ëë 
=
ëë 
string
ëë 
.
ëë  
Format
ëë  &
(
ëë& '
$str
ëë' /
,
ëë/ 0
result
ëë1 7
[
ëë7 8
$num
ëë8 9
]
ëë9 :
.
ëë: ;
ToString
ëë; C
(
ëëC D
)
ëëD E
.
ëëE F
ToUpper
ëëF M
(
ëëM N
)
ëëN O
,
ëëO P
(
ëëQ R
result
ëëR X
.
ëëX Y
Length
ëëY _
>
ëë` a
$num
ëëb c
)
ëëc d
?
ëëe f
result
ëëg m
.
ëëm n
	Substring
ëën w
(
ëëw x
$num
ëëx y
)
ëëy z
:
ëë{ |
stringëë} É
.ëëÉ Ñ
EmptyëëÑ â
)ëëâ ä
;ëëä ã
}
íí 
return
ìì 
result
ìì 
;
ìì 
}
îî 	
public
ññ 
static
ññ 
string
ññ 
	CamelCase
ññ &
(
ññ& '
this
ññ' +
string
ññ, 2
text
ññ3 7
)
ññ7 8
{
óó 	
StringBuilder
òò 
result
òò  
=
òò! "
new
òò# &
StringBuilder
òò' 4
(
òò4 5
)
òò5 6
;
òò6 7
if
ôô 
(
ôô 
text
ôô 
.
ôô 
Length
ôô 
>
ôô 
$num
ôô 
)
ôô  
{
öö 
string
õõ 
[
õõ 
]
õõ 
parts
õõ 
=
õõ  
text
õõ! %
.
õõ% &
Split
õõ& +
(
õõ+ ,
$char
õõ, /
)
õõ/ 0
;
õõ0 1
for
úú 
(
úú 
int
úú 
i
úú 
=
úú 
$num
úú 
;
úú 
i
úú  !
<
úú" #
parts
úú$ )
.
úú) *
Length
úú* 0
;
úú0 1
i
úú2 3
++
úú3 5
)
úú5 6
{
ùù 
parts
ûû 
[
ûû 
i
ûû 
]
ûû 
=
ûû 
parts
ûû $
[
ûû$ %
i
ûû% &
]
ûû& '
.
ûû' (
CamelCaseWord
ûû( 5
(
ûû5 6
)
ûû6 7
;
ûû7 8
result
üü 
.
üü 
AppendFormat
üü '
(
üü' (
$str
üü( .
,
üü. /
parts
üü0 5
[
üü5 6
i
üü6 7
]
üü7 8
)
üü8 9
;
üü9 :
}
†† 
}
°° 
return
¢¢ 
result
¢¢ 
.
¢¢ 
ToString
¢¢ "
(
¢¢" #
)
¢¢# $
.
¢¢$ %
Trim
¢¢% )
(
¢¢) *
)
¢¢* +
;
¢¢+ ,
}
££ 	
public
•• 
static
•• 
string
•• 
	TrimForDB
•• &
(
••& '
this
••' +
string
••, 2
text
••3 7
,
••7 8
int
••9 <
length
••= C
,
••C D
bool
••E I
trimWhiteSpace
••J X
=
••Y Z
true
••[ _
)
••_ `
{
¶¶ 	
string
ßß 
result
ßß 
=
ßß 
(
ßß 
trimWhiteSpace
ßß +
)
ßß+ ,
?
ßß- .
text
ßß/ 3
.
ßß3 4
Trim
ßß4 8
(
ßß8 9
)
ßß9 :
:
ßß; <
text
ßß= A
;
ßßA B
if
®® 
(
®® 
result
®® 
.
®® 
Length
®® 
>
®® 
length
®®  &
)
®®& '
{
©© 
result
™™ 
=
™™ 
result
™™ 
.
™™  
	Substring
™™  )
(
™™) *
$num
™™* +
,
™™+ ,
length
™™- 3
)
™™3 4
;
™™4 5
}
´´ 
return
¨¨ 
result
¨¨ 
;
¨¨ 
}
≠≠ 	
public
ØØ 
static
ØØ 
List
ØØ 
<
ØØ 
string
ØØ !
>
ØØ! "
IdentifyPattern
ØØ# 2
(
ØØ2 3
this
ØØ3 7
string
ØØ8 >
text
ØØ? C
)
ØØC D
{
∞∞ 	
List
±± 
<
±± 
string
±± 
>
±± 
patternList
±± $
=
±±% &
new
±±' *
List
±±+ /
<
±±/ 0
string
±±0 6
>
±±6 7
(
±±7 8
)
±±8 9
;
±±9 :
foreach
≤≤ 
(
≤≤ 
char
≤≤ 
ch
≤≤ 
in
≤≤ 
text
≤≤  $
)
≤≤$ %
{
≥≥ 
if
¥¥ 
(
¥¥ 
patternList
¥¥ 
.
¥¥  
Count
¥¥  %
==
¥¥& (
$num
¥¥) *
||
¥¥+ -
!
¥¥. /
patternList
¥¥/ :
.
¥¥: ;
Last
¥¥; ?
(
¥¥? @
)
¥¥@ A
.
¥¥A B
Contains
¥¥B J
(
¥¥J K
ch
¥¥K M
)
¥¥M N
)
¥¥N O
{
µµ 
patternList
∂∂ 
.
∂∂  
Add
∂∂  #
(
∂∂# $
ch
∂∂$ &
.
∂∂& '
ToString
∂∂' /
(
∂∂/ 0
)
∂∂0 1
)
∂∂1 2
;
∂∂2 3
}
∑∑ 
else
∏∏ 
{
ππ 
patternList
∫∫ 
[
∫∫  
patternList
∫∫  +
.
∫∫+ ,
Count
∫∫, 1
-
∫∫2 3
$num
∫∫4 5
]
∫∫5 6
+=
∫∫7 9
ch
∫∫: <
.
∫∫< =
ToString
∫∫= E
(
∫∫E F
)
∫∫F G
;
∫∫G H
}
ªª 
}
ºº 
return
ΩΩ 
patternList
ΩΩ 
;
ΩΩ 
}
ææ 	
public
¿¿ 
static
¿¿ 
bool
¿¿ )
StartsWithSingleDoubleQuote
¿¿ 6
(
¿¿6 7
this
¿¿7 ;
string
¿¿< B
text
¿¿C G
)
¿¿G H
{
¡¡ 	
bool
¬¬ 
result
¬¬ 
=
¬¬ 
false
¬¬ 
;
¬¬  
switch
√√ 
(
√√ 
text
√√ 
.
√√ 
Length
√√ 
)
√√  
{
ƒƒ 
case
≈≈ 
$num
≈≈ 
:
≈≈ 
result
≈≈ 
=
≈≈  
false
≈≈! &
;
≈≈& '
break
≈≈( -
;
≈≈- .
case
∆∆ 
$num
∆∆ 
:
∆∆ 
case
«« 
$num
«« 
:
«« 
case
»» 
$num
»» 
:
»» 
result
»» 
=
»»  
(
»»! "
text
»»" &
[
»»& '
$num
»»' (
]
»»( )
==
»»* ,
$char
»»- 0
)
»»0 1
;
»»1 2
break
»»3 8
;
»»8 9
default
…… 
:
…… 
result
…… 
=
……  !
(
……" #
text
……# '
.
……' (

StartsWith
……( 2
(
……2 3
$str
……3 7
)
……7 8
&&
……9 ;
text
……< @
[
……@ A
$num
……A B
]
……B C
!=
……D F
$char
……G J
)
……J K
;
……K L
break
……M R
;
……R S
}
   
return
ÀÀ 
result
ÀÀ 
;
ÀÀ 
}
ÃÃ 	
public
ŒŒ 
static
ŒŒ 
bool
ŒŒ '
EndsWithSingleDoubleQuote
ŒŒ 4
(
ŒŒ4 5
this
ŒŒ5 9
string
ŒŒ: @
text
ŒŒA E
)
ŒŒE F
{
œœ 	
bool
–– 
result
–– 
=
–– 
false
–– 
;
––  
switch
—— 
(
—— 
text
—— 
.
—— 
Length
—— 
)
——  
{
““ 
case
”” 
$num
”” 
:
”” 
case
‘‘ 
$num
‘‘ 
:
‘‘ 
case
’’ 
$num
’’ 
:
’’ 
case
÷÷ 
$num
÷÷ 
:
÷÷ 
result
÷÷ 
=
÷÷  
false
÷÷! &
;
÷÷& '
break
÷÷( -
;
÷÷- .
default
◊◊ 
:
◊◊ 
result
◊◊ 
=
◊◊  !
(
◊◊" #
text
◊◊# '
.
◊◊' (
EndsWith
◊◊( 0
(
◊◊0 1
$str
◊◊1 5
)
◊◊5 6
&&
◊◊7 9
text
◊◊: >
[
◊◊> ?
text
◊◊? C
.
◊◊C D
Length
◊◊D J
-
◊◊K L
$num
◊◊M N
]
◊◊N O
!=
◊◊P R
$char
◊◊S V
)
◊◊V W
;
◊◊W X
break
◊◊Y ^
;
◊◊^ _
}
ÿÿ 
return
ŸŸ 
result
ŸŸ 
;
ŸŸ 
}
⁄⁄ 	
public
€€ 
static
€€ 
string
€€ 
TrimAll
€€ $
(
€€$ %
this
€€% )
string
€€* 0
text
€€1 5
,
€€5 6
char
€€7 ;
ch
€€< >
)
€€> ?
{
‹‹ 	
return
›› 
text
›› 
.
›› 
TrimAll
›› 
(
››  
new
››  #
char
››$ (
[
››( )
]
››) *
{
››+ ,
ch
››- /
}
››0 1
)
››1 2
;
››2 3
}
ﬁﬁ 	
public
ﬂﬂ 
static
ﬂﬂ 
string
ﬂﬂ 
TrimAll
ﬂﬂ $
(
ﬂﬂ$ %
this
ﬂﬂ% )
string
ﬂﬂ* 0
text
ﬂﬂ1 5
,
ﬂﬂ5 6
char
ﬂﬂ7 ;
[
ﬂﬂ; <
]
ﬂﬂ< =
	charArray
ﬂﬂ> G
)
ﬂﬂG H
{
‡‡ 	
string
·· 
result
·· 
=
·· 
text
··  
.
··  !
Trim
··! %
(
··% &
)
··& '
;
··' (
int
‚‚ 
index
‚‚ 
=
‚‚ 
-
‚‚ 
$num
‚‚ 
;
‚‚ 
do
„„ 
{
‰‰ 
index
ÂÂ 
++
ÂÂ 
;
ÂÂ 
result
ÊÊ 
=
ÊÊ 
result
ÊÊ 
.
ÊÊ  
Replace
ÊÊ  '
(
ÊÊ' (
	charArray
ÊÊ( 1
[
ÊÊ1 2
index
ÊÊ2 7
]
ÊÊ7 8
.
ÊÊ8 9
ToString
ÊÊ9 A
(
ÊÊA B
)
ÊÊB C
,
ÊÊC D
$str
ÊÊE G
)
ÊÊG H
;
ÊÊH I
}
ÁÁ 
while
ÁÁ 
(
ÁÁ 
!
ÁÁ 
string
ÁÁ 
.
ÁÁ 
IsNullOrEmpty
ÁÁ *
(
ÁÁ* +
result
ÁÁ+ 1
)
ÁÁ1 2
&&
ÁÁ3 5
index
ÁÁ6 ;
<
ÁÁ< =
	charArray
ÁÁ> G
.
ÁÁG H
Length
ÁÁH N
-
ÁÁO P
$num
ÁÁQ R
&&
ÁÁS U
result
ÁÁV \
.
ÁÁ\ ]
Contains
ÁÁ] e
(
ÁÁe f
	charArray
ÁÁf o
[
ÁÁo p
index
ÁÁp u
]
ÁÁu v
)
ÁÁv w
)
ÁÁw x
;
ÁÁx y
return
ËË 
result
ËË 
;
ËË 
}
ÈÈ 	
public
ÎÎ 
static
ÎÎ 
bool
ÎÎ 
EscapedWithQuotes
ÎÎ ,
(
ÎÎ, -
this
ÎÎ- 1
string
ÎÎ2 8
text
ÎÎ9 =
)
ÎÎ= >
{
ÏÏ 	
bool
ÌÌ 
result
ÌÌ 
=
ÌÌ 
(
ÌÌ 
text
ÌÌ 
.
ÌÌ  )
StartsWithSingleDoubleQuote
ÌÌ  ;
(
ÌÌ; <
)
ÌÌ< =
&&
ÌÌ> @
text
ÌÌA E
.
ÌÌE F'
EndsWithSingleDoubleQuote
ÌÌF _
(
ÌÌ_ `
)
ÌÌ` a
)
ÌÌa b
;
ÌÌb c
return
ÓÓ 
result
ÓÓ 
;
ÓÓ 
}
ÔÔ 	
public
ÒÒ 
static
ÒÒ #
MailAddressCollection
ÒÒ +
ToAddresses
ÒÒ, 7
(
ÒÒ7 8
this
ÒÒ8 <
string
ÒÒ= C
text
ÒÒD H
)
ÒÒH I
{
ÚÚ 	
string
ÛÛ 
[
ÛÛ 
]
ÛÛ 
parts
ÛÛ 
=
ÛÛ 
text
ÛÛ !
.
ÛÛ! "
Split
ÛÛ" '
(
ÛÛ' (
$char
ÛÛ( +
)
ÛÛ+ ,
;
ÛÛ, -#
MailAddressCollection
ÙÙ !
list
ÙÙ" &
=
ÙÙ' (
new
ÙÙ) ,#
MailAddressCollection
ÙÙ- B
(
ÙÙB C
)
ÙÙC D
;
ÙÙD E
foreach
ıı 
(
ıı 
string
ıı 
part
ıı  
in
ıı! #
parts
ıı$ )
)
ıı) *
{
ˆˆ 
list
˜˜ 
.
˜˜ 
Add
˜˜ 
(
˜˜ 
new
˜˜ 
MailAddress
˜˜ (
(
˜˜( )
part
˜˜) -
)
˜˜- .
)
˜˜. /
;
˜˜/ 0
}
¯¯ 
return
˘˘ 
list
˘˘ 
;
˘˘ 
}
˙˙ 	
public
¸¸ 
static
¸¸ 
string
¸¸ 
Reverse
¸¸ $
(
¸¸$ %
this
¸¸% )
string
¸¸* 0
text
¸¸1 5
)
¸¸5 6
{
˝˝ 	
if
˛˛ 
(
˛˛ 
text
˛˛ 
.
˛˛ 
Length
˛˛ 
>
˛˛ 
$num
˛˛ 
)
˛˛  
{
ˇˇ 
int
ÄÄ 
pivotPos
ÄÄ 
=
ÄÄ 
text
ÄÄ #
.
ÄÄ# $
Length
ÄÄ$ *
/
ÄÄ+ ,
$num
ÄÄ- .
;
ÄÄ. /
for
ÅÅ 
(
ÅÅ 
int
ÅÅ 
i
ÅÅ 
=
ÅÅ 
$num
ÅÅ 
;
ÅÅ 
i
ÅÅ  !
<
ÅÅ" #
pivotPos
ÅÅ$ ,
;
ÅÅ, -
i
ÅÅ. /
++
ÅÅ/ 1
)
ÅÅ1 2
{
ÇÇ 
text
ÉÉ 
=
ÉÉ 
text
ÉÉ 
.
ÉÉ  
Insert
ÉÉ  &
(
ÉÉ& '
text
ÉÉ' +
.
ÉÉ+ ,
Length
ÉÉ, 2
-
ÉÉ3 4
i
ÉÉ5 6
,
ÉÉ6 7
text
ÉÉ8 <
.
ÉÉ< =
	Substring
ÉÉ= F
(
ÉÉF G
i
ÉÉG H
,
ÉÉH I
$num
ÉÉJ K
)
ÉÉK L
)
ÉÉL M
.
ÉÉM N
Remove
ÉÉN T
(
ÉÉT U
i
ÉÉU V
,
ÉÉV W
$num
ÉÉX Y
)
ÉÉY Z
;
ÉÉZ [
text
ÑÑ 
=
ÑÑ 
text
ÑÑ 
.
ÑÑ  
Insert
ÑÑ  &
(
ÑÑ& '
i
ÑÑ' (
,
ÑÑ( )
text
ÑÑ* .
.
ÑÑ. /
	Substring
ÑÑ/ 8
(
ÑÑ8 9
text
ÑÑ9 =
.
ÑÑ= >
Length
ÑÑ> D
-
ÑÑE F
(
ÑÑG H
i
ÑÑH I
+
ÑÑJ K
$num
ÑÑL M
)
ÑÑM N
,
ÑÑN O
$num
ÑÑP Q
)
ÑÑQ R
)
ÑÑR S
.
ÑÑS T
Remove
ÑÑT Z
(
ÑÑZ [
text
ÑÑ[ _
.
ÑÑ_ `
Length
ÑÑ` f
-
ÑÑg h
(
ÑÑi j
i
ÑÑj k
+
ÑÑl m
$num
ÑÑn o
)
ÑÑo p
,
ÑÑp q
$num
ÑÑr s
)
ÑÑs t
;
ÑÑt u
}
ÖÖ 
}
ÜÜ 
return
áá 
text
áá 
;
áá 
}
àà 	
public
ää 
static
ää 
string
ää 
GetNumberPostfix
ää -
(
ää- .
int
ää. 1
number
ää2 8
)
ää8 9
{
ãã 	
string
åå 
result
åå 
=
åå 
$str
åå 
;
åå 
int
çç 
num
çç 
=
çç 
number
çç 
;
çç 
if
éé 
(
éé 
num
éé 
>=
éé 
$num
éé 
)
éé 
{
èè 
switch
êê 
(
êê 
num
êê 
%
êê 
$num
êê !
)
êê! "
{
ëë 
case
íí 
$num
íí 
:
íí 
case
ìì 
$num
ìì 
:
ìì 
case
îî 
$num
îî 
:
îî 
num
îî  
=
îî! "
$num
îî# $
;
îî$ %
break
îî& +
;
îî+ ,
}
ïï 
switch
ññ 
(
ññ 
num
ññ 
%
ññ 
$num
ññ  
)
ññ  !
{
óó 
case
òò 
$num
òò 
:
òò 
result
òò "
=
òò# $
$str
òò% )
;
òò) *
break
òò+ 0
;
òò0 1
case
ôô 
$num
ôô 
:
ôô 
result
ôô "
=
ôô# $
$str
ôô% )
;
ôô) *
break
ôô+ 0
;
ôô0 1
case
öö 
$num
öö 
:
öö 
result
öö "
=
öö# $
$str
öö% )
;
öö) *
break
öö+ 0
;
öö0 1
default
õõ 
:
õõ 
result
õõ #
=
õõ$ %
$str
õõ& *
;
õõ* +
break
õõ, 1
;
õõ1 2
}
úú 
}
ùù 
return
ûû 
result
ûû 
;
ûû 
}
üü 	
public
°° 
static
°° 
string
°° 

ReplaceAll
°° '
(
°°' (
this
°°( ,
string
°°- 3
text
°°4 8
,
°°8 9
string
°°: @
oldchars
°°A I
,
°°I J
string
°°K Q
newchars
°°R Z
)
°°Z [
{
¢¢ 	
string
££ 
newText
££ 
=
££ 
text
££ !
;
££! "
do
§§ 
{
•• 
newText
¶¶ 
=
¶¶ 
newText
¶¶ !
.
¶¶! "
Replace
¶¶" )
(
¶¶) *
oldchars
¶¶* 2
,
¶¶2 3
newchars
¶¶4 <
)
¶¶< =
;
¶¶= >
}
ßß 
while
ßß 
(
ßß 
newText
ßß 
.
ßß 
Contains
ßß %
(
ßß% &
oldchars
ßß& .
)
ßß. /
)
ßß/ 0
;
ßß0 1
return
®® 
newText
®® 
;
®® 
}
©© 	
public
´´ 
static
´´ 
string
´´ $
ReplaceNonAlphaNumeric
´´ 3
(
´´3 4
this
´´4 8
string
´´9 ?
text
´´@ D
,
´´D E
char
´´F J
newChar
´´K R
)
´´R S
{
¨¨ 	
StringBuilder
≠≠ 
newText
≠≠ !
=
≠≠" #
new
≠≠$ '
StringBuilder
≠≠( 5
(
≠≠5 6
text
≠≠6 :
)
≠≠: ;
;
≠≠; <
for
ÆÆ 
(
ÆÆ 
int
ÆÆ 
i
ÆÆ 
=
ÆÆ 
$num
ÆÆ 
;
ÆÆ 
i
ÆÆ 
<
ÆÆ 
newText
ÆÆ  '
.
ÆÆ' (
Length
ÆÆ( .
;
ÆÆ. /
i
ÆÆ0 1
++
ÆÆ1 3
)
ÆÆ3 4
{
ØØ 
if
∞∞ 
(
∞∞ 
!
∞∞ 
newText
∞∞ 
[
∞∞ 
i
∞∞ 
]
∞∞ 
.
∞∞  
IsAsciiNumeric
∞∞  .
(
∞∞. /
)
∞∞/ 0
&&
∞∞1 3
!
∞∞4 5
newText
∞∞5 <
[
∞∞< =
i
∞∞= >
]
∞∞> ?
.
∞∞? @
IsAsciiAlpha
∞∞@ L
(
∞∞L M
)
∞∞M N
)
∞∞N O
{
±± 
newText
≤≤ 
[
≤≤ 
i
≤≤ 
]
≤≤ 
=
≤≤  
newChar
≤≤! (
;
≤≤( )
}
≥≥ 
}
¥¥ 
return
µµ 
newText
µµ 
.
µµ 
ToString
µµ #
(
µµ# $
)
µµ$ %
;
µµ% &
}
∂∂ 	
public
∏∏ 
static
∏∏ 
string
∏∏ $
ReplaceNonAlphaNumeric
∏∏ 3
(
∏∏3 4
this
∏∏4 8
string
∏∏9 ?
text
∏∏@ D
,
∏∏D E
string
∏∏F L
newChars
∏∏M U
)
∏∏U V
{
ππ 	
string
∫∫ 
newText
∫∫ 
=
∫∫ 
text
∫∫ !
;
∫∫! "
for
ªª 
(
ªª 
int
ªª 
i
ªª 
=
ªª 
$num
ªª 
;
ªª 
i
ªª 
<
ªª 
newText
ªª  '
.
ªª' (
Length
ªª( .
;
ªª. /
i
ªª0 1
++
ªª1 3
)
ªª3 4
{
ºº 
if
ΩΩ 
(
ΩΩ 
!
ΩΩ 
newText
ΩΩ 
[
ΩΩ 
i
ΩΩ 
]
ΩΩ 
.
ΩΩ  
IsAsciiNumeric
ΩΩ  .
(
ΩΩ. /
)
ΩΩ/ 0
&&
ΩΩ1 3
!
ΩΩ4 5
newText
ΩΩ5 <
[
ΩΩ< =
i
ΩΩ= >
]
ΩΩ> ?
.
ΩΩ? @
IsAsciiAlpha
ΩΩ@ L
(
ΩΩL M
)
ΩΩM N
)
ΩΩN O
{
ææ 
newText
øø 
=
øø 
newText
øø %
.
øø% &
Replace
øø& -
(
øø- .
new
øø. 1
String
øø2 8
(
øø8 9
newText
øø9 @
[
øø@ A
i
øøA B
]
øøB C
,
øøC D
$num
øøE F
)
øøF G
,
øøG H
newChars
øøI Q
)
øøQ R
;
øøR S
}
¿¿ 
}
¡¡ 
return
¬¬ 
newText
¬¬ 
.
¬¬ 
ToString
¬¬ #
(
¬¬# $
)
¬¬$ %
;
¬¬% &
}
√√ 	
public
≈≈ 
static
≈≈ 
string
≈≈ 
Replace
≈≈ $
(
≈≈$ %
this
≈≈% )
string
≈≈* 0
text
≈≈1 5
,
≈≈5 6
string
≈≈7 =
oldChars
≈≈> F
,
≈≈F G
char
≈≈H L
newChar
≈≈M T
)
≈≈T U
{
∆∆ 	
string
«« 
newText
«« 
=
«« 
text
«« !
.
««! "
Replace
««" )
(
««) *
oldChars
««* 2
,
««2 3
new
««4 7
String
««8 >
(
««> ?
newChar
««? F
,
««F G
$num
««H I
)
««I J
)
««J K
;
««K L
return
»» 
newText
»» 
;
»» 
}
…… 	
public
ÀÀ 
static
ÀÀ 
string
ÀÀ 
Replace
ÀÀ $
(
ÀÀ$ %
this
ÀÀ% )
string
ÀÀ* 0
text
ÀÀ1 5
,
ÀÀ5 6
char
ÀÀ7 ;
oldChar
ÀÀ< C
,
ÀÀC D
string
ÀÀE K
newChars
ÀÀL T
)
ÀÀT U
{
ÃÃ 	
string
ÕÕ 
newText
ÕÕ 
=
ÕÕ 
text
ÕÕ !
.
ÕÕ! "
Replace
ÕÕ" )
(
ÕÕ) *
new
ÕÕ* -
String
ÕÕ. 4
(
ÕÕ4 5
oldChar
ÕÕ5 <
,
ÕÕ< =
$num
ÕÕ> ?
)
ÕÕ? @
,
ÕÕ@ A
newChars
ÕÕB J
)
ÕÕJ K
;
ÕÕK L
return
ŒŒ 
newText
ŒŒ 
;
ŒŒ 
}
œœ 	
public
—— 
static
—— 
string
—— #
ParseConnectionString
—— 2
(
——2 3
this
——3 7
string
——8 >
text
——? C
,
——C D
string
——E K
key
——L O
)
——O P
{
““ 	
string
”” 
result
”” 
=
”” 
string
”” "
.
””" #
Empty
””# (
;
””( )
if
‘‘ 
(
‘‘ 
!
‘‘ 
string
‘‘ 
.
‘‘ 
IsNullOrEmpty
‘‘ %
(
‘‘% &
text
‘‘& *
)
‘‘* +
)
‘‘+ ,
{
’’ 
string
÷÷ 
[
÷÷ 
]
÷÷ 
parts
÷÷ 
=
÷÷  
text
÷÷! %
.
÷÷% &
Split
÷÷& +
(
÷÷+ ,
$char
÷÷, /
)
÷÷/ 0
;
÷÷0 1
string
◊◊ 
	component
◊◊  
=
◊◊! "
string
◊◊# )
.
◊◊) *
Empty
◊◊* /
;
◊◊/ 0
if
ÿÿ 
(
ÿÿ 
key
ÿÿ 
.
ÿÿ 
IsLike
ÿÿ 
(
ÿÿ 
$str
ÿÿ )
)
ÿÿ) *
||
ÿÿ+ -
key
ÿÿ. 1
.
ÿÿ1 2
IsLike
ÿÿ2 8
(
ÿÿ8 9
$str
ÿÿ9 K
)
ÿÿK L
)
ÿÿL M
{
ŸŸ 
	component
⁄⁄ 
=
⁄⁄ 
parts
⁄⁄  %
.
⁄⁄% &
FirstOrDefault
⁄⁄& 4
(
⁄⁄4 5
x
⁄⁄5 6
=>
⁄⁄7 9
x
⁄⁄: ;
.
⁄⁄; <
IsLike
⁄⁄< B
(
⁄⁄B C
$str
⁄⁄C O
)
⁄⁄O P
||
⁄⁄Q S
x
⁄⁄T U
.
⁄⁄U V
IsLike
⁄⁄V \
(
⁄⁄\ ]
$str
⁄⁄] q
)
⁄⁄q r
)
⁄⁄r s
;
⁄⁄s t
}
€€ 
else
‹‹ 
if
‹‹ 
(
‹‹ 
key
‹‹ 
.
‹‹ 
IsLike
‹‹ #
(
‹‹# $
$str
‹‹$ ,
)
‹‹, -
||
‹‹. 0
key
‹‹1 4
.
‹‹4 5
IsLike
‹‹5 ;
(
‹‹; <
$str
‹‹< I
)
‹‹I J
)
‹‹J K
{
›› 
	component
ﬁﬁ 
=
ﬁﬁ 
parts
ﬁﬁ  %
.
ﬁﬁ% &
FirstOrDefault
ﬁﬁ& 4
(
ﬁﬁ4 5
x
ﬁﬁ5 6
=>
ﬁﬁ7 9
x
ﬁﬁ: ;
.
ﬁﬁ; <
IsLike
ﬁﬁ< B
(
ﬁﬁB C
$str
ﬁﬁC M
)
ﬁﬁM N
||
ﬁﬁO Q
x
ﬁﬁR S
.
ﬁﬁS T
IsLike
ﬁﬁT Z
(
ﬁﬁZ [
$str
ﬁﬁ[ k
)
ﬁﬁk l
)
ﬁﬁl m
;
ﬁﬁm n
}
ﬂﬂ 
else
‡‡ 
{
·· 
	component
‚‚ 
=
‚‚ 
parts
‚‚  %
.
‚‚% &
FirstOrDefault
‚‚& 4
(
‚‚4 5
x
‚‚5 6
=>
‚‚7 9
x
‚‚: ;
.
‚‚; <
IsLike
‚‚< B
(
‚‚B C
key
‚‚C F
)
‚‚F G
)
‚‚G H
;
‚‚H I
}
„„ 
if
ÂÂ 
(
ÂÂ 
!
ÂÂ 
string
ÂÂ 
.
ÂÂ 
IsNullOrEmpty
ÂÂ )
(
ÂÂ) *
	component
ÂÂ* 3
)
ÂÂ3 4
)
ÂÂ4 5
{
ÊÊ 
string
ÁÁ 
[
ÁÁ 
]
ÁÁ 
subparts
ÁÁ %
=
ÁÁ& '
	component
ÁÁ( 1
.
ÁÁ1 2
Split
ÁÁ2 7
(
ÁÁ7 8
$char
ÁÁ8 ;
)
ÁÁ; <
;
ÁÁ< =
if
ËË 
(
ËË 
subparts
ËË  
.
ËË  !
Length
ËË! '
==
ËË( *
$num
ËË+ ,
)
ËË, -
{
ÈÈ 
result
ÍÍ 
=
ÍÍ  
subparts
ÍÍ! )
[
ÍÍ) *
$num
ÍÍ* +
]
ÍÍ+ ,
.
ÍÍ, -
Trim
ÍÍ- 1
(
ÍÍ1 2
)
ÍÍ2 3
;
ÍÍ3 4
}
ÎÎ 
}
ÏÏ 
}
ÌÌ 
return
ÓÓ 
result
ÓÓ 
;
ÓÓ 
}
ÔÔ 	
public
ÒÒ 
static
ÒÒ 
string
ÒÒ %
ParseConnectionStringEx
ÒÒ 4
(
ÒÒ4 5
this
ÒÒ5 9
string
ÒÒ: @
text
ÒÒA E
,
ÒÒE F
string
ÒÒG M
key
ÒÒN Q
)
ÒÒQ R
{
ÚÚ 	
string
ÛÛ 
result
ÛÛ 
=
ÛÛ 
string
ÛÛ "
.
ÛÛ" #
Empty
ÛÛ# (
;
ÛÛ( )
if
ÙÙ 
(
ÙÙ 
!
ÙÙ 
string
ÙÙ 
.
ÙÙ 
IsNullOrEmpty
ÙÙ %
(
ÙÙ% &
text
ÙÙ& *
)
ÙÙ* +
&&
ÙÙ, .
(
ÙÙ/ 0
key
ÙÙ0 3
.
ÙÙ3 4
IsLike
ÙÙ4 :
(
ÙÙ: ;
$str
ÙÙ; C
)
ÙÙC D
||
ÙÙE G
key
ÙÙH K
.
ÙÙK L
IsLike
ÙÙL R
(
ÙÙR S
$str
ÙÙS ]
)
ÙÙ] ^
)
ÙÙ^ _
)
ÙÙ_ `
{
ıı 
string
ˆˆ 
[
ˆˆ 
]
ˆˆ 
parts
ˆˆ 
=
ˆˆ  
text
ˆˆ! %
.
ˆˆ% &
Split
ˆˆ& +
(
ˆˆ+ ,
$char
ˆˆ, /
)
ˆˆ/ 0
;
ˆˆ0 1
string
¯¯ 
	component
¯¯  
=
¯¯! "
parts
¯¯# (
.
¯¯( )
FirstOrDefault
¯¯) 7
(
¯¯7 8
x
¯¯8 9
=>
¯¯: <
x
¯¯= >
.
¯¯> ?
IsLike
¯¯? E
(
¯¯E F
$str
¯¯F P
)
¯¯P Q
||
¯¯R T
x
¯¯U V
.
¯¯V W
IsLike
¯¯W ]
(
¯¯] ^
$str
¯¯^ m
)
¯¯m n
)
¯¯n o
;
¯¯o p
if
˙˙ 
(
˙˙ 
!
˙˙ 
string
˙˙ 
.
˙˙ 
IsNullOrEmpty
˙˙ )
(
˙˙) *
	component
˙˙* 3
)
˙˙3 4
)
˙˙4 5
{
˚˚ 
string
¸¸ 
[
¸¸ 
]
¸¸ 
subparts
¸¸ %
=
¸¸& '
	component
¸¸( 1
.
¸¸1 2
Split
¸¸2 7
(
¸¸7 8
$char
¸¸8 ;
)
¸¸; <
;
¸¸< =
if
˝˝ 
(
˝˝ 
subparts
˝˝  
.
˝˝  !
Length
˝˝! '
==
˝˝( *
$num
˝˝+ ,
)
˝˝, -
{
˛˛ 
result
ˇˇ 
=
ˇˇ  
subparts
ˇˇ! )
[
ˇˇ) *
$num
ˇˇ* +
]
ˇˇ+ ,
.
ˇˇ, -
Trim
ˇˇ- 1
(
ˇˇ1 2
)
ˇˇ2 3
;
ˇˇ3 4
int
ÄÄ 
slashPos
ÄÄ $
=
ÄÄ% &
result
ÄÄ' -
.
ÄÄ- .
IndexOf
ÄÄ. 5
(
ÄÄ5 6
$str
ÄÄ6 :
)
ÄÄ: ;
;
ÄÄ; <
result
ÅÅ 
=
ÅÅ  
key
ÅÅ! $
.
ÅÅ$ %
IsLike
ÅÅ% +
(
ÅÅ+ ,
$str
ÅÅ, 4
)
ÅÅ4 5
?
ÅÅ6 7
result
ÅÅ8 >
.
ÅÅ> ?
	Substring
ÅÅ? H
(
ÅÅH I
$num
ÅÅI J
,
ÅÅJ K
slashPos
ÅÅL T
)
ÅÅT U
:
ÅÅV W
result
ÅÅX ^
.
ÅÅ^ _
	Substring
ÅÅ_ h
(
ÅÅh i
slashPos
ÅÅi q
+
ÅÅr s
$num
ÅÅt u
)
ÅÅu v
;
ÅÅv w
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 
return
ÖÖ 
result
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
}
áá 
}àà À
dD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\ObjectExtensions\ExtendTask.cs
	namespace 	

SQLXCommon
 
. 
ObjectExtensions %
{		 
public

 
static

 
class

 

ExtendTask

 
{ 
} 
} Ï
hD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\ObjectExtensions\ExtendTimeSpan.cs
	namespace 	
ObjectExtensions
 
{ 
public		 
static		 
class		 
ExtendTimeSpan		 #
{

 
public 
static	 
TimeSpan 
AddHours !
(! "
this" &
TimeSpan' /
span0 4
,4 5
double6 <
hours= B
)B C
{ 
return 	
span
 
. 
Add 
( 
TimeSpan 
. 
	FromHours %
(% &
hours& +
)+ ,
), -
;- .
} 
public 
static	 
TimeSpan 

AddMinutes #
(# $
this$ (
TimeSpan) 1
span2 6
,6 7
double8 >
minutes? F
)F G
{ 
return 	
span
 
. 
Add 
( 
TimeSpan 
. 
FromMinutes '
(' (
minutes( /
)/ 0
)0 1
;1 2
} 
public 
static	 
TimeSpan 

AddSeconds #
(# $
this$ (
TimeSpan) 1
span2 6
,6 7
double8 >
seconds? F
)F G
{ 
return 	
span
 
. 
Add 
( 
TimeSpan 
. 
FromSeconds '
(' (
seconds( /
)/ 0
)0 1
;1 2
} 
public 
static	 
TimeSpan 
AddMilliseconds (
(( )
this) -
TimeSpan. 6
span7 ;
,; <
double= C
millisecondsD P
)P Q
{ 
return 	
span
 
. 
Add 
( 
TimeSpan 
. 
FromMilliseconds ,
(, -
milliseconds- 9
)9 :
): ;
;; <
} 
public 
static	 
TimeSpan 
AddHours !
(! "
this" &
TimeSpan' /
span0 4
,4 5
int6 9
hours: ?
)? @
{   
return!! 	
span!!
 
.!! 
AddHours!! 
(!! 
(!! 
double!! 
)!!  
hours!!  %
)!!% &
;!!& '
}"" 
public$$ 
static$$	 
TimeSpan$$ 

AddMinutes$$ #
($$# $
this$$$ (
TimeSpan$$) 1
span$$2 6
,$$6 7
int$$8 ;
minutes$$< C
)$$C D
{%% 
return&& 	
span&&
 
.&& 

AddMinutes&& 
(&& 
(&& 
double&& !
)&&! "
minutes&&" )
)&&) *
;&&* +
}'' 
public)) 
static))	 
TimeSpan)) 

AddSeconds)) #
())# $
this))$ (
TimeSpan))) 1
span))2 6
,))6 7
int))8 ;
seconds))< C
)))C D
{** 
return++ 	
span++
 
.++ 

AddSeconds++ 
(++ 
(++ 
double++ !
)++! "
seconds++" )
)++) *
;++* +
},, 
public.. 
static..	 
TimeSpan.. 
AddMilliseconds.. (
(..( )
this..) -
TimeSpan... 6
span..7 ;
,..; <
int..= @
milliseconds..A M
)..M N
{// 
return00 	
span00
 
.00 
AddMilliseconds00 
(00 
(00  
double00  &
)00& '
milliseconds00' 3
)003 4
;004 5
}11 
}22 
}33 Ñ∏
eD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\ObjectExtensions\ExtendTypes.cs
	namespace 	
ObjectExtensions
 
{		 
public

 

enum

 
TypeChecker

 
{ 
String 
, 
StringBuilder 
, 
	AnyString 
, 
DateTime 
, 
DateTimeOffset 
, 
AnyDateTime 
, 
Byte 
, 
UInt 
, 
UShort 
, 
ULong 
, 
AnyUnsignedInt 
, 

SignedByte 
, 
Int 
, 
Short 
, 
Long 
, 
AnySignedInt 
, 

AnyInteger   
,   
Float"" 
,"" 
Double## 
,## 
AnyFloat$$ 
,$$ 
Decimal&& 
,&& 
Numeric'' 
,'' 
	Specified)) 
,)) 
AnyType** 
}++ 
;++ 
public-- 

static-- 
class-- 
ExtendTypes-- #
{.. 
public// 
static// 
bool// 
IsByte// !
(//! "
this//" &
Type//' +
type//, 0
)//0 1
{00 	
return11 
(11 
type11 
==11 
typeof11 "
(11" #
byte11# '
)11' (
)11( )
;11) *
}22 	
public44 
static44 
bool44 
IsUInt44 !
(44! "
this44" &
Type44' +
type44, 0
)440 1
{55 	
return66 
(66 
type66 
==66 
typeof66 "
(66" #
uint66# '
)66' (
)66( )
;66) *
}77 	
public99 
static99 
bool99 
IsUShort99 #
(99# $
this99$ (
Type99) -
type99. 2
)992 3
{:: 	
return;; 
(;; 
type;; 
==;; 
typeof;; "
(;;" #
ushort;;# )
);;) *
);;* +
;;;+ ,
}<< 	
public>> 
static>> 
bool>> 
IsULong>> "
(>>" #
this>># '
Type>>( ,
type>>- 1
)>>1 2
{?? 	
return@@ 
(@@ 
type@@ 
==@@ 
typeof@@ "
(@@" #
ulong@@# (
)@@( )
)@@) *
;@@* +
}AA 	
publicCC 
staticCC 
boolCC  
IsAnyUnsignedIntegerCC /
(CC/ 0
thisCC0 4
TypeCC5 9
typeCC: >
)CC> ?
{DD 	
returnEE 
(EE 
typeEE 
.EE 
IsByteEE 
(EE  
)EE  !
||EE" $
typeFF 
.FF 
IsUIntFF 
(FF  
)FF  !
||FF" $
typeGG 
.GG 
IsUShortGG !
(GG! "
)GG" #
||GG$ &
typeHH 
.HH 
IsULongHH  
(HH  !
)HH! "
)HH" #
;HH# $
}II 	
publicKK 
staticKK 
boolKK 
IsSignedByteKK '
(KK' (
thisKK( ,
TypeKK- 1
typeKK2 6
)KK6 7
{LL 	
returnMM 
(MM 
typeMM 
==MM 
typeofMM "
(MM" #
sbyteMM# (
)MM( )
)MM) *
;MM* +
}NN 	
publicPP 
staticPP 
boolPP 
IsIntPP  
(PP  !
thisPP! %
TypePP& *
typePP+ /
)PP/ 0
{QQ 	
returnRR 
(RR 
typeRR 
==RR 
typeofRR "
(RR" #
intRR# &
)RR& '
)RR' (
;RR( )
}SS 	
publicUU 
staticUU 
boolUU 
IsShortUU "
(UU" #
thisUU# '
TypeUU( ,
typeUU- 1
)UU1 2
{VV 	
returnWW 
(WW 
typeWW 
==WW 
typeofWW "
(WW" #
shortWW# (
)WW( )
)WW) *
;WW* +
}XX 	
publicZZ 
staticZZ 
boolZZ 
IsLongZZ !
(ZZ! "
thisZZ" &
TypeZZ' +
typeZZ, 0
)ZZ0 1
{[[ 	
return\\ 
(\\ 
type\\ 
==\\ 
typeof\\ "
(\\" #
long\\# '
)\\' (
)\\( )
;\\) *
}]] 	
public__ 
static__ 
bool__ 
IsAnySignedInteger__ -
(__- .
this__. 2
Type__3 7
type__8 <
)__< =
{`` 	
returnaa 
(aa 
typeaa 
.aa 
IsSignedByteaa %
(aa% &
)aa& '
||aa( *
typebb 
.bb 
IsIntbb 
(bb 
)bb  
||bb! #
typecc 
.cc 
IsShortcc  
(cc  !
)cc! "
||cc# %
typedd 
.dd 
IsLongdd 
(dd  
)dd  !
)dd! "
;dd" #
}ee 	
publicgg 
staticgg 
boolgg 
IsAnyIntegergg '
(gg' (
thisgg( ,
Typegg- 1
typegg2 6
)gg6 7
{hh 	
returnii 
(ii 
typeii 
.ii  
IsAnyUnsignedIntegerii -
(ii- .
)ii. /
||ii0 2
typeii3 7
.ii7 8
IsAnySignedIntegerii8 J
(iiJ K
)iiK L
)iiL M
;iiM N
}jj 	
publicll 
staticll 
boolll 
IsFloatll "
(ll" #
thisll# '
Typell( ,
typell- 1
)ll1 2
{mm 	
returnnn 
(nn 
typenn 
==nn 
typeofnn "
(nn" #
floatnn# (
)nn( )
)nn) *
;nn* +
}oo 	
publicpp 
staticpp 
boolpp 
IsDoublepp #
(pp# $
thispp$ (
Typepp) -
typepp. 2
)pp2 3
{qq 	
returnrr 
(rr 
typerr 
==rr 
typeofrr "
(rr" #
doublerr# )
)rr) *
)rr* +
;rr+ ,
}ss 	
publictt 
statictt 
booltt 
IsAnyFloatingPointtt -
(tt- .
thistt. 2
Typett3 7
typett8 <
)tt< =
{uu 	
returnvv 
(vv 
typevv 
.vv 
IsFloatvv  
(vv  !
)vv! "
||vv# %
typevv& *
.vv* +
IsDoublevv+ 3
(vv3 4
)vv4 5
)vv5 6
;vv6 7
}ww 	
publicyy 
staticyy 
boolyy 
	IsIntegeryy $
(yy$ %
thisyy% )
Typeyy* .
typeyy/ 3
)yy3 4
{zz 	
return{{ 
({{ 
type{{ 
.{{  
IsAnyUnsignedInteger{{ -
({{- .
){{. /
||{{0 2
type{{3 7
.{{7 8
IsAnySignedInteger{{8 J
({{J K
){{K L
){{L M
;{{M N
}|| 	
public}} 
static}} 
bool}} 
	IsDecimal}} $
(}}$ %
this}}% )
Type}}* .
type}}/ 3
)}}3 4
{~~ 	
return 
( 
type 
== 
typeof "
(" #
decimal# *
)* +
)+ ,
;, -
}
ÄÄ 	
public
ÇÇ 
static
ÇÇ 
bool
ÇÇ 
	IsNumeric
ÇÇ $
(
ÇÇ$ %
this
ÇÇ% )
Type
ÇÇ* .
type
ÇÇ/ 3
)
ÇÇ3 4
{
ÉÉ 	
bool
ÑÑ 
result
ÑÑ 
=
ÑÑ 
(
ÑÑ 
type
ÑÑ 
.
ÑÑ  
	IsInteger
ÑÑ  )
(
ÑÑ) *
)
ÑÑ* +
||
ÑÑ, .
type
ÖÖ 
.
ÖÖ   
IsAnyFloatingPoint
ÖÖ  2
(
ÖÖ2 3
)
ÖÖ3 4
||
ÖÖ5 7
type
ÜÜ 
.
ÜÜ  
	IsDecimal
ÜÜ  )
(
ÜÜ) *
)
ÜÜ* +
)
ÜÜ+ ,
;
ÜÜ, -
return
áá 
result
áá 
;
áá 
}
àà 	
public
ää 
static
ää 
bool
ää 

IsDateTime
ää %
(
ää% &
this
ää& *
Type
ää+ /
type
ää0 4
)
ää4 5
{
ãã 	
bool
åå 
result
åå 
=
åå 
(
åå 
type
åå 
==
åå  "
typeof
åå# )
(
åå) *
DateTime
åå* 2
)
åå2 3
)
åå3 4
;
åå4 5
return
çç 
result
çç 
;
çç 
}
éé 	
public
èè 
static
èè 
bool
èè 
IsDateTimeOffset
èè +
(
èè+ ,
this
èè, 0
Type
èè1 5
type
èè6 :
)
èè: ;
{
êê 	
bool
ëë 
result
ëë 
=
ëë 
(
ëë 
type
ëë 
==
ëë  "
typeof
ëë# )
(
ëë) *
DateTimeOffset
ëë* 8
)
ëë8 9
)
ëë9 :
;
ëë: ;
return
íí 
result
íí 
;
íí 
}
ìì 	
public
ïï 
static
ïï 
bool
ïï 
IsAnyDateTime
ïï (
(
ïï( )
this
ïï) -
Type
ïï. 2
type
ïï3 7
)
ïï7 8
{
ññ 	
return
óó 
(
óó 
type
óó 
.
óó 

IsDateTime
óó #
(
óó# $
)
óó$ %
||
óó& (
type
óó) -
.
óó- .
IsDateTimeOffset
óó. >
(
óó> ?
)
óó? @
)
óó@ A
;
óóA B
}
òò 	
public
öö 
static
öö 
bool
öö 
IsStringBuilder
öö *
(
öö* +
this
öö+ /
Type
öö0 4
type
öö5 9
)
öö9 :
{
õõ 	
bool
úú 
result
úú 
=
úú 
(
úú 
type
úú 
==
úú  "
typeof
úú# )
(
úú) *
StringBuilder
úú* 7
)
úú7 8
)
úú8 9
;
úú9 :
return
ùù 
result
ùù 
;
ùù 
}
ûû 	
public
üü 
static
üü 
bool
üü 
IsString
üü #
(
üü# $
this
üü$ (
Type
üü) -
type
üü. 2
)
üü2 3
{
†† 	
bool
°° 
result
°° 
=
°° 
(
°° 
type
°° 
==
°°  "
typeof
°°# )
(
°°) *
string
°°* 0
)
°°0 1
)
°°1 2
;
°°2 3
return
¢¢ 
result
¢¢ 
;
¢¢ 
}
££ 	
public
§§ 
static
§§ 
bool
§§ 
IsAnyString
§§ &
(
§§& '
this
§§' +
Type
§§, 0
type
§§1 5
)
§§5 6
{
•• 	
bool
¶¶ 
result
¶¶ 
=
¶¶ 
(
¶¶ 
type
¶¶ 
.
¶¶  
IsStringBuilder
¶¶  /
(
¶¶/ 0
)
¶¶0 1
||
¶¶2 4
type
¶¶5 9
.
¶¶9 :
IsString
¶¶: B
(
¶¶B C
)
¶¶C D
)
¶¶D E
;
¶¶E F
return
ßß 
result
ßß 
;
ßß 
}
®® 	
public
™™ 
static
™™ 
PropertyInfo
™™ "
GetPropertyInfo
™™# 2
(
™™2 3
this
™™3 7
Type
™™8 <
type
™™= A
,
™™A B
string
™™C I
propertyName
™™J V
,
™™V W
TypeChecker
™™X c
typeChecker
™™d o
=
™™p q
TypeChecker
™™r }
.
™™} ~
AnyType™™~ Ö
,™™Ö Ü
Type™™á ã
specifiedType™™å ô
=™™ö õ
null™™ú †
)™™† °
{
´´ 	
PropertyInfo
¨¨ 
info
¨¨ 
=
¨¨ 
null
¨¨  $
;
¨¨$ %
if
≠≠ 
(
≠≠ 
!
≠≠ 
string
≠≠ 
.
≠≠ 
IsNullOrEmpty
≠≠ %
(
≠≠% &
propertyName
≠≠& 2
)
≠≠2 3
)
≠≠3 4
{
ÆÆ 
info
ØØ 
=
ØØ 
type
ØØ 
.
ØØ 
GetProperty
ØØ '
(
ØØ' (
propertyName
ØØ( 4
)
ØØ4 5
;
ØØ5 6
Type
∞∞ 
iType
∞∞ 
=
∞∞ 
info
∞∞ !
.
∞∞! "
PropertyType
∞∞" .
;
∞∞. /
switch
±± 
(
±± 
typeChecker
±± #
)
±±# $
{
≤≤ 
case
≥≥ 
TypeChecker
≥≥ $
.
≥≥$ %
String
≥≥% +
:
≥≥+ ,
info
≥≥- 1
=
≥≥2 3
(
≥≥4 5
iType
≥≥5 :
.
≥≥: ;
IsString
≥≥; C
(
≥≥C D
)
≥≥D E
)
≥≥E F
?
≥≥G H
info
≥≥I M
:
≥≥N O
null
≥≥P T
;
≥≥T U
break
≥≥V [
;
≥≥[ \
case
¥¥ 
TypeChecker
¥¥ $
.
¥¥$ %
StringBuilder
¥¥% 2
:
¥¥2 3
info
¥¥4 8
=
¥¥9 :
(
¥¥; <
iType
¥¥< A
.
¥¥A B
IsStringBuilder
¥¥B Q
(
¥¥Q R
)
¥¥R S
)
¥¥S T
?
¥¥U V
info
¥¥W [
:
¥¥\ ]
null
¥¥^ b
;
¥¥b c
break
¥¥d i
;
¥¥i j
case
µµ 
TypeChecker
µµ $
.
µµ$ %
	AnyString
µµ% .
:
µµ. /
info
µµ0 4
=
µµ5 6
(
µµ7 8
iType
µµ8 =
.
µµ= >
IsAnyString
µµ> I
(
µµI J
)
µµJ K
)
µµK L
?
µµM N
info
µµO S
:
µµT U
null
µµV Z
;
µµZ [
break
µµ\ a
;
µµa b
case
∑∑ 
TypeChecker
∑∑ $
.
∑∑$ %
DateTime
∑∑% -
:
∑∑- .
info
∑∑/ 3
=
∑∑4 5
(
∑∑6 7
iType
∑∑7 <
.
∑∑< =

IsDateTime
∑∑= G
(
∑∑G H
)
∑∑H I
)
∑∑I J
?
∑∑K L
info
∑∑M Q
:
∑∑R S
null
∑∑T X
;
∑∑X Y
break
∑∑Z _
;
∑∑_ `
case
∏∏ 
TypeChecker
∏∏ $
.
∏∏$ %
DateTimeOffset
∏∏% 3
:
∏∏3 4
info
∏∏5 9
=
∏∏: ;
(
∏∏< =
iType
∏∏= B
.
∏∏B C
IsDateTimeOffset
∏∏C S
(
∏∏S T
)
∏∏T U
)
∏∏U V
?
∏∏W X
info
∏∏Y ]
:
∏∏^ _
null
∏∏` d
;
∏∏d e
break
∏∏f k
;
∏∏k l
case
ππ 
TypeChecker
ππ $
.
ππ$ %
AnyDateTime
ππ% 0
:
ππ0 1
info
ππ2 6
=
ππ7 8
(
ππ9 :
iType
ππ: ?
.
ππ? @
IsAnyDateTime
ππ@ M
(
ππM N
)
ππN O
)
ππO P
?
ππQ R
info
ππS W
:
ππX Y
null
ππZ ^
;
ππ^ _
break
ππ` e
;
ππe f
case
ªª 
TypeChecker
ªª $
.
ªª$ %
Byte
ªª% )
:
ªª) *
info
ªª+ /
=
ªª0 1
(
ªª2 3
iType
ªª3 8
.
ªª8 9
IsByte
ªª9 ?
(
ªª? @
)
ªª@ A
)
ªªA B
?
ªªC D
info
ªªE I
:
ªªJ K
null
ªªL P
;
ªªP Q
break
ªªR W
;
ªªW X
case
ºº 
TypeChecker
ºº $
.
ºº$ %
UInt
ºº% )
:
ºº) *
info
ºº+ /
=
ºº0 1
(
ºº2 3
iType
ºº3 8
.
ºº8 9
IsUInt
ºº9 ?
(
ºº? @
)
ºº@ A
)
ººA B
?
ººC D
info
ººE I
:
ººJ K
null
ººL P
;
ººP Q
break
ººR W
;
ººW X
case
ΩΩ 
TypeChecker
ΩΩ $
.
ΩΩ$ %
UShort
ΩΩ% +
:
ΩΩ+ ,
info
ΩΩ- 1
=
ΩΩ2 3
(
ΩΩ4 5
iType
ΩΩ5 :
.
ΩΩ: ;
IsUShort
ΩΩ; C
(
ΩΩC D
)
ΩΩD E
)
ΩΩE F
?
ΩΩG H
info
ΩΩI M
:
ΩΩN O
null
ΩΩP T
;
ΩΩT U
break
ΩΩV [
;
ΩΩ[ \
case
ææ 
TypeChecker
ææ $
.
ææ$ %
ULong
ææ% *
:
ææ* +
info
ææ, 0
=
ææ1 2
(
ææ3 4
iType
ææ4 9
.
ææ9 :
IsULong
ææ: A
(
ææA B
)
ææB C
)
ææC D
?
ææE F
info
ææG K
:
ææL M
null
ææN R
;
ææR S
break
ææT Y
;
ææY Z
case
øø 
TypeChecker
øø $
.
øø$ %
AnyUnsignedInt
øø% 3
:
øø3 4
info
øø5 9
=
øø: ;
(
øø< =
iType
øø= B
.
øøB C"
IsAnyUnsignedInteger
øøC W
(
øøW X
)
øøX Y
)
øøY Z
?
øø[ \
info
øø] a
:
øøb c
null
øød h
;
øøh i
break
øøj o
;
øøo p
case
¡¡ 
TypeChecker
¡¡ $
.
¡¡$ %

SignedByte
¡¡% /
:
¡¡/ 0
info
¡¡1 5
=
¡¡6 7
(
¡¡8 9
iType
¡¡9 >
.
¡¡> ?
IsSignedByte
¡¡? K
(
¡¡K L
)
¡¡L M
)
¡¡M N
?
¡¡O P
info
¡¡Q U
:
¡¡V W
null
¡¡X \
;
¡¡\ ]
break
¡¡^ c
;
¡¡c d
case
¬¬ 
TypeChecker
¬¬ $
.
¬¬$ %
Int
¬¬% (
:
¬¬( )
info
¬¬* .
=
¬¬/ 0
(
¬¬1 2
iType
¬¬2 7
.
¬¬7 8
IsInt
¬¬8 =
(
¬¬= >
)
¬¬> ?
)
¬¬? @
?
¬¬A B
info
¬¬C G
:
¬¬H I
null
¬¬J N
;
¬¬N O
break
¬¬P U
;
¬¬U V
case
√√ 
TypeChecker
√√ $
.
√√$ %
Short
√√% *
:
√√* +
info
√√, 0
=
√√1 2
(
√√3 4
iType
√√4 9
.
√√9 :
IsShort
√√: A
(
√√A B
)
√√B C
)
√√C D
?
√√E F
info
√√G K
:
√√L M
null
√√N R
;
√√R S
break
√√T Y
;
√√Y Z
case
ƒƒ 
TypeChecker
ƒƒ $
.
ƒƒ$ %
Long
ƒƒ% )
:
ƒƒ) *
info
ƒƒ+ /
=
ƒƒ0 1
(
ƒƒ2 3
iType
ƒƒ3 8
.
ƒƒ8 9
IsLong
ƒƒ9 ?
(
ƒƒ? @
)
ƒƒ@ A
)
ƒƒA B
?
ƒƒC D
info
ƒƒE I
:
ƒƒJ K
null
ƒƒL P
;
ƒƒP Q
break
ƒƒR W
;
ƒƒW X
case
≈≈ 
TypeChecker
≈≈ $
.
≈≈$ %
AnySignedInt
≈≈% 1
:
≈≈1 2
info
≈≈3 7
=
≈≈8 9
(
≈≈: ;
iType
≈≈; @
.
≈≈@ A 
IsAnySignedInteger
≈≈A S
(
≈≈S T
)
≈≈T U
)
≈≈U V
?
≈≈W X
info
≈≈Y ]
:
≈≈^ _
null
≈≈` d
;
≈≈d e
break
≈≈f k
;
≈≈k l
case
«« 
TypeChecker
«« $
.
««$ %

AnyInteger
««% /
:
««/ 0
info
««1 5
=
««6 7
(
««8 9
iType
««9 >
.
««> ?
IsAnyInteger
««? K
(
««K L
)
««L M
)
««M N
?
««O P
info
««Q U
:
««V W
null
««X \
;
««\ ]
break
««^ c
;
««c d
case
…… 
TypeChecker
…… $
.
……$ %
Double
……% +
:
……+ ,
info
……- 1
=
……2 3
(
……4 5
iType
……5 :
.
……: ;
IsDouble
……; C
(
……C D
)
……D E
)
……E F
?
……G H
info
……I M
:
……N O
null
……P T
;
……T U
break
……V [
;
……[ \
case
   
TypeChecker
   $
.
  $ %
Float
  % *
:
  * +
info
  , 0
=
  1 2
(
  3 4
iType
  4 9
.
  9 :
IsFloat
  : A
(
  A B
)
  B C
)
  C D
?
  E F
info
  G K
:
  L M
null
  N R
;
  R S
break
  T Y
;
  Y Z
case
ÀÀ 
TypeChecker
ÀÀ $
.
ÀÀ$ %
AnyFloat
ÀÀ% -
:
ÀÀ- .
info
ÀÀ/ 3
=
ÀÀ4 5
(
ÀÀ6 7
iType
ÀÀ7 <
.
ÀÀ< = 
IsAnyFloatingPoint
ÀÀ= O
(
ÀÀO P
)
ÀÀP Q
)
ÀÀQ R
?
ÀÀS T
info
ÀÀU Y
:
ÀÀZ [
null
ÀÀ\ `
;
ÀÀ` a
break
ÀÀb g
;
ÀÀg h
case
ÕÕ 
TypeChecker
ÕÕ $
.
ÕÕ$ %
Decimal
ÕÕ% ,
:
ÕÕ, -
info
ÕÕ. 2
=
ÕÕ3 4
(
ÕÕ5 6
iType
ÕÕ6 ;
.
ÕÕ; <
	IsDecimal
ÕÕ< E
(
ÕÕE F
)
ÕÕF G
)
ÕÕG H
?
ÕÕI J
info
ÕÕK O
:
ÕÕP Q
null
ÕÕR V
;
ÕÕV W
break
ÕÕX ]
;
ÕÕ] ^
case
œœ 
TypeChecker
œœ $
.
œœ$ %
Numeric
œœ% ,
:
œœ, -
info
œœ. 2
=
œœ3 4
(
œœ5 6
iType
œœ6 ;
.
œœ; <
	IsNumeric
œœ< E
(
œœE F
)
œœF G
)
œœG H
?
œœI J
info
œœK O
:
œœP Q
null
œœR V
;
œœV W
break
œœX ]
;
œœ] ^
case
—— 
TypeChecker
—— $
.
——$ %
	Specified
——% .
:
——. /
info
——0 4
=
——5 6
(
——7 8
iType
——8 =
==
——> @
specifiedType
——A N
)
——N O
?
——P Q
info
——R V
:
——W X
null
——Y ]
;
——] ^
break
——_ d
;
——d e
default
““ 
:
““ 
break
““ "
;
““" #
}
”” 
}
‘‘ 
return
’’ 
info
’’ 
;
’’ 
}
÷÷ 	
public
ÿÿ 
static
ÿÿ 
object
ÿÿ 
GetDefaultValue
ÿÿ ,
(
ÿÿ, -
this
ÿÿ- 1
Type
ÿÿ2 6
type
ÿÿ7 ;
)
ÿÿ; <
{
ŸŸ 	
return
⁄⁄ 
(
⁄⁄ 
type
⁄⁄ 
.
⁄⁄ 
IsValueType
⁄⁄ $
)
⁄⁄$ %
?
⁄⁄& '
	Activator
⁄⁄( 1
.
⁄⁄1 2
CreateInstance
⁄⁄2 @
(
⁄⁄@ A
type
⁄⁄A E
)
⁄⁄E F
:
⁄⁄G H
null
⁄⁄I M
;
⁄⁄M N
}
€€ 	
public
›› 
static
›› 
bool
›› 
IsEnumerableType
›› +
(
››+ ,
this
››, 0
Type
››1 5
type
››6 :
)
››: ;
{
ﬁﬁ 	
return
ﬂﬂ 
(
ﬂﬂ 
type
ﬂﬂ 
.
ﬂﬂ 
GetInterface
ﬂﬂ %
(
ﬂﬂ% &
$str
ﬂﬂ& 3
)
ﬂﬂ3 4
!=
ﬂﬂ5 7
null
ﬂﬂ8 <
)
ﬂﬂ< =
;
ﬂﬂ= >
}
‡‡ 	
}
·· 
}‚‚ ï
TD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\outputparam.cs
	namespace 	
Shared
 
. 
Data 
{ 
[ 
AttributeUsage 
( 
AttributeTargets $
.$ %
Property% -
)- .
]. /
public 

class 
outputparam 
: 
	Attribute (
{ 
public 
	ParamType 
	ParamType "
{# $
get% (
;( )
set* -
;- .
}/ 0
}		 
public 

enum 
	ParamType 
{ 
Input 
= 
$num 
, 
Output 
= 
$num 
, 
InputOutput 
= 
$num 
} 
} ¶D
[D:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\PWConnectionString.cs
	namespace 	
Shared
 
. 
Data 
{ 
public 

sealed 
partial 
class #
PWConnectionStringleton  7
:8 9
	Singleton: C
<C D#
PWConnectionStringletonD [
>[ \
{ 
public		 
PWConnectionString		 !
PWConnString		" .
{		/ 0
get		1 4
;		4 5
set		6 9
;		9 :
}		; <
public 
void 
Init 
( 
string 
name  $
,$ %
string& ,
server- 3
,3 4
string5 ;
database< D
,D E
boolF J
encryptTrafficK Y
=Z [
false\ a
,a b
stringc i
uidj m
=n o
$strp r
,r s
stringt z
pwd{ ~
=	 Ä
$str
Å É
)
É Ñ
{ 	
this 
. 
PWConnString 
= 
new  #
PWConnectionString$ 6
(6 7
name7 ;
,; <
server= C
,C D
databaseE M
,M N
encryptTrafficO ]
,] ^
uid_ b
,b c
pwdd g
)g h
;h i
} 	
} 
public 

class 
PWConnectionString #
{ 
public 
bool 
EncryptTraffic "
{# $
get% (
;( )
set* -
;- .
}/ 0
public 
string 
Name 
{ 
get  
;  !
set" %
;% &
}' (
	protected 
string 
Server 
{  !
get" %
;% &
set' *
;* +
}, -
	protected 
string 
Database !
{" #
get$ '
;' (
set) ,
;, -
}. /
	protected 
string 
UserID 
{  !
get" %
;% &
set' *
;* +
}, -
	protected 
string 
Password !
{" #
get$ '
;' (
set) ,
;, -
}. /
private 
bool 
IsValid 
{ 	
get 
{ 
string 
value 
= 
string %
.% &
Concat& ,
(, -
this- 1
.1 2
Server2 8
,8 9
$str: =
,= >
this? C
.C D
DatabaseD L
,L M
$strN Q
,Q R
thisS W
.W X
UserIDX ^
,^ _
$str` c
,c d
thise i
.i j
Passwordj r
)r s
;s t
string 
[ 
] 
parts 
=  
value! &
.& '
Split' ,
(, -
new- 0
char1 5
[5 6
]6 7
{8 9
$char: =
}> ?
,? @
StringSplitOptionsA S
.S T
RemoveEmptyEntriesT f
)f g
;g h
return 
( 
parts 
. 
Length $
>=% '
$num( )
)) *
;* +
}   
}!! 	
private"" 
string"" 
Credentials"" "
{## 	
get$$ 
{%% 
string&& 
value&& 
=&& 
$str&& 5
;&&5 6
if'' 
('' 
string'' 
.'' 
IsNullOrEmpty'' (
(''( )
this'') -
.''- .
Password''. 6
)''6 7
&&''8 :
string''; A
.''A B
IsNullOrEmpty''B O
(''O P
this''P T
.''T U
UserID''U [
)''[ \
)''\ ]
{(( 
value)) 
=)) 
string)) "
.))" #
Format))# )
())) *
$str))* 4
,))4 5
value))6 ;
))); <
;))< =
}** 
else++ 
{,, 
value-- 
=-- 
string-- "
.--" #
Format--# )
(--) *
$str--* P
,--P Q
value--R W
,--W X
this--Y ]
.--] ^
UserID--^ d
,--d e
this--f j
.--j k
Password--k s
)--s t
;--t u
}.. 
return// 
value// 
;// 
}00 
}11 	
private22 
string22  
WithEncryptedTraffic22 +
{33 	
get44 
{55 
string66 
value66 
=66 
string66 %
.66% &
Empty66& +
;66+ ,
if77 
(77 
this77 
.77 
EncryptTraffic77 '
)77' (
{88 
value99 
=99 
$str99 H
;99H I
}:: 
return;; 
value;; 
;;; 
}<< 
}== 	
public>> 
string>> 
ConnectionString>> &
{?? 	
get@@ 
{AA 
stringBB 
valueBB 
=BB 
stringBB %
.BB% &
EmptyBB& +
;BB+ ,
ifCC 
(CC 
thisCC 
.CC 
IsValidCC  
)CC  !
{DD 
valueEE 
=EE 
stringEE "
.EE" #
FormatEE# )
(EE) *
$strEE* Y
,EEY Z
thisEE[ _
.EE_ `
ServerEE` f
,EEf g
thisEEh l
.EEl m
DatabaseEEm u
,EEu v
thisEEw {
.EE{ |
Credentials	EE| á
,
EEá à
this
EEâ ç
.
EEç é"
WithEncryptedTraffic
EEé ¢
)
EE¢ £
;
EE£ §
}FF 
elseGG 
{HH 
throwII 
newII %
InvalidOperationExceptionII 7
(II7 8
$strII8 
)	II Ä
;
IIÄ Å
}JJ 
returnKK 
valueKK 
.KK 
Base64EncodeKK )
(KK) *
)KK* +
;KK+ ,
}LL 
}MM 	
publicOO 
PWConnectionStringOO !
(OO! "
stringOO" (
nameOO) -
,OO- .
stringOO/ 5
serverOO6 <
,OO< =
stringOO> D
databaseOOE M
,OOM N
boolOOO S
encryptTrafficOOT b
=OOc d
falseOOe j
,OOj k
stringOOl r
uidOOs v
=OOw x
$strOOy {
,OO{ |
string	OO} É
pwd
OOÑ á
=
OOà â
$str
OOä å
)
OOå ç
{PP 	
thisQQ 
.QQ 
NameQQ 
=QQ 
nameQQ 
;QQ 
ifRR 
(RR 
stringRR 
.RR 
IsNullOrEmptyRR $
(RR$ %
serverRR% +
)RR+ ,
)RR, -
{RR. /
throwRR0 5
newRR6 9!
ArgumentNullExceptionRR: O
(RRO P
$strRRP X
)RRX Y
;RRY Z
}RR[ \
ifSS 
(SS 
stringSS 
.SS 
IsNullOrEmptySS $
(SS$ %
databaseSS% -
)SS- .
)SS. /
{SS0 1
throwSS2 7
newSS8 ;!
ArgumentNullExceptionSS< Q
(SSQ R
$strSSR \
)SS\ ]
;SS] ^
}SS_ `
thisTT 
.TT 
ServerTT 
=TT 
serverTT  
;TT  !
thisUU 
.UU 
DatabaseUU 
=UU 
databaseUU $
;UU$ %
thisVV 
.VV 
UserIDVV 
=VV 
uidVV 
;VV 
thisWW 
.WW 
PasswordWW 
=WW 
pwdWW 
;WW  
thisXX 
.XX 
EncryptTrafficXX 
=XX  !
encryptTrafficXX" 0
;XX0 1
}YY 	
public[[ 
override[[ 
string[[ 
ToString[[ '
([[' (
)[[( )
{\\ 	
return]] 
this]] 
.]] 
ConnectionString]] (
;]]( )
}^^ 	
}__ 
}`` Ç
VD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\SingletonBase.cs
	namespace 	
Shared
 
. 
Data 
{ 
public 

abstract 
class 
	Singleton #
<# $
T$ %
>% &
where' ,
T- .
:/ 0
class1 6
{ 
private 
static 
readonly 
Lazy  $
<$ %
T% &
>& '
lazy( ,
=- .
new/ 2
Lazy3 7
<7 8
T8 9
>9 :
(: ;
(; <
)< =
=>> @
CreateA G
(G H
)H I
)I J
;J K
public		 
static		 
T		 
Instance		  
{		! "
get		# &
{		' (
return		) /
lazy		0 4
.		4 5
Value		5 :
;		: ;
}		< =
}		> ?
	protected 
	Singleton 
( 
) 
{ 	
Debug 
. 
	WriteLine 
( 
string "
." #
Format# )
() *
$str* =
,= >
typeof? E
(E F
TF G
)G H
.H I
GetTypeI P
(P Q
)Q R
.R S
NameS W
)W X
)X Y
;Y Z
} 	
private 
static 
T 
Create 
(  
)  !
{ 	
return 
	Activator 
. 
CreateInstance +
(+ ,
typeof, 2
(2 3
T3 4
)4 5
,5 6
true7 ;
); <
as= ?
T@ A
;A B
} 	
} 
} ˙{
MD:\Project\NexAEI\nexpcf.api.logger\nexpcf.api\nexpcf.api\Shared.Data\Util.cs
	namespace 	
Shared
 
. 
Data 
{ 
public 

static 
class 
Util 
{ 
public 
static 
string 
CS 
(  
string  &
env' *
=+ ,
$str- 2
)2 3
{ 	
try 
{ 
string 
connStr 
=  
$str	! ±
;
± ≤
if 
( 
env 
== 
$str !
)! "
{ 
connStr 
= 
$str	 ¶
;
¶ ß
} 
return 
connStr 
; 
} 
catch 
( 
	Exception 
ex 
)  
{ 
throw 
ex 
; 
} 
} 	
public!! 
static!! 
T!! 

ChangeType!! "
<!!" #
T!!# $
>!!$ %
(!!% &
object!!& ,
value!!- 2
)!!2 3
{"" 	
var## 
t## 
=## 
typeof## 
(## 
T## 
)## 
;## 
if$$ 
($$ 
t$$ 
.$$ 
IsGenericType$$ 
&&$$  "
t$$# $
.$$$ %$
GetGenericTypeDefinition$$% =
($$= >
)$$> ?
.$$? @
Equals$$@ F
($$F G
typeof$$G M
($$M N
Nullable$$N V
<$$V W
>$$W X
)$$X Y
)$$Y Z
)$$Z [
{%% 
if&& 
(&& 
value&& 
==&& 
null&& !
)&&! "
{'' 
return(( 
default(( "
(((" #
T((# $
)(($ %
;((% &
})) 
t** 
=** 
Nullable** 
.** 
GetUnderlyingType** .
(**. /
t**/ 0
)**0 1
;**1 2
}++ 
return,, 
(,, 
T,, 
),, 
Convert,, 
.,, 

ChangeType,, (
(,,( )
value,,) .
,,,. /
t,,0 1
),,1 2
;,,2 3
}-- 	
public// 
static// 
object// 

ChangeType// '
(//' (
object//( .
value/// 4
,//4 5
Type//6 :

conversion//; E
)//E F
{00 	
var11 
t11 
=11 

conversion11 
;11 
if22 
(22 
t22 
.22 
IsGenericType22 
&&22  "
t22# $
.22$ %$
GetGenericTypeDefinition22% =
(22= >
)22> ?
.22? @
Equals22@ F
(22F G
typeof22G M
(22M N
Nullable22N V
<22V W
>22W X
)22X Y
)22Y Z
)22Z [
{33 
if44 
(44 
value44 
==44 
null44 !
)44! "
{55 
return66 
null66 
;66  
}77 
t88 
=88 
Nullable88 
.88 
GetUnderlyingType88 .
(88. /
t88/ 0
)880 1
;881 2
}99 
return:: 
Convert:: 
.:: 

ChangeType:: %
(::% &
value::& +
,::+ ,
t::- .
)::. /
;::/ 0
};; 	
public== 
static== 
void== 
CopyPropertiesFrom== -
(==- .
this==. 2
object==3 9
self==: >
,==> ?
object==@ F
parent==G M
)==M N
{>> 	
var?? 
fromProperties?? 
=??  
parent??! '
.??' (
GetType??( /
(??/ 0
)??0 1
.??1 2
GetProperties??2 ?
(??? @
)??@ A
;??A B
var@@ 
toProperties@@ 
=@@ 
self@@ #
.@@# $
GetType@@$ +
(@@+ ,
)@@, -
.@@- .
GetProperties@@. ;
(@@; <
)@@< =
;@@= >
stringBB 
fromClassNameBB  
=BB! "
parentBB# )
.BB) *
GetTypeBB* 1
(BB1 2
)BB2 3
.BB3 4
NameBB4 8
;BB8 9
stringCC 
toClassNameCC 
=CC  
selfCC! %
.CC% &
GetTypeCC& -
(CC- .
)CC. /
.CC/ 0
NameCC0 4
;CC4 5
foreachEE 
(EE 
varEE 
fromPropertyEE %
inEE& (
fromPropertiesEE) 7
)EE7 8
{FF 
foreachGG 
(GG 
varGG 

toPropertyGG '
inGG( *
toPropertiesGG+ 7
)GG7 8
{HH 
ifII 
(II 

toPropertyII "
.II" #
NameII# '
==II( *
StringII+ 1
.II1 2
FormatII2 8
(II8 9
$strII9 A
,IIA B
fromPropertyIIC O
.IIO P
NameIIP T
)IIT U
)IIU V
{JJ 
stringKK 
?KK 
valKK  #
=KK$ %
nullKK& *
;KK* +
tryLL 
{MM 
ifNN 
(NN  
fromPropertyNN  ,
.NN, -
GetValueNN- 5
(NN5 6
parentNN6 <
)NN< =
!=NN> @
nullNNA E
)NNE F
{OO 
valPP  #
=PP$ %
ConvertPP& -
.PP- .
ToStringPP. 6
(PP6 7
fromPropertyPP7 C
.PPC D
GetValuePPD L
(PPL M
parentPPM S
)PPS T
)PPT U
;PPU V
}QQ 
elseRR  
{SS 
valTT  #
=TT$ %
nullTT& *
;TT* +
}UU 

toPropertyVV &
.VV& '
SetValueVV' /
(VV/ 0
selfVV0 4
,VV4 5

ChangeTypeVV6 @
(VV@ A
valVVA D
,VVD E

toPropertyVVF P
.VVP Q
PropertyTypeVVQ ]
)VV] ^
)VV^ _
;VV_ `
}WW 
catchXX 
{YY 
}YY 
breakZZ 
;ZZ 
}[[ 
}]] 
}^^ 
}__ 	
publicaa 
staticaa 
MySqlParameteraa $
[aa$ %
]aa% &
GetParameteraa' 3
(aa3 4
objectaa4 :
objaa; >
)aa> ?
{bb 	
stringcc 
namecc 
=cc 
stringcc  
.cc  !
Emptycc! &
;cc& '
trydd 
{ee 
Typegg 
myTypegg 
=gg 
objgg !
.gg! "
GetTypegg" )
(gg) *
)gg* +
;gg+ ,
IListhh 
<hh 
PropertyInfohh "
>hh" #
propshh$ )
=hh* +
newhh, /
Listhh0 4
<hh4 5
PropertyInfohh5 A
>hhA B
(hhB C
myTypehhC I
.hhI J
GetPropertieshhJ W
(hhW X
)hhX Y
)hhY Z
;hhZ [
MySqlParameterii 
[ii 
]ii  
arrSqlParameterii! 0
=ii1 2
newii3 6
MySqlParameterii7 E
[iiE F
(iiF G
propsiiG L
.iiL M
CountiiM R
)iiR S
]iiS T
;iiT U
intjj 
indexjj 
=jj 
$numjj 
;jj 
foreachkk 
(kk 
PropertyInfokk %
propkk& *
inkk+ -
propskk. 3
)kk3 4
{ll 
Typemm 
propTypemm !
=mm" #
propmm$ (
.mm( )
GetTypemm) 0
(mm0 1
)mm1 2
;mm2 3
objectoo 
	propValueoo $
=oo% &
propoo' +
.oo+ ,
GetValueoo, 4
(oo4 5
objoo5 8
,oo8 9
nulloo: >
)oo> ?
;oo? @
namerr 
=rr 
proprr 
.rr  
Namerr  $
;rr$ %
ifss 
(ss 
propss 
.ss 
PropertyTypess )
==ss* ,
typeofss- 3
(ss3 4
XmlDocumentss4 ?
)ss? @
)ss@ A
{tt 
ifuu 
(uu 
	propValueuu %
!=uu& (
nulluu) -
)uu- .
{vv 
arrSqlParameterww +
[ww+ ,
indexww, 1
]ww1 2
=ww3 4
newww5 8
MySqlParameterww9 G
(wwG H
$strwwH K
+wwL M
namewwN R
,wwR S
MySqlDbTypewwT _
.ww_ `
Textww` d
)wwd e
;wwe f
arrSqlParameteryy +
[yy+ ,
indexyy, 1
]yy1 2
.yy2 3
Valueyy3 8
=yy9 :
(yy; <
(yy< =
XmlDocumentyy= H
)yyH I
	propValueyyI R
)yyR S
.yyS T
InnerXmlyyT \
;yy\ ]
}zz 
else{{ 
{|| 
arrSqlParameter}} +
[}}+ ,
index}}, 1
]}}1 2
=}}3 4
new}}5 8
MySqlParameter}}9 G
(}}G H
$str}}H K
+}}L M
name}}N R
,}}R S
MySqlDbType}}T _
.}}_ `
Text}}` d
)}}d e
;}}e f
arrSqlParameter +
[+ ,
index, 1
]1 2
.2 3
Value3 8
=9 :
null; ?
;? @
}
ÄÄ 
}
ÇÇ 
else
ÑÑ 
if
ÑÑ 
(
ÑÑ 
prop
ÑÑ !
.
ÑÑ! "
PropertyType
ÑÑ" .
!=
ÑÑ/ 1
typeof
ÑÑ2 8
(
ÑÑ8 9
XmlDocument
ÑÑ9 D
)
ÑÑD E
)
ÑÑE F
{
ÖÖ 
if
ÜÜ 
(
ÜÜ 
prop
ÜÜ  
.
ÜÜ  !
GetType
ÜÜ! (
(
ÜÜ( )
)
ÜÜ) *
==
ÜÜ+ -
typeof
ÜÜ. 4
(
ÜÜ4 5
DateTime
ÜÜ5 =
)
ÜÜ= >
)
ÜÜ> ?
{
áá 
DateTime
àà $
objDate
àà% ,
=
àà- .
new
àà/ 2
DateTime
àà3 ;
(
àà; <
)
àà< =
;
àà= >
arrSqlParameter
ââ +
[
ââ+ ,
index
ââ, 1
]
ââ1 2
=
ââ3 4
(
ââ5 6
(
ââ6 7
DateTime
ââ7 ?
)
ââ? @
	propValue
ââ@ I
!=
ââJ L
objDate
ââM T
)
ââT U
?
ââV W
new
ââX [
MySqlParameter
ââ\ j
(
ââj k
$str
ââk n
+
ââo p
name
ââq u
,
ââu v
	propValueââw Ä
)ââÄ Å
:ââÇ É
newââÑ á
MySqlParameterââà ñ
(ââñ ó
$strââó ö
+ââõ ú
nameââù °
,ââ° ¢
nullââ£ ß
)ââß ®
;ââ® ©
}
ää 
else
ãã 
{
åå 
bool
éé  
isOutputParam
éé! .
=
éé/ 0
false
éé1 6
;
éé6 7
foreach
èè #
(
èè$ %
	Attribute
èè% .
a
èè/ 0
in
èè1 3
prop
èè4 8
.
èè8 9!
GetCustomAttributes
èè9 L
(
èèL M
false
èèM R
)
èèR S
)
èèS T
{
êê 
if
íí  "
(
íí# $
a
íí$ %
is
íí& (
outputparam
íí) 4
)
íí4 5
{
ìì  !
outputparam
îî$ /
os
îî0 2
=
îî3 4
(
îî5 6
outputparam
îî6 A
)
îîA B
a
îîB C
;
îîC D
if
ïï$ &
(
ïï' (
os
ïï( *
.
ïï* +
	ParamType
ïï+ 4
==
ïï5 7
	ParamType
ïï8 A
.
ïïA B
Output
ïïB H
)
ïïH I
{
ññ$ %
isOutputParam
óó( 5
=
óó6 7
true
óó8 <
;
óó< =
}
òò$ %
}
ôô  !
}
öö 
if
õõ 
(
õõ  
!
õõ  !
isOutputParam
õõ! .
)
õõ. /
{
úú 
arrSqlParameter
ùù  /
[
ùù/ 0
index
ùù0 5
]
ùù5 6
=
ùù7 8
new
ùù9 <
MySqlParameter
ùù= K
(
ùùK L
$str
ùùL O
+
ùùP Q
name
ùùR V
,
ùùV W
	propValue
ùùX a
)
ùùa b
;
ùùb c
}
ûû 
else
üü  
{
†† 
int
°°  #
size
°°$ (
=
°°) *
default
°°+ 2
(
°°2 3
int
°°3 6
)
°°6 7
;
°°7 8
foreach
££  '
(
££( )
PropertyInfo
££) 5
propertyInfo
££6 B
in
££C E
prop
££F J
.
££J K
GetType
££K R
(
££R S
)
££S T
.
££T U
GetProperties
££U b
(
££b c
)
££c d
)
££d e
{
§§  !
if
••$ &
(
••' (
propertyInfo
••( 4
.
••4 5
PropertyType
••5 A
==
••B D
typeof
••E K
(
••K L
int
••L O
)
••O P
)
••P Q
size
¶¶( ,
=
¶¶- .
$num
¶¶/ 0
;
¶¶0 1
else
ßß$ (
if
ßß) +
(
ßß, -
propertyInfo
ßß- 9
.
ßß9 :
PropertyType
ßß: F
==
ßßG I
typeof
ßßJ P
(
ßßP Q
string
ßßQ W
)
ßßW X
)
ßßX Y
size
®®( ,
=
®®- .
$num
®®/ 3
;
®®3 4
else
©©$ (
if
©©) +
(
©©, -
propertyInfo
©©- 9
.
©©9 :
PropertyType
©©: F
==
©©G I
typeof
©©J P
(
©©P Q
long
©©Q U
)
©©U V
)
©©V W
size
™™( ,
=
™™- .
$num
™™/ 0
;
™™0 1
else
´´$ (
size
¨¨( ,
=
¨¨- .
$num
¨¨/ 0
;
¨¨0 1
}
≠≠  !
var
ØØ  #
outputParam
ØØ$ /
=
ØØ0 1
new
ØØ2 5
MySqlParameter
ØØ6 D
(
ØØD E
$str
ØØE H
+
ØØI J
name
ØØK O
,
ØØO P
	propValue
ØØQ Z
)
ØØZ [
{
ØØ\ ]
	Direction
ØØ^ g
=
ØØh i 
ParameterDirection
ØØj |
.
ØØ| }
OutputØØ} É
,ØØÉ Ñ
SizeØØÖ â
=ØØä ã
sizeØØå ê
>ØØë í
$numØØì î
?ØØï ñ
sizeØØó õ
:ØØú ù
$numØØû ¢
}ØØ£ §
;ØØ§ •
arrSqlParameter
∞∞  /
[
∞∞/ 0
index
∞∞0 5
]
∞∞5 6
=
∞∞7 8
outputParam
∞∞9 D
;
∞∞D E
}
±± 
}
≤≤ 
}
≥≥ 
index
¥¥ 
++
¥¥ 
;
¥¥ 
}
µµ 
return
∑∑ 
arrSqlParameter
∑∑ &
;
∑∑& '
}
∏∏ 
catch
ππ 
(
ππ 
	Exception
ππ 
ex
ππ 
)
ππ  
{
∫∫ 
throw
ºº 
ex
ºº 
;
ºº 
}
ΩΩ 
}
ææ 	
}
øø 
public
   

class
   
DualReturnType
   
{
ÀÀ 
public
ÃÃ 
	DataTable
ÃÃ 
dt
ÃÃ 
{
ÃÃ 
get
ÃÃ !
;
ÃÃ! "
set
ÃÃ# &
;
ÃÃ& '
}
ÃÃ( )
public
ÕÕ 
string
ÕÕ 
sp
ÕÕ 
{
ÕÕ 
get
ÕÕ 
;
ÕÕ 
set
ÕÕ  #
;
ÕÕ# $
}
ÕÕ% &
}
ŒŒ 
}—— 